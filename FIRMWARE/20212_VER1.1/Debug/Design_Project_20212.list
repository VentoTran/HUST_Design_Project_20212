
Design_Project_20212.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800aae8  0800aae8  0000bae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b0  0800b1b0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b0  0800b1b0  0000c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1b8  0800b1b8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b8  0800b1b8  0000c1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1bc  0800b1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b1c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b04  200001d8  0800b398  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003cdc  0800b398  0000dcdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000343d7  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067c3  00000000  00000000  000415d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00017707  00000000  00000000  00047d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  0005f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a41  00000000  00000000  00060fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a336  00000000  00000000  00063a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e73  00000000  00000000  0008dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  00096bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d0  00000000  00000000  00096c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000219  00000000  00000000  0009d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <deregister_tm_clones>:
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <deregister_tm_clones+0x10>)
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <deregister_tm_clones+0x14>)
 8000b6c:	4283      	cmp	r3, r0
 8000b6e:	d002      	beq.n	8000b76 <deregister_tm_clones+0xe>
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <deregister_tm_clones+0x18>)
 8000b72:	b103      	cbz	r3, 8000b76 <deregister_tm_clones+0xe>
 8000b74:	4718      	bx	r3
 8000b76:	4770      	bx	lr
 8000b78:	200001d8 	.word	0x200001d8
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	00000000 	.word	0x00000000

08000b84 <register_tm_clones>:
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <register_tm_clones+0x18>)
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <register_tm_clones+0x1c>)
 8000b88:	1a1b      	subs	r3, r3, r0
 8000b8a:	0fd9      	lsrs	r1, r3, #31
 8000b8c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000b90:	1049      	asrs	r1, r1, #1
 8000b92:	d002      	beq.n	8000b9a <register_tm_clones+0x16>
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <register_tm_clones+0x20>)
 8000b96:	b103      	cbz	r3, 8000b9a <register_tm_clones+0x16>
 8000b98:	4718      	bx	r3
 8000b9a:	4770      	bx	lr
 8000b9c:	200001d8 	.word	0x200001d8
 8000ba0:	200001d8 	.word	0x200001d8
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <__do_global_dtors_aux>:
 8000ba8:	b510      	push	{r4, lr}
 8000baa:	4c06      	ldr	r4, [pc, #24]	@ (8000bc4 <__do_global_dtors_aux+0x1c>)
 8000bac:	7823      	ldrb	r3, [r4, #0]
 8000bae:	b943      	cbnz	r3, 8000bc2 <__do_global_dtors_aux+0x1a>
 8000bb0:	f7ff ffda 	bl	8000b68 <deregister_tm_clones>
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__do_global_dtors_aux+0x20>)
 8000bb6:	b113      	cbz	r3, 8000bbe <__do_global_dtors_aux+0x16>
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <__do_global_dtors_aux+0x24>)
 8000bba:	f3af 8000 	nop.w
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	7023      	strb	r3, [r4, #0]
 8000bc2:	bd10      	pop	{r4, pc}
 8000bc4:	200001d8 	.word	0x200001d8
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	0800aacc 	.word	0x0800aacc

08000bd0 <frame_dummy>:
 8000bd0:	b508      	push	{r3, lr}
 8000bd2:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <frame_dummy+0x18>)
 8000bd4:	b11b      	cbz	r3, 8000bde <frame_dummy+0xe>
 8000bd6:	4905      	ldr	r1, [pc, #20]	@ (8000bec <frame_dummy+0x1c>)
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <frame_dummy+0x20>)
 8000bda:	f3af 8000 	nop.w
 8000bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000be2:	f7ff bfcf 	b.w	8000b84 <register_tm_clones>
 8000be6:	bf00      	nop
 8000be8:	00000000 	.word	0x00000000
 8000bec:	200001dc 	.word	0x200001dc
 8000bf0:	0800aacc 	.word	0x0800aacc

08000bf4 <MX_ADC1_Init>:

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf4:	2300      	movs	r3, #0
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	2201      	movs	r2, #1
{
 8000bfc:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8000bfe:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <MX_ADC1_Init+0x54>)
 8000c00:	4c12      	ldr	r4, [pc, #72]	@ (8000c4c <MX_ADC1_Init+0x58>)
{
 8000c02:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c04:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Instance = ADC1;
 8000c08:	6004      	str	r4, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	9300      	str	r3, [sp, #0]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c10:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c12:	6043      	str	r3, [r0, #4]
 8000c14:	6083      	str	r3, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
 8000c16:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	f001 ffac 	bl	8002b74 <HAL_ADC_Init>
 8000c1c:	b960      	cbnz	r0, 8000c38 <MX_ADC1_Init+0x44>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c1e:	2400      	movs	r4, #0
 8000c20:	2501      	movs	r5, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c22:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	4669      	mov	r1, sp
 8000c26:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <MX_ADC1_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_0;
 8000c28:	e9cd 4500 	strd	r4, r5, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c2c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	f001 feb1 	bl	8002994 <HAL_ADC_ConfigChannel>
 8000c32:	b920      	cbnz	r0, 8000c3e <MX_ADC1_Init+0x4a>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c34:	b005      	add	sp, #20
 8000c36:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000c38:	f000 ff52 	bl	8001ae0 <Error_Handler>
 8000c3c:	e7ef      	b.n	8000c1e <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000c3e:	f000 ff4f 	bl	8001ae0 <Error_Handler>
}
 8000c42:	b005      	add	sp, #20
 8000c44:	bd30      	pop	{r4, r5, pc}
 8000c46:	bf00      	nop
 8000c48:	20000240 	.word	0x20000240
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c50:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000c54:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <HAL_ADC_MspInit+0x8c>)
 8000c56:	6802      	ldr	r2, [r0, #0]
{
 8000c58:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 8000c5a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c60:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(adcHandle->Instance==ADC1)
 8000c64:	d001      	beq.n	8000c6a <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c66:	b006      	add	sp, #24
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c6a:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8000c6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	699a      	ldr	r2, [r3, #24]
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8000c86:	4e16      	ldr	r6, [pc, #88]	@ (8000ce0 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	f042 0204 	orr.w	r2, r2, #4
 8000c8c:	619a      	str	r2, [r3, #24]
 8000c8e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c90:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f002 fc25 	bl	80034f0 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8000ca8:	490f      	ldr	r1, [pc, #60]	@ (8000ce8 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cae:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	60f3      	str	r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb8:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cba:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbc:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc0:	6171      	str	r1, [r6, #20]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc2:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc4:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc6:	f002 f8e1 	bl	8002e8c <HAL_DMA_Init>
 8000cca:	b918      	cbnz	r0, 8000cd4 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ccc:	622e      	str	r6, [r5, #32]
 8000cce:	6275      	str	r5, [r6, #36]	@ 0x24
}
 8000cd0:	b006      	add	sp, #24
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000cd4:	f000 ff04 	bl	8001ae0 <Error_Handler>
 8000cd8:	e7f8      	b.n	8000ccc <HAL_ADC_MspInit+0x7c>
 8000cda:	bf00      	nop
 8000cdc:	40012400 	.word	0x40012400
 8000ce0:	200001f8 	.word	0x200001f8
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40020008 	.word	0x40020008

08000cec <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_DMA_Init+0x40>)
{
 8000cee:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf0:	6958      	ldr	r0, [r3, #20]
{
 8000cf2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf4:	f040 0001 	orr.w	r0, r0, #1
 8000cf8:	6158      	str	r0, [r3, #20]
 8000cfa:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cfc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d02:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d04:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d06:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d08:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d0a:	f002 f865 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d0e:	200b      	movs	r0, #11
 8000d10:	f002 f8a8 	bl	8002e64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000d14:	200f      	movs	r0, #15
 8000d16:	2200      	movs	r2, #0
 8000d18:	2105      	movs	r1, #5
 8000d1a:	f002 f85d 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d1e:	200f      	movs	r0, #15

}
 8000d20:	b003      	add	sp, #12
 8000d22:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d26:	f002 b89d 	b.w	8002e64 <HAL_NVIC_EnableIRQ>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <DefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000d30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DefaultTask */
  printf("Enter task\n");
 8000d32:	4824      	ldr	r0, [pc, #144]	@ (8000dc4 <DefaultTask+0x94>)
 8000d34:	f007 ffa2 	bl	8008c7c <puts>

  // Initiation
  max30102_init(&max30102, &hi2c1);
 8000d38:	4923      	ldr	r1, [pc, #140]	@ (8000dc8 <DefaultTask+0x98>)
 8000d3a:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <DefaultTask+0x9c>)
 8000d3c:	f000 fed4 	bl	8001ae8 <max30102_init>
  max30102_reset(&max30102);
 8000d40:	4822      	ldr	r0, [pc, #136]	@ (8000dcc <DefaultTask+0x9c>)
 8000d42:	f000 fee7 	bl	8001b14 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8000d46:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <DefaultTask+0x9c>)
 8000d48:	f001 f944 	bl	8001fd4 <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_32, 1, 7);
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2105      	movs	r1, #5
 8000d52:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <DefaultTask+0x9c>)
 8000d54:	f001 f918 	bl	8001f88 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	481c      	ldr	r0, [pc, #112]	@ (8000dcc <DefaultTask+0x9c>)
 8000d5c:	f001 f84c 	bl	8001df8 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8000d60:	2100      	movs	r1, #0
 8000d62:	481a      	ldr	r0, [pc, #104]	@ (8000dcc <DefaultTask+0x9c>)
 8000d64:	f001 f87e 	bl	8001e64 <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <DefaultTask+0x9c>)
 8000d6c:	f001 f80e 	bl	8001d8c <max30102_set_sampling_rate>
  // RED
  max30102_set_led_current_1(&max30102, 6.6);
 8000d70:	4917      	ldr	r1, [pc, #92]	@ (8000dd0 <DefaultTask+0xa0>)
 8000d72:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <DefaultTask+0x9c>)
 8000d74:	f001 f8b0 	bl	8001ed8 <max30102_set_led_current_1>
  // IR
  max30102_set_led_current_2(&max30102, 6.6);
 8000d78:	4915      	ldr	r1, [pc, #84]	@ (8000dd0 <DefaultTask+0xa0>)
 8000d7a:	4814      	ldr	r0, [pc, #80]	@ (8000dcc <DefaultTask+0x9c>)
 8000d7c:	f001 f8d8 	bl	8001f30 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 8000d80:	2103      	movs	r1, #3
 8000d82:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <DefaultTask+0x9c>)
 8000d84:	f000 ff7a 	bl	8001c7c <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <DefaultTask+0x9c>)
 8000d8c:	f000 fedc 	bl	8001b48 <max30102_set_a_full>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 8000d90:	2101      	movs	r1, #1
 8000d92:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <DefaultTask+0x9c>)
 8000d94:	f000 ff30 	bl	8001bf8 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <DefaultTask+0x9c>)
 8000d9c:	f000 ff10 	bl	8001bc0 <max30102_set_die_temp_rdy>

  max30102_has_interrupt(&max30102);
 8000da0:	480a      	ldr	r0, [pc, #40]	@ (8000dcc <DefaultTask+0x9c>)
 8000da2:	f000 ff45 	bl	8001c30 <max30102_has_interrupt>

  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
    max30102_interrupt_handler(&max30102);
 8000da6:	4d09      	ldr	r5, [pc, #36]	@ (8000dcc <DefaultTask+0x9c>)
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <DefaultTask+0xa4>)
    osDelay(100);
 8000daa:	2064      	movs	r0, #100	@ 0x64
 8000dac:	f005 f9a4 	bl	80060f8 <osDelay>
    max30102_interrupt_handler(&max30102);
 8000db0:	4628      	mov	r0, r5
 8000db2:	f001 f9e9 	bl	8002188 <max30102_interrupt_handler>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000db6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f002 fd88 	bl	80038d0 <HAL_GPIO_TogglePin>
  for (;;)
 8000dc0:	e7f3      	b.n	8000daa <DefaultTask+0x7a>
 8000dc2:	bf00      	nop
 8000dc4:	0800ab08 	.word	0x0800ab08
 8000dc8:	20000388 	.word	0x20000388
 8000dcc:	2000027c 	.word	0x2000027c
 8000dd0:	40d33333 	.word	0x40d33333
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <Display_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_Task */
void Display_Task(void *argument)
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Display_Task */
  Display_SetEventHandler(Display_EventHandle);
  ILI9341_Init();
  ILI9341_FillScreen(ILI9341_BLACK);
  uint16_t color = 0x0000;
 8000dda:	2400      	movs	r4, #0
  Display_SetEventHandler(Display_EventHandle);
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <Display_Task+0x3c>)
  {
    tick = HAL_GetTick();
    ILI9341_FillScreen(color);
    color += 4U;
    tickElapsed = HAL_GetTick() - tick;
    printf("Took %ld ms", tickElapsed);
 8000dde:	4e0e      	ldr	r6, [pc, #56]	@ (8000e18 <Display_Task+0x40>)
  Display_SetEventHandler(Display_EventHandle);
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	f000 fe09 	bl	80019f8 <Display_SetEventHandler>
  ILI9341_Init();
 8000de6:	f000 fa65 	bl	80012b4 <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 8000dea:	4620      	mov	r0, r4
 8000dec:	f000 fdf6 	bl	80019dc <ILI9341_FillScreen>
  uint32_t tick = HAL_GetTick();
 8000df0:	f001 fdb8 	bl	8002964 <HAL_GetTick>
    tick = HAL_GetTick();
 8000df4:	f001 fdb6 	bl	8002964 <HAL_GetTick>
 8000df8:	4605      	mov	r5, r0
    ILI9341_FillScreen(color);
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f000 fdee 	bl	80019dc <ILI9341_FillScreen>
    tickElapsed = HAL_GetTick() - tick;
 8000e00:	f001 fdb0 	bl	8002964 <HAL_GetTick>
 8000e04:	4601      	mov	r1, r0
    color += 4U;
 8000e06:	3404      	adds	r4, #4
    printf("Took %ld ms", tickElapsed);
 8000e08:	4630      	mov	r0, r6
 8000e0a:	1b49      	subs	r1, r1, r5
    color += 4U;
 8000e0c:	b2a4      	uxth	r4, r4
    printf("Took %ld ms", tickElapsed);
 8000e0e:	f007 fecd 	bl	8008bac <iprintf>
  for(;;)
 8000e12:	e7ef      	b.n	8000df4 <Display_Task+0x1c>
 8000e14:	20000270 	.word	0x20000270
 8000e18:	0800ab14 	.word	0x0800ab14

08000e1c <__io_putchar>:
  {
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	4604      	mov	r4, r0
 8000e20:	b082      	sub	sp, #8
    HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	2201      	movs	r2, #1
 8000e28:	f10d 0107 	add.w	r1, sp, #7
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <__io_putchar+0x20>)
    uint8_t temp = ch;
 8000e2e:	f88d 4007 	strb.w	r4, [sp, #7]
    HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8000e32:	f004 fe79 	bl	8005b28 <HAL_UART_Transmit>
  }
 8000e36:	4620      	mov	r0, r4
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd10      	pop	{r4, pc}
 8000e3c:	200005b8 	.word	0x200005b8

08000e40 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000e40:	b510      	push	{r4, lr}
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <MX_FREERTOS_Init+0x30>)
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_FREERTOS_Init+0x34>)
 8000e48:	f005 f8f6 	bl	8006038 <osThreadNew>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <MX_FREERTOS_Init+0x38>)
  LCDHandle = osThreadNew(Display_Task, NULL, &LCD_attributes);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <MX_FREERTOS_Init+0x3c>)
 8000e54:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <MX_FREERTOS_Init+0x40>)
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000e56:	601c      	str	r4, [r3, #0]
  LCDHandle = osThreadNew(Display_Task, NULL, &LCD_attributes);
 8000e58:	f005 f8ee 	bl	8006038 <osThreadNew>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_FREERTOS_Init+0x44>)
  Display_EventHandle = osEventFlagsNew(&Display_Event_attributes);
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <MX_FREERTOS_Init+0x48>)
  LCDHandle = osThreadNew(Display_Task, NULL, &LCD_attributes);
 8000e62:	601a      	str	r2, [r3, #0]
  Display_EventHandle = osEventFlagsNew(&Display_Event_attributes);
 8000e64:	f005 f962 	bl	800612c <osEventFlagsNew>
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <MX_FREERTOS_Init+0x4c>)
 8000e6a:	6018      	str	r0, [r3, #0]
}
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	0800ab80 	.word	0x0800ab80
 8000e74:	08000d31 	.word	0x08000d31
 8000e78:	20000278 	.word	0x20000278
 8000e7c:	0800ab5c 	.word	0x0800ab5c
 8000e80:	08000dd9 	.word	0x08000dd9
 8000e84:	20000274 	.word	0x20000274
 8000e88:	0800ab4c 	.word	0x0800ab4c
 8000e8c:	20000270 	.word	0x20000270

08000e90 <max30102_plot>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000e90:	4602      	mov	r2, r0
#ifdef PLOT
  printf("%li,%li\n", red_sample, ir_sample);
 8000e92:	4801      	ldr	r0, [pc, #4]	@ (8000e98 <max30102_plot+0x8>)
 8000e94:	f007 be8a 	b.w	8008bac <iprintf>
 8000e98:	0800ab20 	.word	0x0800ab20

08000e9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	2400      	movs	r4, #0
{
 8000ea2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000ea8:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe4 <MX_GPIO_Init+0x148>)

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_CS_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000eb4:	4e4c      	ldr	r6, [pc, #304]	@ (8000fe8 <MX_GPIO_Init+0x14c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPS_RS_GPIO_Port, GPS_RS_Pin, GPIO_PIN_RESET);
 8000ebe:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8000fec <MX_GPIO_Init+0x150>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	f002 0210 	and.w	r2, r2, #16
 8000ec6:	9200      	str	r2, [sp, #0]
 8000ec8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_LED_Pin|SIM_PWR_Pin|TCH_CS_Pin, GPIO_PIN_RESET);
 8000ecc:	4d48      	ldr	r5, [pc, #288]	@ (8000ff0 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	f042 0220 	orr.w	r2, r2, #32
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000ed6:	4630      	mov	r0, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	f002 0220 	and.w	r2, r2, #32
 8000edc:	9201      	str	r2, [sp, #4]
 8000ede:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000ee2:	f242 0130 	movw	r1, #8240	@ 0x2030
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	f042 0204 	orr.w	r2, r2, #4
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	f002 0204 	and.w	r2, r2, #4
 8000ef4:	9202      	str	r2, [sp, #8]
 8000ef6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	f042 0208 	orr.w	r2, r2, #8
 8000efe:	619a      	str	r2, [r3, #24]
 8000f00:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000f02:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	9303      	str	r3, [sp, #12]
 8000f0a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000f0c:	f002 fcc6 	bl	800389c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_RS_GPIO_Port, GPS_RS_Pin, GPIO_PIN_RESET);
 8000f10:	4622      	mov	r2, r4
 8000f12:	4641      	mov	r1, r8
 8000f14:	4648      	mov	r0, r9
 8000f16:	f002 fcc1 	bl	800389c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_LED_Pin|SIM_PWR_Pin|TCH_CS_Pin, GPIO_PIN_RESET);
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	f241 0107 	movw	r1, #4103	@ 0x1007
 8000f22:	f002 fcbb 	bl	800389c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin|LCD_CS_Pin|LCD_RS_Pin;
 8000f26:	f242 0330 	movw	r3, #8240	@ 0x2030
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_Pin|LCD_CS_Pin|LCD_RS_Pin;
 8000f2e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f002 fada 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC7 PC8
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000f3c:	f24d 328f 	movw	r2, #54159	@ 0xd38f
 8000f40:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	4630      	mov	r0, r6
 8000f44:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000f46:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f002 fad1 	bl	80034f0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPS_RS_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	4648      	mov	r0, r9
 8000f50:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	e9cd 4806 	strd	r4, r8, [sp, #24]
  HAL_GPIO_Init(GPS_RS_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f002 fac9 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8000f5e:	f649 1210 	movw	r2, #39184	@ 0x9910
 8000f62:	2303      	movs	r3, #3
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	4648      	mov	r0, r9
 8000f66:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8000f68:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f002 fac0 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_LED_Pin|SIM_PWR_Pin|TCH_CS_Pin;
 8000f70:	f241 0307 	movw	r3, #4103	@ 0x1007
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	4628      	mov	r0, r5
 8000f76:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_LED_Pin|SIM_PWR_Pin|TCH_CS_Pin;
 8000f78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	e9cd 7405 	strd	r7, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f002 fab5 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 8000f86:	2240      	movs	r2, #64	@ 0x40
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = TCH_IRQ_Pin;
 8000f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(TCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f002 faac 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f98:	2204      	movs	r2, #4
 8000f9a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	a904      	add	r1, sp, #16
 8000f9e:	4816      	ldr	r0, [pc, #88]	@ (8000ff8 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f002 faa4 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fa8:	2238      	movs	r2, #56	@ 0x38
 8000faa:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	4628      	mov	r0, r5
 8000fae:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f002 fa9c 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_STDBY_Pin|PWR_CHRG_Pin;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f44f 7240 	mov.w	r2, #768	@ 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = PWR_STDBY_Pin|PWR_CHRG_Pin;
 8000fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f002 fa92 	bl	80034f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fcc:	4622      	mov	r2, r4
 8000fce:	2105      	movs	r1, #5
 8000fd0:	2017      	movs	r0, #23
 8000fd2:	f001 ff01 	bl	8002dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fd6:	2017      	movs	r0, #23
 8000fd8:	f001 ff44 	bl	8002e64 <HAL_NVIC_EnableIRQ>

}
 8000fdc:	b009      	add	sp, #36	@ 0x24
 8000fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	10210000 	.word	0x10210000
 8000ff8:	40011400 	.word	0x40011400

08000ffc <MX_I2C1_Init>:

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
{
 8001002:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_I2C1_Init+0x30>)
 8001006:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8001008:	490a      	ldr	r1, [pc, #40]	@ (8001034 <MX_I2C1_Init+0x38>)
  hi2c1.Instance = I2C1;
 800100a:	6004      	str	r4, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800100c:	6041      	str	r1, [r0, #4]
 800100e:	6083      	str	r3, [r0, #8]
 8001010:	60c3      	str	r3, [r0, #12]
 8001012:	6102      	str	r2, [r0, #16]
 8001014:	6143      	str	r3, [r0, #20]
 8001016:	6183      	str	r3, [r0, #24]
 8001018:	61c3      	str	r3, [r0, #28]
 800101a:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101c:	f002 fdc2 	bl	8003ba4 <HAL_I2C_Init>
 8001020:	b900      	cbnz	r0, 8001024 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001022:	bd10      	pop	{r4, pc}
 8001024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001028:	f000 bd5a 	b.w	8001ae0 <Error_Handler>
 800102c:	20000388 	.word	0x20000388
 8001030:	40005400 	.word	0x40005400
 8001034:	00061a80 	.word	0x00061a80

08001038 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2300      	movs	r3, #0
{
 800103a:	b5d0      	push	{r4, r6, r7, lr}
  if(i2cHandle->Instance==I2C1)
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <HAL_I2C_MspInit+0x58>)
 800103e:	6801      	ldr	r1, [r0, #0]
{
 8001040:	b086      	sub	sp, #24
  if(i2cHandle->Instance==I2C1)
 8001042:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001048:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(i2cHandle->Instance==I2C1)
 800104c:	d001      	beq.n	8001052 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800104e:	b006      	add	sp, #24
 8001050:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001054:	26c0      	movs	r6, #192	@ 0xc0
 8001056:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4c0e      	ldr	r4, [pc, #56]	@ (8001094 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	480f      	ldr	r0, [pc, #60]	@ (8001098 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	61a3      	str	r3, [r4, #24]
 8001066:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001068:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f002 fa3b 	bl	80034f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800107a:	69e3      	ldr	r3, [r4, #28]
 800107c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001080:	61e3      	str	r3, [r4, #28]
 8001082:	69e3      	ldr	r3, [r4, #28]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
}
 800108c:	b006      	add	sp, #24
 800108e:	bdd0      	pop	{r4, r6, r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	40010c00 	.word	0x40010c00

0800109c <ILI9341_SetAddressWindow>:
    osEventFlagsSet(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE);
}
#endif

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a0:	272a      	movs	r7, #42	@ 0x2a
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80010a2:	4e43      	ldr	r6, [pc, #268]	@ (80011b0 <ILI9341_SetAddressWindow+0x114>)
{
 80010a4:	b083      	sub	sp, #12
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80010a6:	4d43      	ldr	r5, [pc, #268]	@ (80011b4 <ILI9341_SetAddressWindow+0x118>)
{
 80010a8:	4683      	mov	fp, r0
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80010aa:	4c43      	ldr	r4, [pc, #268]	@ (80011b8 <ILI9341_SetAddressWindow+0x11c>)
{
 80010ac:	4689      	mov	r9, r1
 80010ae:	4692      	mov	sl, r2
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80010b0:	4630      	mov	r0, r6
 80010b2:	f88d 7004 	strb.w	r7, [sp, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80010ba:	2700      	movs	r7, #0
{
 80010bc:	4698      	mov	r8, r3
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80010be:	f002 fbed 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	2201      	movs	r2, #1
 80010c6:	4628      	mov	r0, r5
 80010c8:	f004 f878 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	f005 f887 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80010dc:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80010e0:	f363 0707 	bfi	r7, r3, #0, #8
 80010e4:	f36b 270f 	bfi	r7, fp, #8, #8
 80010e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80010ec:	f363 4717 	bfi	r7, r3, #16, #8
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80010f0:	4630      	mov	r0, r6
 80010f2:	4611      	mov	r1, r2
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80010f4:	f36a 671f 	bfi	r7, sl, #24, #8
 80010f8:	9701      	str	r7, [sp, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80010fa:	f002 fbcf 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80010fe:	2204      	movs	r2, #4
 8001100:	4628      	mov	r0, r5
 8001102:	eb0d 0102 	add.w	r1, sp, r2
 8001106:	f004 f859 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	f005 f868 	bl	80061e8 <osEventFlagsWait>
        ILI9341_WriteData(data, sizeof(data));
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001118:	232b      	movs	r3, #43	@ 0x2b
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800111a:	4630      	mov	r0, r6
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	f88d 3004 	strb.w	r3, [sp, #4]
 8001124:	f002 fbba 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001128:	a901      	add	r1, sp, #4
 800112a:	2201      	movs	r2, #1
 800112c:	4628      	mov	r0, r5
 800112e:	f004 f845 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	6820      	ldr	r0, [r4, #0]
 800113c:	f005 f854 	bl	80061e8 <osEventFlagsWait>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001140:	2000      	movs	r0, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001144:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8001148:	f363 0007 	bfi	r0, r3, #0, #8
 800114c:	f369 200f 	bfi	r0, r9, #8, #8
 8001150:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8001154:	f363 4017 	bfi	r0, r3, #16, #8
 8001158:	f368 601f 	bfi	r0, r8, #24, #8
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800115c:	4611      	mov	r1, r2
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800115e:	9001      	str	r0, [sp, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001160:	4630      	mov	r0, r6
 8001162:	f002 fb9b 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 8001166:	2204      	movs	r2, #4
 8001168:	4628      	mov	r0, r5
 800116a:	eb0d 0102 	add.w	r1, sp, r2
 800116e:	f004 f825 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	6820      	ldr	r0, [r4, #0]
 800117c:	f005 f834 	bl	80061e8 <osEventFlagsWait>
        ILI9341_WriteData(data, sizeof(data));
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8001180:	232c      	movs	r3, #44	@ 0x2c
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001182:	4630      	mov	r0, r6
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	f88d 3004 	strb.w	r3, [sp, #4]
 800118c:	f002 fb86 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001190:	a901      	add	r1, sp, #4
 8001192:	2201      	movs	r2, #1
 8001194:	4628      	mov	r0, r5
 8001196:	f004 f811 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	f005 f820 	bl	80061e8 <osEventFlagsWait>
}
 80011a8:	b003      	add	sp, #12
 80011aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ae:	bf00      	nop
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	20000428 	.word	0x20000428
 80011b8:	200003dc 	.word	0x200003dc

080011bc <ILI9341_FillRectangle.part.0>:
    ILI9341_DrawLine(x + w, y, x + w, y + h, color);
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
 80011bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c0:	461c      	mov	r4, r3
{
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80011c2:	1883      	adds	r3, r0, r2
void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
 80011c4:	b083      	sub	sp, #12
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80011c6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
 80011ca:	4605      	mov	r5, r0
 80011cc:	4688      	mov	r8, r1
 80011ce:	f8bd 9030 	ldrh.w	r9, [sp, #48]	@ 0x30
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80011d2:	dc5a      	bgt.n	800128a <ILI9341_FillRectangle.part.0+0xce>
 80011d4:	4617      	mov	r7, r2
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;

    ILI9341_Select();
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011d6:	f102 3aff 	add.w	sl, r2, #4294967295
 80011da:	4482      	add	sl, r0
 80011dc:	fa1f fa8a 	uxth.w	sl, sl
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80011e0:	eb08 0304 	add.w	r3, r8, r4
 80011e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011e6:	dc37      	bgt.n	8001258 <ILI9341_FillRectangle.part.0+0x9c>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011e8:	1e66      	subs	r6, r4, #1
 80011ea:	eb08 0b06 	add.w	fp, r8, r6
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	4829      	ldr	r0, [pc, #164]	@ (8001298 <ILI9341_FillRectangle.part.0+0xdc>)
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011f4:	fa1f fb8b 	uxth.w	fp, fp
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80011f8:	f002 fb50 	bl	800389c <HAL_GPIO_WritePin>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011fc:	4652      	mov	r2, sl
 80011fe:	4641      	mov	r1, r8
 8001200:	4628      	mov	r0, r5
 8001202:	465b      	mov	r3, fp
 8001204:	f7ff ff4a 	bl	800109c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
    uint8_t data[] = { color >> 8, color & 0xFF };
 800120a:	fa99 f999 	rev16.w	r9, r9
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800120e:	4611      	mov	r1, r2
 8001210:	4822      	ldr	r0, [pc, #136]	@ (800129c <ILI9341_FillRectangle.part.0+0xe0>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001212:	f8ad 9004 	strh.w	r9, [sp, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001216:	f002 fb41 	bl	800389c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800121a:	b1ac      	cbz	r4, 8001248 <ILI9341_FillRectangle.part.0+0x8c>
        for(x = w; x > 0; x--) {
 800121c:	b18f      	cbz	r7, 8001242 <ILI9341_FillRectangle.part.0+0x86>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800121e:	4d20      	ldr	r5, [pc, #128]	@ (80012a0 <ILI9341_FillRectangle.part.0+0xe4>)
        for(x = w; x > 0; x--) {
 8001220:	463c      	mov	r4, r7
 8001222:	3c01      	subs	r4, #1
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2202      	movs	r2, #2
 800122a:	4628      	mov	r0, r5
 800122c:	a901      	add	r1, sp, #4
        for(x = w; x > 0; x--) {
 800122e:	b2a4      	uxth	r4, r4
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001230:	f003 feea 	bl	8005008 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001234:	2c00      	cmp	r4, #0
 8001236:	d1f4      	bne.n	8001222 <ILI9341_FillRectangle.part.0+0x66>
    for(y = h; y > 0; y--) {
 8001238:	b2b4      	uxth	r4, r6
 800123a:	b12c      	cbz	r4, 8001248 <ILI9341_FillRectangle.part.0+0x8c>
 800123c:	1e66      	subs	r6, r4, #1
 800123e:	e7ef      	b.n	8001220 <ILI9341_FillRectangle.part.0+0x64>
 8001240:	1e66      	subs	r6, r4, #1
 8001242:	b2b4      	uxth	r4, r6
 8001244:	2c00      	cmp	r4, #0
 8001246:	d1fb      	bne.n	8001240 <ILI9341_FillRectangle.part.0+0x84>
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2110      	movs	r1, #16
 800124c:	4812      	ldr	r0, [pc, #72]	@ (8001298 <ILI9341_FillRectangle.part.0+0xdc>)
 800124e:	f002 fb25 	bl	800389c <HAL_GPIO_WritePin>
        }
    }

    ILI9341_Unselect();
}
 8001252:	b003      	add	sp, #12
 8001254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2110      	movs	r1, #16
 800125c:	480e      	ldr	r0, [pc, #56]	@ (8001298 <ILI9341_FillRectangle.part.0+0xdc>)
 800125e:	f002 fb1d 	bl	800389c <HAL_GPIO_WritePin>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001262:	4652      	mov	r2, sl
 8001264:	4641      	mov	r1, r8
 8001266:	4628      	mov	r0, r5
 8001268:	23ef      	movs	r3, #239	@ 0xef
 800126a:	f7ff ff17 	bl	800109c <ILI9341_SetAddressWindow>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8001270:	f1c8 04f0 	rsb	r4, r8, #240	@ 0xf0
 8001274:	b2a4      	uxth	r4, r4
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001276:	fa99 f999 	rev16.w	r9, r9
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800127a:	4611      	mov	r1, r2
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <ILI9341_FillRectangle.part.0+0xe0>)
 800127e:	1e66      	subs	r6, r4, #1
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001280:	f8ad 9004 	strh.w	r9, [sp, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001284:	f002 fb0a 	bl	800389c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001288:	e7c8      	b.n	800121c <ILI9341_FillRectangle.part.0+0x60>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 800128a:	f5c0 77a0 	rsb	r7, r0, #320	@ 0x140
 800128e:	f240 1a3f 	movw	sl, #319	@ 0x13f
 8001292:	b2bf      	uxth	r7, r7
 8001294:	e7a4      	b.n	80011e0 <ILI9341_FillRectangle.part.0+0x24>
 8001296:	bf00      	nop
 8001298:	40011000 	.word	0x40011000
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	20000428 	.word	0x20000428

080012a4 <HAL_SPI_TxCpltCallback>:
    osEventFlagsSet(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE);
 80012a4:	4b02      	ldr	r3, [pc, #8]	@ (80012b0 <HAL_SPI_TxCpltCallback+0xc>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	f004 bf5f 	b.w	800616c <osEventFlagsSet>
 80012ae:	bf00      	nop
 80012b0:	200003dc 	.word	0x200003dc

080012b4 <ILI9341_Init>:
{
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	2401      	movs	r4, #1
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80012ba:	f8df a3c0 	ldr.w	sl, [pc, #960]	@ 800167c <ILI9341_Init+0x3c8>
{
 80012be:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80012c0:	4650      	mov	r0, sl
 80012c2:	2200      	movs	r2, #0
 80012c4:	2110      	movs	r1, #16
 80012c6:	f002 fae9 	bl	800389c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	4650      	mov	r0, sl
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80012d0:	4eeb      	ldr	r6, [pc, #940]	@ (8001680 <ILI9341_Init+0x3cc>)
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80012d2:	f002 fae3 	bl	800389c <HAL_GPIO_WritePin>
    HAL_Delay(200);
 80012d6:	20c8      	movs	r0, #200	@ 0xc8
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80012d8:	f8df 83a8 	ldr.w	r8, [pc, #936]	@ 8001684 <ILI9341_Init+0x3d0>
    HAL_Delay(200);
 80012dc:	f001 fb48 	bl	8002970 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80012e0:	4622      	mov	r2, r4
 80012e2:	4650      	mov	r0, sl
 80012e4:	2120      	movs	r1, #32
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80012e6:	4fe8      	ldr	r7, [pc, #928]	@ (8001688 <ILI9341_Init+0x3d4>)
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80012e8:	f002 fad8 	bl	800389c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80012ec:	4621      	mov	r1, r4
 80012ee:	4630      	mov	r0, r6
 80012f0:	2200      	movs	r2, #0
 80012f2:	f88d 4000 	strb.w	r4, [sp]
 80012f6:	f002 fad1 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80012fa:	4622      	mov	r2, r4
 80012fc:	4669      	mov	r1, sp
 80012fe:	4640      	mov	r0, r8
 8001300:	f003 ff5c 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001304:	4621      	mov	r1, r4
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	2200      	movs	r2, #0
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f004 ff6b 	bl	80061e8 <osEventFlagsWait>
    HAL_Delay(200);
 8001312:	20c8      	movs	r0, #200	@ 0xc8
 8001314:	f001 fb2c 	bl	8002970 <HAL_Delay>
    ILI9341_WriteCommand(0xCB);
 8001318:	23cb      	movs	r3, #203	@ 0xcb
        uint8_t data[] = { 0x00, 0x00 };
 800131a:	2500      	movs	r5, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800131c:	4621      	mov	r1, r4
 800131e:	4630      	mov	r0, r6
 8001320:	2200      	movs	r2, #0
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8001322:	f8df 9368 	ldr.w	r9, [pc, #872]	@ 800168c <ILI9341_Init+0x3d8>
 8001326:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800132a:	f002 fab7 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 800132e:	4622      	mov	r2, r4
 8001330:	4669      	mov	r1, sp
 8001332:	4640      	mov	r0, r8
 8001334:	f003 ff42 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4621      	mov	r1, r4
 800133e:	2200      	movs	r2, #0
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f004 ff51 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8001346:	e899 0003 	ldmia.w	r9, {r0, r1}
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800134a:	4622      	mov	r2, r4
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800134c:	9000      	str	r0, [sp, #0]
 800134e:	f88d 1004 	strb.w	r1, [sp, #4]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001352:	4630      	mov	r0, r6
 8001354:	4621      	mov	r1, r4
 8001356:	f002 faa1 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 800135a:	4669      	mov	r1, sp
 800135c:	2205      	movs	r2, #5
 800135e:	4640      	mov	r0, r8
 8001360:	f003 ff2c 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001364:	462a      	mov	r2, r5
 8001366:	4621      	mov	r1, r4
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f004 ff3b 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xCF);
 8001372:	23cf      	movs	r3, #207	@ 0xcf
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001374:	462a      	mov	r2, r5
 8001376:	4621      	mov	r1, r4
 8001378:	4630      	mov	r0, r6
 800137a:	f88d 3000 	strb.w	r3, [sp]
 800137e:	f002 fa8d 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001382:	4622      	mov	r2, r4
 8001384:	4669      	mov	r1, sp
 8001386:	4640      	mov	r0, r8
 8001388:	f003 ff18 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800138c:	462a      	mov	r2, r5
 800138e:	4621      	mov	r1, r4
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f004 ff27 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800139a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800139e:	4622      	mov	r2, r4
 80013a0:	4621      	mov	r1, r4
 80013a2:	4630      	mov	r0, r6
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80013a4:	f8ad 3000 	strh.w	r3, [sp]
 80013a8:	0c1b      	lsrs	r3, r3, #16
 80013aa:	f88d 3002 	strb.w	r3, [sp, #2]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80013ae:	f002 fa75 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80013b2:	4669      	mov	r1, sp
 80013b4:	2203      	movs	r2, #3
 80013b6:	4640      	mov	r0, r8
 80013b8:	f003 ff00 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80013bc:	462a      	mov	r2, r5
 80013be:	4621      	mov	r1, r4
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f004 ff0f 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xE8);
 80013ca:	23e8      	movs	r3, #232	@ 0xe8
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80013cc:	462a      	mov	r2, r5
 80013ce:	4621      	mov	r1, r4
 80013d0:	4630      	mov	r0, r6
 80013d2:	f88d 3000 	strb.w	r3, [sp]
 80013d6:	f002 fa61 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80013da:	4622      	mov	r2, r4
 80013dc:	4669      	mov	r1, sp
 80013de:	4640      	mov	r0, r8
 80013e0:	f003 feec 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80013e4:	462a      	mov	r2, r5
 80013e6:	4621      	mov	r1, r4
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f004 fefb 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80013f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80013f6:	4622      	mov	r2, r4
 80013f8:	4621      	mov	r1, r4
 80013fa:	4630      	mov	r0, r6
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80013fc:	f8ad 3000 	strh.w	r3, [sp]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	f88d 3002 	strb.w	r3, [sp, #2]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001406:	f002 fa49 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 800140a:	4669      	mov	r1, sp
 800140c:	2203      	movs	r2, #3
 800140e:	4640      	mov	r0, r8
 8001410:	f003 fed4 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001414:	462a      	mov	r2, r5
 8001416:	4621      	mov	r1, r4
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f004 fee3 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xEA);
 8001422:	23ea      	movs	r3, #234	@ 0xea
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001424:	462a      	mov	r2, r5
 8001426:	4621      	mov	r1, r4
 8001428:	4630      	mov	r0, r6
 800142a:	f88d 3000 	strb.w	r3, [sp]
 800142e:	f002 fa35 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001432:	4622      	mov	r2, r4
 8001434:	4669      	mov	r1, sp
 8001436:	4640      	mov	r0, r8
 8001438:	f003 fec0 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	462a      	mov	r2, r5
 8001442:	4621      	mov	r1, r4
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f004 fecf 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800144a:	4622      	mov	r2, r4
 800144c:	4621      	mov	r1, r4
 800144e:	4630      	mov	r0, r6
        uint8_t data[] = { 0x00, 0x00 };
 8001450:	f8ad 5000 	strh.w	r5, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001454:	f002 fa22 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 8001458:	4669      	mov	r1, sp
 800145a:	2202      	movs	r2, #2
 800145c:	4640      	mov	r0, r8
 800145e:	f003 fead 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001462:	462a      	mov	r2, r5
 8001464:	4621      	mov	r1, r4
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f004 febc 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xED);
 8001470:	23ed      	movs	r3, #237	@ 0xed
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001472:	462a      	mov	r2, r5
 8001474:	4621      	mov	r1, r4
 8001476:	4630      	mov	r0, r6
 8001478:	f88d 3000 	strb.w	r3, [sp]
 800147c:	f002 fa0e 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001480:	4622      	mov	r2, r4
 8001482:	4669      	mov	r1, sp
 8001484:	4640      	mov	r0, r8
 8001486:	f003 fe99 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800148a:	462a      	mov	r2, r5
 800148c:	4621      	mov	r1, r4
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f004 fea8 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001498:	4b7d      	ldr	r3, [pc, #500]	@ (8001690 <ILI9341_Init+0x3dc>)
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800149a:	4622      	mov	r2, r4
 800149c:	4621      	mov	r1, r4
 800149e:	4630      	mov	r0, r6
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80014a0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014a2:	f002 f9fb 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80014a6:	4669      	mov	r1, sp
 80014a8:	2204      	movs	r2, #4
 80014aa:	4640      	mov	r0, r8
 80014ac:	f003 fe86 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80014b0:	462a      	mov	r2, r5
 80014b2:	4621      	mov	r1, r4
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f004 fe95 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xF7);
 80014be:	23f7      	movs	r3, #247	@ 0xf7
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80014c0:	462a      	mov	r2, r5
 80014c2:	4621      	mov	r1, r4
 80014c4:	4630      	mov	r0, r6
 80014c6:	f88d 3000 	strb.w	r3, [sp]
 80014ca:	f002 f9e7 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80014ce:	4622      	mov	r2, r4
 80014d0:	4669      	mov	r1, sp
 80014d2:	4640      	mov	r0, r8
 80014d4:	f003 fe72 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80014d8:	462a      	mov	r2, r5
 80014da:	4621      	mov	r1, r4
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f004 fe81 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x20 };
 80014e6:	2320      	movs	r3, #32
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014e8:	4622      	mov	r2, r4
 80014ea:	4621      	mov	r1, r4
 80014ec:	4630      	mov	r0, r6
        uint8_t data[] = { 0x20 };
 80014ee:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014f2:	f002 f9d3 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80014f6:	4622      	mov	r2, r4
 80014f8:	4669      	mov	r1, sp
 80014fa:	4640      	mov	r0, r8
 80014fc:	f003 fe5e 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001500:	462a      	mov	r2, r5
 8001502:	4621      	mov	r1, r4
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f004 fe6d 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xC0);
 800150e:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001510:	462a      	mov	r2, r5
 8001512:	4621      	mov	r1, r4
 8001514:	4630      	mov	r0, r6
 8001516:	f88d 3000 	strb.w	r3, [sp]
 800151a:	f002 f9bf 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 800151e:	4622      	mov	r2, r4
 8001520:	4669      	mov	r1, sp
 8001522:	4640      	mov	r0, r8
 8001524:	f003 fe4a 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001528:	462a      	mov	r2, r5
 800152a:	4621      	mov	r1, r4
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f004 fe59 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x23 };
 8001536:	2323      	movs	r3, #35	@ 0x23
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001538:	4622      	mov	r2, r4
 800153a:	4621      	mov	r1, r4
 800153c:	4630      	mov	r0, r6
        uint8_t data[] = { 0x23 };
 800153e:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001542:	f002 f9ab 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 8001546:	4622      	mov	r2, r4
 8001548:	4669      	mov	r1, sp
 800154a:	4640      	mov	r0, r8
 800154c:	f003 fe36 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001550:	462a      	mov	r2, r5
 8001552:	4621      	mov	r1, r4
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f004 fe45 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xC1);
 800155e:	23c1      	movs	r3, #193	@ 0xc1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001560:	462a      	mov	r2, r5
 8001562:	4621      	mov	r1, r4
 8001564:	4630      	mov	r0, r6
 8001566:	f88d 3000 	strb.w	r3, [sp]
 800156a:	f002 f997 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 800156e:	4622      	mov	r2, r4
 8001570:	4669      	mov	r1, sp
 8001572:	4640      	mov	r0, r8
 8001574:	f003 fe22 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001578:	462a      	mov	r2, r5
 800157a:	4621      	mov	r1, r4
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	6838      	ldr	r0, [r7, #0]
 8001582:	f004 fe31 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x10 };
 8001586:	f04f 0310 	mov.w	r3, #16
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800158a:	4622      	mov	r2, r4
 800158c:	4621      	mov	r1, r4
 800158e:	4630      	mov	r0, r6
        uint8_t data[] = { 0x10 };
 8001590:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001594:	f002 f982 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 8001598:	4622      	mov	r2, r4
 800159a:	4669      	mov	r1, sp
 800159c:	4640      	mov	r0, r8
 800159e:	f003 fe0d 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80015a2:	462a      	mov	r2, r5
 80015a4:	4621      	mov	r1, r4
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f004 fe1c 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xC5);
 80015b0:	23c5      	movs	r3, #197	@ 0xc5
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80015b2:	462a      	mov	r2, r5
 80015b4:	4621      	mov	r1, r4
 80015b6:	4630      	mov	r0, r6
 80015b8:	f88d 3000 	strb.w	r3, [sp]
 80015bc:	f002 f96e 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80015c0:	4622      	mov	r2, r4
 80015c2:	4669      	mov	r1, sp
 80015c4:	4640      	mov	r0, r8
 80015c6:	f003 fdf9 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80015ca:	462a      	mov	r2, r5
 80015cc:	4621      	mov	r1, r4
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f004 fe08 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x3E, 0x28 };
 80015d8:	f642 033e 	movw	r3, #10302	@ 0x283e
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80015dc:	4622      	mov	r2, r4
 80015de:	4621      	mov	r1, r4
 80015e0:	4630      	mov	r0, r6
        uint8_t data[] = { 0x3E, 0x28 };
 80015e2:	f8ad 3000 	strh.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80015e6:	f002 f959 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80015ea:	4669      	mov	r1, sp
 80015ec:	2202      	movs	r2, #2
 80015ee:	4640      	mov	r0, r8
 80015f0:	f003 fde4 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80015f4:	462a      	mov	r2, r5
 80015f6:	4621      	mov	r1, r4
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f004 fdf3 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xC7);
 8001602:	23c7      	movs	r3, #199	@ 0xc7
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001604:	462a      	mov	r2, r5
 8001606:	4621      	mov	r1, r4
 8001608:	4630      	mov	r0, r6
 800160a:	f88d 3000 	strb.w	r3, [sp]
 800160e:	f002 f945 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001612:	4622      	mov	r2, r4
 8001614:	4669      	mov	r1, sp
 8001616:	4640      	mov	r0, r8
 8001618:	f003 fdd0 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800161c:	462a      	mov	r2, r5
 800161e:	4621      	mov	r1, r4
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f004 fddf 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x86 };
 800162a:	2386      	movs	r3, #134	@ 0x86
 800162c:	f04f 0b36 	mov.w	fp, #54	@ 0x36
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001630:	4622      	mov	r2, r4
 8001632:	4621      	mov	r1, r4
 8001634:	4630      	mov	r0, r6
        uint8_t data[] = { 0x86 };
 8001636:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800163a:	f002 f92f 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 800163e:	4622      	mov	r2, r4
 8001640:	4669      	mov	r1, sp
 8001642:	4640      	mov	r0, r8
 8001644:	f003 fdba 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	462a      	mov	r2, r5
 800164e:	4621      	mov	r1, r4
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f004 fdc9 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001656:	462a      	mov	r2, r5
 8001658:	4621      	mov	r1, r4
 800165a:	4630      	mov	r0, r6
 800165c:	f88d b000 	strb.w	fp, [sp]
 8001660:	f002 f91c 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001664:	4622      	mov	r2, r4
 8001666:	4669      	mov	r1, sp
 8001668:	4640      	mov	r0, r8
 800166a:	f003 fda7 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800166e:	462a      	mov	r2, r5
 8001670:	4621      	mov	r1, r4
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	e00c      	b.n	8001694 <ILI9341_Init+0x3e0>
 800167a:	bf00      	nop
 800167c:	40011000 	.word	0x40011000
 8001680:	40010c00 	.word	0x40010c00
 8001684:	20000428 	.word	0x20000428
 8001688:	200003dc 	.word	0x200003dc
 800168c:	0800aae8 	.word	0x0800aae8
 8001690:	81120364 	.word	0x81120364
 8001694:	f004 fda8 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x48 };
 8001698:	2348      	movs	r3, #72	@ 0x48
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800169a:	4622      	mov	r2, r4
 800169c:	4621      	mov	r1, r4
 800169e:	4630      	mov	r0, r6
        uint8_t data[] = { 0x48 };
 80016a0:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80016a4:	f002 f8fa 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80016a8:	4622      	mov	r2, r4
 80016aa:	4669      	mov	r1, sp
 80016ac:	4640      	mov	r0, r8
 80016ae:	f003 fd85 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80016b2:	462a      	mov	r2, r5
 80016b4:	4621      	mov	r1, r4
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f004 fd94 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0x3A);
 80016c0:	233a      	movs	r3, #58	@ 0x3a
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80016c2:	462a      	mov	r2, r5
 80016c4:	4621      	mov	r1, r4
 80016c6:	4630      	mov	r0, r6
 80016c8:	f88d 3000 	strb.w	r3, [sp]
 80016cc:	f002 f8e6 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80016d0:	4622      	mov	r2, r4
 80016d2:	4669      	mov	r1, sp
 80016d4:	4640      	mov	r0, r8
 80016d6:	f003 fd71 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80016da:	462a      	mov	r2, r5
 80016dc:	4621      	mov	r1, r4
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	6838      	ldr	r0, [r7, #0]
 80016e4:	f004 fd80 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x55 };
 80016e8:	2355      	movs	r3, #85	@ 0x55
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80016ea:	4622      	mov	r2, r4
 80016ec:	4621      	mov	r1, r4
 80016ee:	4630      	mov	r0, r6
        uint8_t data[] = { 0x55 };
 80016f0:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80016f4:	f002 f8d2 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80016f8:	4622      	mov	r2, r4
 80016fa:	4669      	mov	r1, sp
 80016fc:	4640      	mov	r0, r8
 80016fe:	f003 fd5d 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001702:	462a      	mov	r2, r5
 8001704:	4621      	mov	r1, r4
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f004 fd6c 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xB1);
 8001710:	23b1      	movs	r3, #177	@ 0xb1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001712:	462a      	mov	r2, r5
 8001714:	4621      	mov	r1, r4
 8001716:	4630      	mov	r0, r6
 8001718:	f88d 3000 	strb.w	r3, [sp]
 800171c:	f002 f8be 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001720:	4622      	mov	r2, r4
 8001722:	4669      	mov	r1, sp
 8001724:	4640      	mov	r0, r8
 8001726:	f003 fd49 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800172a:	462a      	mov	r2, r5
 800172c:	4621      	mov	r1, r4
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f004 fd58 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x00, 0x18 };
 8001738:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800173c:	4622      	mov	r2, r4
 800173e:	4621      	mov	r1, r4
 8001740:	4630      	mov	r0, r6
        uint8_t data[] = { 0x00, 0x18 };
 8001742:	f8ad 3000 	strh.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001746:	f002 f8a9 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 800174a:	4669      	mov	r1, sp
 800174c:	2202      	movs	r2, #2
 800174e:	4640      	mov	r0, r8
 8001750:	f003 fd34 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001754:	462a      	mov	r2, r5
 8001756:	4621      	mov	r1, r4
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f004 fd43 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xB6);
 8001762:	23b6      	movs	r3, #182	@ 0xb6
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001764:	462a      	mov	r2, r5
 8001766:	4621      	mov	r1, r4
 8001768:	4630      	mov	r0, r6
 800176a:	f88d 3000 	strb.w	r3, [sp]
 800176e:	f002 f895 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001772:	4622      	mov	r2, r4
 8001774:	4669      	mov	r1, sp
 8001776:	4640      	mov	r0, r8
 8001778:	f003 fd20 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800177c:	462a      	mov	r2, r5
 800177e:	4621      	mov	r1, r4
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	6838      	ldr	r0, [r7, #0]
 8001786:	f004 fd2f 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800178a:	4b92      	ldr	r3, [pc, #584]	@ (80019d4 <ILI9341_Init+0x720>)
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800178c:	4622      	mov	r2, r4
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800178e:	681b      	ldr	r3, [r3, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001790:	4621      	mov	r1, r4
 8001792:	4630      	mov	r0, r6
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001794:	f8ad 3000 	strh.w	r3, [sp]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f88d 3002 	strb.w	r3, [sp, #2]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800179e:	f002 f87d 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80017a2:	4669      	mov	r1, sp
 80017a4:	2203      	movs	r2, #3
 80017a6:	4640      	mov	r0, r8
 80017a8:	f003 fd08 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80017ac:	462a      	mov	r2, r5
 80017ae:	4621      	mov	r1, r4
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f004 fd17 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xF2);
 80017ba:	23f2      	movs	r3, #242	@ 0xf2
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80017bc:	462a      	mov	r2, r5
 80017be:	4621      	mov	r1, r4
 80017c0:	4630      	mov	r0, r6
 80017c2:	f88d 3000 	strb.w	r3, [sp]
 80017c6:	f002 f869 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80017ca:	4622      	mov	r2, r4
 80017cc:	4669      	mov	r1, sp
 80017ce:	4640      	mov	r0, r8
 80017d0:	f003 fcf4 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	462a      	mov	r2, r5
 80017da:	4621      	mov	r1, r4
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f004 fd03 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80017e2:	4622      	mov	r2, r4
 80017e4:	4621      	mov	r1, r4
 80017e6:	4630      	mov	r0, r6
        uint8_t data[] = { 0x00 };
 80017e8:	f88d 5000 	strb.w	r5, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80017ec:	f002 f856 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80017f0:	4622      	mov	r2, r4
 80017f2:	4669      	mov	r1, sp
 80017f4:	4640      	mov	r0, r8
 80017f6:	f003 fce1 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80017fa:	462a      	mov	r2, r5
 80017fc:	4621      	mov	r1, r4
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f004 fcf0 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0x26);
 8001808:	2326      	movs	r3, #38	@ 0x26
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800180a:	462a      	mov	r2, r5
 800180c:	4621      	mov	r1, r4
 800180e:	4630      	mov	r0, r6
 8001810:	f88d 3000 	strb.w	r3, [sp]
 8001814:	f002 f842 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001818:	4622      	mov	r2, r4
 800181a:	4669      	mov	r1, sp
 800181c:	4640      	mov	r0, r8
 800181e:	f003 fccd 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	462a      	mov	r2, r5
 8001828:	4621      	mov	r1, r4
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f004 fcdc 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001830:	4622      	mov	r2, r4
 8001832:	4621      	mov	r1, r4
 8001834:	4630      	mov	r0, r6
        uint8_t data[] = { 0x01 };
 8001836:	f88d 4000 	strb.w	r4, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800183a:	f002 f82f 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 800183e:	4622      	mov	r2, r4
 8001840:	4669      	mov	r1, sp
 8001842:	4640      	mov	r0, r8
 8001844:	f003 fcba 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001848:	462a      	mov	r2, r5
 800184a:	4621      	mov	r1, r4
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f004 fcc9 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xE0);
 8001856:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001858:	462a      	mov	r2, r5
 800185a:	4621      	mov	r1, r4
 800185c:	4630      	mov	r0, r6
 800185e:	f88d 3000 	strb.w	r3, [sp]
 8001862:	f002 f81b 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001866:	4622      	mov	r2, r4
 8001868:	4669      	mov	r1, sp
 800186a:	4640      	mov	r0, r8
 800186c:	f003 fca6 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001870:	462a      	mov	r2, r5
 8001872:	4621      	mov	r1, r4
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f004 fcb5 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800187e:	46ec      	mov	ip, sp
 8001880:	4b55      	ldr	r3, [pc, #340]	@ (80019d8 <ILI9341_Init+0x724>)
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001882:	f109 0910 	add.w	r9, r9, #16
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800188c:	f82c 3b02 	strh.w	r3, [ip], #2
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f88c 3000 	strb.w	r3, [ip]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001896:	4622      	mov	r2, r4
 8001898:	4621      	mov	r1, r4
 800189a:	4630      	mov	r0, r6
 800189c:	f001 fffe 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80018a0:	4669      	mov	r1, sp
 80018a2:	220f      	movs	r2, #15
 80018a4:	4640      	mov	r0, r8
 80018a6:	f003 fc89 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80018aa:	462a      	mov	r2, r5
 80018ac:	4621      	mov	r1, r4
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f004 fc98 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0xE1);
 80018b8:	23e1      	movs	r3, #225	@ 0xe1
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80018ba:	462a      	mov	r2, r5
 80018bc:	4621      	mov	r1, r4
 80018be:	4630      	mov	r0, r6
 80018c0:	f88d 3000 	strb.w	r3, [sp]
 80018c4:	f001 ffea 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 80018c8:	4622      	mov	r2, r4
 80018ca:	4669      	mov	r1, sp
 80018cc:	4640      	mov	r0, r8
 80018ce:	f003 fc75 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80018d2:	462a      	mov	r2, r5
 80018d4:	4621      	mov	r1, r4
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f004 fc84 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80018e0:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 80018e4:	46ec      	mov	ip, sp
 80018e6:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80018ea:	f82c 3b02 	strh.w	r3, [ip], #2
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	f88c 3000 	strb.w	r3, [ip]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80018f4:	4622      	mov	r2, r4
 80018f6:	4621      	mov	r1, r4
 80018f8:	4630      	mov	r0, r6
 80018fa:	f001 ffcf 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80018fe:	4669      	mov	r1, sp
 8001900:	220f      	movs	r2, #15
 8001902:	4640      	mov	r0, r8
 8001904:	f003 fc5a 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001908:	462a      	mov	r2, r5
 800190a:	4621      	mov	r1, r4
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	6838      	ldr	r0, [r7, #0]
 8001912:	f004 fc69 	bl	80061e8 <osEventFlagsWait>
    ILI9341_WriteCommand(0x11);
 8001916:	2311      	movs	r3, #17
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001918:	462a      	mov	r2, r5
 800191a:	4621      	mov	r1, r4
 800191c:	4630      	mov	r0, r6
 800191e:	f88d 3000 	strb.w	r3, [sp]
 8001922:	f001 ffbb 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001926:	4622      	mov	r2, r4
 8001928:	4669      	mov	r1, sp
 800192a:	4640      	mov	r0, r8
 800192c:	f003 fc46 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001930:	462a      	mov	r2, r5
 8001932:	4621      	mov	r1, r4
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f004 fc55 	bl	80061e8 <osEventFlagsWait>
    HAL_Delay(120);
 800193e:	2078      	movs	r0, #120	@ 0x78
 8001940:	f001 f816 	bl	8002970 <HAL_Delay>
    ILI9341_WriteCommand(0x29);
 8001944:	2329      	movs	r3, #41	@ 0x29
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8001946:	462a      	mov	r2, r5
 8001948:	4621      	mov	r1, r4
 800194a:	4630      	mov	r0, r6
 800194c:	f88d 3000 	strb.w	r3, [sp]
 8001950:	f001 ffa4 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 8001954:	4622      	mov	r2, r4
 8001956:	4669      	mov	r1, sp
 8001958:	4640      	mov	r0, r8
 800195a:	f003 fc2f 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	462a      	mov	r2, r5
 8001964:	4621      	mov	r1, r4
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f004 fc3e 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800196c:	462a      	mov	r2, r5
 800196e:	4621      	mov	r1, r4
 8001970:	4630      	mov	r0, r6
 8001972:	f88d b000 	strb.w	fp, [sp]
 8001976:	f001 ff91 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, &cmd, sizeof(cmd));
 800197a:	4622      	mov	r2, r4
 800197c:	4669      	mov	r1, sp
 800197e:	4640      	mov	r0, r8
 8001980:	f003 fc1c 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 8001984:	462a      	mov	r2, r5
 8001986:	4621      	mov	r1, r4
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f004 fc2b 	bl	80061e8 <osEventFlagsWait>
        uint8_t data[] = { ILI9341_ROTATION };
 8001992:	2328      	movs	r3, #40	@ 0x28
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001994:	4622      	mov	r2, r4
 8001996:	4621      	mov	r1, r4
 8001998:	4630      	mov	r0, r6
        uint8_t data[] = { ILI9341_ROTATION };
 800199a:	f88d 3000 	strb.w	r3, [sp]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800199e:	f001 ff7d 	bl	800389c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ILI9341_SPI_PORT, buff, buff_size);
 80019a2:	4622      	mov	r2, r4
 80019a4:	4669      	mov	r1, sp
 80019a6:	4640      	mov	r0, r8
 80019a8:	f003 fc08 	bl	80051bc <HAL_SPI_Transmit_DMA>
    osEventFlagsWait(evt_id, DISPLAY_EVENT_FLAG_DMA_DONE, osFlagsWaitAny, osWaitForever);
 80019ac:	462a      	mov	r2, r5
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	4621      	mov	r1, r4
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f004 fc17 	bl	80061e8 <osEventFlagsWait>
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80019ba:	4622      	mov	r2, r4
 80019bc:	4650      	mov	r0, sl
 80019be:	2110      	movs	r1, #16
 80019c0:	f001 ff6c 	bl	800389c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80019c4:	4622      	mov	r2, r4
 80019c6:	2102      	movs	r1, #2
 80019c8:	4630      	mov	r0, r6
}
 80019ca:	b005      	add	sp, #20
 80019cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80019d0:	f001 bf64 	b.w	800389c <HAL_GPIO_WritePin>
 80019d4:	0800aba4 	.word	0x0800aba4
 80019d8:	0800aba8 	.word	0x0800aba8

080019dc <ILI9341_FillScreen>:
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80019dc:	2100      	movs	r1, #0

void ILI9341_FillScreen(uint16_t color)
{
 80019de:	b500      	push	{lr}
 80019e0:	b083      	sub	sp, #12
 80019e2:	9000      	str	r0, [sp, #0]
 80019e4:	23f0      	movs	r3, #240	@ 0xf0
 80019e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019ea:	4608      	mov	r0, r1
 80019ec:	f7ff fbe6 	bl	80011bc <ILI9341_FillRectangle.part.0>
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
}
 80019f0:	b003      	add	sp, #12
 80019f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f6:	bf00      	nop

080019f8 <Display_SetEventHandler>:
}

inline void Display_SetEventHandler(osEventFlagsId_t eventFlag)
{
#if USE_DMA == 1
    evt_id = eventFlag;
 80019f8:	4b01      	ldr	r3, [pc, #4]	@ (8001a00 <Display_SetEventHandler+0x8>)
 80019fa:	6018      	str	r0, [r3, #0]
#else
    UNUSED(eventFlag);
#endif  //  USE_DMA
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200003dc 	.word	0x200003dc

08001a04 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a04:	2300      	movs	r3, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a06:	2201      	movs	r2, #1
{
 8001a08:	b510      	push	{r4, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0a:	2001      	movs	r0, #1
{
 8001a0c:	b096      	sub	sp, #88	@ 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a12:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a14:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001a24:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a28:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2a:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a30:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a36:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a38:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001a44:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a46:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f002 fcba 	bl	80043c0 <HAL_RCC_OscConfig>
 8001a4c:	b108      	cbz	r0, 8001a52 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	4603      	mov	r3, r0
 8001a54:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a56:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a60:	4621      	mov	r1, r4
 8001a62:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a68:	f002 ff48 	bl	80048fc <HAL_RCC_ClockConfig>
 8001a6c:	b108      	cbz	r0, 8001a72 <SystemClock_Config+0x6e>
 8001a6e:	b672      	cpsid	i
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <SystemClock_Config+0x6c>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a76:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a78:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a7a:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f003 f898 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	b108      	cbz	r0, 8001a86 <SystemClock_Config+0x82>
 8001a82:	b672      	cpsid	i
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <SystemClock_Config+0x80>
}
 8001a86:	b016      	add	sp, #88	@ 0x58
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop

08001a8c <main>:
{
 8001a8c:	b508      	push	{r3, lr}
  HAL_Init();
 8001a8e:	f000 ff4b 	bl	8002928 <HAL_Init>
  SystemClock_Config();
 8001a92:	f7ff ffb7 	bl	8001a04 <SystemClock_Config>
  MX_GPIO_Init();
 8001a96:	f7ff fa01 	bl	8000e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a9a:	f7ff f927 	bl	8000cec <MX_DMA_Init>
  MX_SPI1_Init();
 8001a9e:	f000 fbd1 	bl	8002244 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001aa2:	f000 fbf1 	bl	8002288 <MX_SPI2_Init>
  MX_UART4_Init();
 8001aa6:	f000 fdbd 	bl	8002624 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001aaa:	f000 fdd7 	bl	800265c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001aae:	f000 fdf1 	bl	8002694 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ab2:	f7ff faa3 	bl	8000ffc <MX_I2C1_Init>
  MX_ADC1_Init();
 8001ab6:	f7ff f89d 	bl	8000bf4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001aba:	f000 fe07 	bl	80026cc <MX_USART3_UART_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001abe:	f004 fa7f 	bl	8005fc0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ac2:	f7ff f9bd 	bl	8000e40 <MX_FREERTOS_Init>
  osKernelStart();
 8001ac6:	f004 fa95 	bl	8005ff4 <osKernelStart>
  while (1)
 8001aca:	e7fe      	b.n	8001aca <main+0x3e>

08001acc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM7) {
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001ace:	6802      	ldr	r2, [r0, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d000      	beq.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001ad4:	4770      	bx	lr
    HAL_IncTick();
 8001ad6:	f000 bf39 	b.w	800294c <HAL_IncTick>
 8001ada:	bf00      	nop
 8001adc:	40001400 	.word	0x40001400

08001ae0 <Error_Handler>:
 8001ae0:	b672      	cpsid	i
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <Error_Handler+0x2>

08001ae4 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	460b      	mov	r3, r1
    obj->_ui2c = hi2c;
    obj->_interrupt_flag = 0;
 8001aec:	2500      	movs	r5, #0
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001aee:	2680      	movs	r6, #128	@ 0x80
{
 8001af0:	4604      	mov	r4, r0
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001af2:	4632      	mov	r2, r6
 8001af4:	4629      	mov	r1, r5
    obj->_interrupt_flag = 0;
 8001af6:	f880 5104 	strb.w	r5, [r0, #260]	@ 0x104
    obj->_ui2c = hi2c;
 8001afa:	6003      	str	r3, [r0, #0]
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001afc:	3004      	adds	r0, #4
 8001afe:	f007 f99d 	bl	8008e3c <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001b02:	4632      	mov	r2, r6
 8001b04:	4629      	mov	r1, r5
 8001b06:	f104 0084 	add.w	r0, r4, #132	@ 0x84
}
 8001b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001b0e:	f007 b995 	b.w	8008e3c <memset>
 8001b12:	bf00      	nop

08001b14 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4605      	mov	r5, r0
 8001b18:	b082      	sub	sp, #8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f006 fa50 	bl	8007fc0 <malloc>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001b20:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001b24:	4604      	mov	r4, r0
    *payload = reg;
 8001b26:	f244 0209 	movw	r2, #16393	@ 0x4009
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001b2a:	6828      	ldr	r0, [r5, #0]
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	9600      	str	r6, [sp, #0]
 8001b30:	21ae      	movs	r1, #174	@ 0xae
    *payload = reg;
 8001b32:	8022      	strh	r2, [r4, #0]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001b34:	4622      	mov	r2, r4
 8001b36:	f002 f977 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001b3a:	4620      	mov	r0, r4
    uint8_t val = 0x40;
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
}
 8001b3c:	b002      	add	sp, #8
 8001b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(payload);
 8001b42:	f006 ba45 	b.w	8007fd0 <free>
 8001b46:	bf00      	nop

08001b48 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8001b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001b4c:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8001b50:	2702      	movs	r7, #2
    uint8_t reg = 0;
 8001b52:	2400      	movs	r4, #0
{
 8001b54:	4606      	mov	r6, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001b5a:	f8cd 8000 	str.w	r8, [sp]
 8001b5e:	f10d 020f 	add.w	r2, sp, #15
 8001b62:	2301      	movs	r3, #1
 8001b64:	21ae      	movs	r1, #174	@ 0xae
 8001b66:	6800      	ldr	r0, [r0, #0]
    uint8_t reg = 0;
 8001b68:	f88d 400e 	strb.w	r4, [sp, #14]
    uint8_t reg_addr = reg;
 8001b6c:	f88d 700f 	strb.w	r7, [sp, #15]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001b70:	f002 f95a 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001b74:	f8cd 8000 	str.w	r8, [sp]
 8001b78:	f10d 020e 	add.w	r2, sp, #14
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	21ae      	movs	r1, #174	@ 0xae
 8001b80:	6830      	ldr	r0, [r6, #0]
 8001b82:	f002 fa3f 	bl	8004004 <HAL_I2C_Master_Receive>
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001b86:	f89d 400e 	ldrb.w	r4, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001b8a:	4638      	mov	r0, r7
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001b8c:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001b90:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
 8001b94:	b2e4      	uxtb	r4, r4
 8001b96:	f88d 400e 	strb.w	r4, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001b9a:	f006 fa11 	bl	8007fc0 <malloc>
 8001b9e:	4605      	mov	r5, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001ba0:	f8cd 8000 	str.w	r8, [sp]
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	21ae      	movs	r1, #174	@ 0xae
 8001ba8:	462a      	mov	r2, r5
 8001baa:	6830      	ldr	r0, [r6, #0]
    *payload = reg;
 8001bac:	702f      	strb	r7, [r5, #0]
        memcpy(payload + 1, buf, buflen);
 8001bae:	706c      	strb	r4, [r5, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001bb0:	f002 f93a 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001bb4:	4628      	mov	r0, r5
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
}
 8001bb6:	b004      	add	sp, #16
 8001bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8001bbc:	f006 ba08 	b.w	8007fd0 <free>

08001bc0 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	b083      	sub	sp, #12
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001bc6:	2002      	movs	r0, #2
{
 8001bc8:	460c      	mov	r4, r1
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001bca:	f006 f9f9 	bl	8007fc0 <malloc>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001bce:	2302      	movs	r3, #2
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001bd0:	4605      	mov	r5, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001bd2:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
    *payload = reg;
 8001bd6:	2203      	movs	r2, #3
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001bd8:	0064      	lsls	r4, r4, #1
 8001bda:	401c      	ands	r4, r3
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001bdc:	6830      	ldr	r0, [r6, #0]
 8001bde:	21ae      	movs	r1, #174	@ 0xae
 8001be0:	9700      	str	r7, [sp, #0]
    *payload = reg;
 8001be2:	702a      	strb	r2, [r5, #0]
        memcpy(payload + 1, buf, buflen);
 8001be4:	706c      	strb	r4, [r5, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001be6:	462a      	mov	r2, r5
 8001be8:	f002 f91e 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001bec:	4628      	mov	r0, r5
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
}
 8001bee:	b003      	add	sp, #12
 8001bf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    free(payload);
 8001bf4:	f006 b9ec 	b.w	8007fd0 <free>

08001bf8 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	4606      	mov	r6, r0
 8001bfc:	b083      	sub	sp, #12
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001bfe:	2002      	movs	r0, #2
{
 8001c00:	460c      	mov	r4, r1
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001c02:	f006 f9dd 	bl	8007fc0 <malloc>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001c06:	2302      	movs	r3, #2
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001c08:	4605      	mov	r5, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001c0a:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
    *payload = reg;
 8001c0e:	2221      	movs	r2, #33	@ 0x21
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001c10:	0064      	lsls	r4, r4, #1
 8001c12:	401c      	ands	r4, r3
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001c14:	6830      	ldr	r0, [r6, #0]
 8001c16:	21ae      	movs	r1, #174	@ 0xae
 8001c18:	9700      	str	r7, [sp, #0]
    *payload = reg;
 8001c1a:	702a      	strb	r2, [r5, #0]
        memcpy(payload + 1, buf, buflen);
 8001c1c:	706c      	strb	r4, [r5, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001c1e:	462a      	mov	r2, r5
 8001c20:	f002 f902 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001c24:	4628      	mov	r0, r5
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
}
 8001c26:	b003      	add	sp, #12
 8001c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    free(payload);
 8001c2c:	f006 b9d0 	b.w	8007fd0 <free>

08001c30 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8001c30:	b530      	push	{r4, r5, lr}
 8001c32:	4604      	mov	r4, r0
    if (obj->_interrupt_flag == 1)  return obj->_interrupt_flag;
 8001c34:	f890 0104 	ldrb.w	r0, [r0, #260]	@ 0x104
{
 8001c38:	b085      	sub	sp, #20
    if (obj->_interrupt_flag == 1)  return obj->_interrupt_flag;
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	d01b      	beq.n	8001c76 <max30102_has_interrupt+0x46>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c3e:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8

    uint8_t en_reg[2] = {0};
 8001c42:	f04f 0c00 	mov.w	ip, #0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c46:	2301      	movs	r3, #1
 8001c48:	21ae      	movs	r1, #174	@ 0xae
 8001c4a:	6820      	ldr	r0, [r4, #0]
 8001c4c:	f10d 020b 	add.w	r2, sp, #11
 8001c50:	9500      	str	r5, [sp, #0]
    uint8_t en_reg[2] = {0};
 8001c52:	f8ad c00c 	strh.w	ip, [sp, #12]
    uint8_t reg_addr = reg;
 8001c56:	f88d c00b 	strb.w	ip, [sp, #11]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c5a:	f002 f8e5 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	21ae      	movs	r1, #174	@ 0xae
 8001c64:	9500      	str	r5, [sp, #0]
 8001c66:	aa03      	add	r2, sp, #12
 8001c68:	f002 f9cc 	bl	8004004 <HAL_I2C_Master_Receive>
    max30102_read(obj, 0x00, en_reg, 1);
    en_reg[0] &= 0x80;
    if (en_reg[0] != 0) obj->_interrupt_flag = 1;
 8001c6c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c70:	09c0      	lsrs	r0, r0, #7
 8001c72:	f884 0104 	strb.w	r0, [r4, #260]	@ 0x104
    else                obj->_interrupt_flag = 0;

    return obj->_interrupt_flag;
}
 8001c76:	b005      	add	sp, #20
 8001c78:	bd30      	pop	{r4, r5, pc}
 8001c7a:	bf00      	nop

08001c7c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c80:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8001c84:	f04f 0909 	mov.w	r9, #9
{
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4688      	mov	r8, r1
 8001c8c:	b085      	sub	sp, #20
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c8e:	9600      	str	r6, [sp, #0]
 8001c90:	aa03      	add	r2, sp, #12
 8001c92:	2301      	movs	r3, #1
 8001c94:	21ae      	movs	r1, #174	@ 0xae
 8001c96:	6800      	ldr	r0, [r0, #0]
    uint8_t reg_addr = reg;
 8001c98:	f88d 900c 	strb.w	r9, [sp, #12]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001c9c:	f002 f8c4 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001ca0:	9600      	str	r6, [sp, #0]
 8001ca2:	f10d 020b 	add.w	r2, sp, #11
 8001ca6:	21ae      	movs	r1, #174	@ 0xae
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	f002 f9aa 	bl	8004004 <HAL_I2C_Master_Receive>
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
    config = (config & 0xf8) | mode;
 8001cb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	ea48 0803 	orr.w	r8, r8, r3
    config = (config & 0xf8) | mode;
 8001cbe:	f88d 800b 	strb.w	r8, [sp, #11]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001cc2:	f006 f97d 	bl	8007fc0 <malloc>
 8001cc6:	4607      	mov	r7, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001cc8:	9600      	str	r6, [sp, #0]
 8001cca:	463a      	mov	r2, r7
 8001ccc:	21ae      	movs	r1, #174	@ 0xae
 8001cce:	2302      	movs	r3, #2
    *payload = reg;
 8001cd0:	f887 9000 	strb.w	r9, [r7]
        memcpy(payload + 1, buf, buflen);
 8001cd4:	f887 8001 	strb.w	r8, [r7, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001cd8:	6820      	ldr	r0, [r4, #0]
 8001cda:	f002 f8a5 	bl	8003e28 <HAL_I2C_Master_Transmit>
    *payload = reg;
 8001cde:	2504      	movs	r5, #4
    free(payload);
 8001ce0:	4638      	mov	r0, r7
 8001ce2:	f006 f975 	bl	8007fd0 <free>
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
    uint8_t val[4] = {0x00};
 8001ce6:	2300      	movs	r3, #0
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001ce8:	4628      	mov	r0, r5
    uint8_t val[4] = {0x00};
 8001cea:	9303      	str	r3, [sp, #12]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001cec:	f006 f968 	bl	8007fc0 <malloc>
 8001cf0:	4607      	mov	r7, r0
    *payload = reg;
 8001cf2:	46bc      	mov	ip, r7
        memcpy(payload + 1, buf, buflen);
 8001cf4:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8001cf8:	f8bd 800c 	ldrh.w	r8, [sp, #12]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001cfc:	9600      	str	r6, [sp, #0]
    *payload = reg;
 8001cfe:	f80c 5b01 	strb.w	r5, [ip], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d02:	462b      	mov	r3, r5
 8001d04:	463a      	mov	r2, r7
 8001d06:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 8001d08:	f8a7 8001 	strh.w	r8, [r7, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d0c:	6820      	ldr	r0, [r4, #0]
        memcpy(payload + 1, buf, buflen);
 8001d0e:	f88c e002 	strb.w	lr, [ip, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d12:	f002 f889 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001d16:	4638      	mov	r0, r7
 8001d18:	f006 f95a 	bl	8007fd0 <free>
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f006 f94f 	bl	8007fc0 <malloc>
 8001d22:	4607      	mov	r7, r0
    *payload = reg;
 8001d24:	f04f 0806 	mov.w	r8, #6
 8001d28:	463a      	mov	r2, r7
        memcpy(payload + 1, buf, buflen);
 8001d2a:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 8001d2e:	f89d c00e 	ldrb.w	ip, [sp, #14]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d32:	9600      	str	r6, [sp, #0]
    *payload = reg;
 8001d34:	f802 8b01 	strb.w	r8, [r2], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d38:	462b      	mov	r3, r5
        memcpy(payload + 1, buf, buflen);
 8001d3a:	f8a7 e001 	strh.w	lr, [r7, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d3e:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 8001d40:	f882 c002 	strb.w	ip, [r2, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	463a      	mov	r2, r7
 8001d48:	f002 f86e 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	f006 f93f 	bl	8007fd0 <free>
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001d52:	4628      	mov	r0, r5
 8001d54:	f006 f934 	bl	8007fc0 <malloc>
 8001d58:	4602      	mov	r2, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d5a:	9600      	str	r6, [sp, #0]
    *payload = reg;
 8001d5c:	2705      	movs	r7, #5
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d5e:	6820      	ldr	r0, [r4, #0]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001d60:	4614      	mov	r4, r2
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d62:	462b      	mov	r3, r5
        memcpy(payload + 1, buf, buflen);
 8001d64:	f89d 600e 	ldrb.w	r6, [sp, #14]
 8001d68:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    *payload = reg;
 8001d6c:	f802 7b01 	strb.w	r7, [r2], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d70:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 8001d72:	f8a4 5001 	strh.w	r5, [r4, #1]
 8001d76:	7096      	strb	r6, [r2, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001d78:	4622      	mov	r2, r4
 8001d7a:	f002 f855 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001d7e:	4620      	mov	r0, r4
}
 8001d80:	b005      	add	sp, #20
 8001d82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    free(payload);
 8001d86:	f006 b923 	b.w	8007fd0 <free>
 8001d8a:	bf00      	nop

08001d8c <max30102_set_sampling_rate>:
{
 8001d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001d90:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8001d94:	270a      	movs	r7, #10
{
 8001d96:	4606      	mov	r6, r0
 8001d98:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001d9a:	f8cd 8000 	str.w	r8, [sp]
 8001d9e:	f10d 020f 	add.w	r2, sp, #15
 8001da2:	2301      	movs	r3, #1
 8001da4:	21ae      	movs	r1, #174	@ 0xae
 8001da6:	6800      	ldr	r0, [r0, #0]
    uint8_t reg_addr = reg;
 8001da8:	f88d 700f 	strb.w	r7, [sp, #15]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001dac:	f002 f83c 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001db0:	f8cd 8000 	str.w	r8, [sp]
 8001db4:	f10d 020e 	add.w	r2, sp, #14
 8001db8:	2301      	movs	r3, #1
 8001dba:	21ae      	movs	r1, #174	@ 0xae
 8001dbc:	6830      	ldr	r0, [r6, #0]
 8001dbe:	f002 f921 	bl	8004004 <HAL_I2C_Master_Receive>
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001dc2:	2002      	movs	r0, #2
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8001dc4:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8001dc8:	4085      	lsls	r5, r0
 8001dca:	f005 058c 	and.w	r5, r5, #140	@ 0x8c
 8001dce:	f88d 500e 	strb.w	r5, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001dd2:	f006 f8f5 	bl	8007fc0 <malloc>
 8001dd6:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001dd8:	f8cd 8000 	str.w	r8, [sp]
 8001ddc:	2302      	movs	r3, #2
 8001dde:	21ae      	movs	r1, #174	@ 0xae
 8001de0:	4622      	mov	r2, r4
 8001de2:	6830      	ldr	r0, [r6, #0]
    *payload = reg;
 8001de4:	7027      	strb	r7, [r4, #0]
        memcpy(payload + 1, buf, buflen);
 8001de6:	7065      	strb	r5, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001de8:	f002 f81e 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001dec:	4620      	mov	r0, r4
}
 8001dee:	b004      	add	sp, #16
 8001df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8001df4:	f006 b8ec 	b.w	8007fd0 <free>

08001df8 <max30102_set_led_pulse_width>:
{
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001dfc:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8001e00:	f04f 080a 	mov.w	r8, #10
{
 8001e04:	4606      	mov	r6, r0
 8001e06:	460d      	mov	r5, r1
 8001e08:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001e0a:	9700      	str	r7, [sp, #0]
 8001e0c:	f10d 020f 	add.w	r2, sp, #15
 8001e10:	2301      	movs	r3, #1
 8001e12:	21ae      	movs	r1, #174	@ 0xae
 8001e14:	6800      	ldr	r0, [r0, #0]
    uint8_t reg_addr = reg;
 8001e16:	f88d 800f 	strb.w	r8, [sp, #15]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001e1a:	f002 f805 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001e1e:	9700      	str	r7, [sp, #0]
 8001e20:	f10d 020e 	add.w	r2, sp, #14
 8001e24:	21ae      	movs	r1, #174	@ 0xae
 8001e26:	2301      	movs	r3, #1
 8001e28:	6830      	ldr	r0, [r6, #0]
 8001e2a:	f002 f8eb 	bl	8004004 <HAL_I2C_Master_Receive>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001e2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001e32:	2002      	movs	r0, #2
 8001e34:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001e38:	431d      	orrs	r5, r3
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001e3a:	f88d 500e 	strb.w	r5, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001e3e:	f006 f8bf 	bl	8007fc0 <malloc>
 8001e42:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001e44:	9700      	str	r7, [sp, #0]
 8001e46:	2302      	movs	r3, #2
 8001e48:	21ae      	movs	r1, #174	@ 0xae
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	6830      	ldr	r0, [r6, #0]
    *payload = reg;
 8001e4e:	f884 8000 	strb.w	r8, [r4]
        memcpy(payload + 1, buf, buflen);
 8001e52:	7065      	strb	r5, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001e54:	f001 ffe8 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001e58:	4620      	mov	r0, r4
}
 8001e5a:	b004      	add	sp, #16
 8001e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8001e60:	f006 b8b6 	b.w	8007fd0 <free>

08001e64 <max30102_set_adc_resolution>:
{
 8001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001e68:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8001e6c:	270a      	movs	r7, #10
{
 8001e6e:	4606      	mov	r6, r0
 8001e70:	460d      	mov	r5, r1
 8001e72:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001e74:	f8cd 8000 	str.w	r8, [sp]
 8001e78:	f10d 020f 	add.w	r2, sp, #15
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	21ae      	movs	r1, #174	@ 0xae
 8001e80:	6800      	ldr	r0, [r0, #0]
    uint8_t reg_addr = reg;
 8001e82:	f88d 700f 	strb.w	r7, [sp, #15]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001e86:	f001 ffcf 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001e8a:	f8cd 8000 	str.w	r8, [sp]
 8001e8e:	f10d 020e 	add.w	r2, sp, #14
 8001e92:	2301      	movs	r3, #1
 8001e94:	21ae      	movs	r1, #174	@ 0xae
 8001e96:	6830      	ldr	r0, [r6, #0]
 8001e98:	f002 f8b4 	bl	8004004 <HAL_I2C_Master_Receive>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001e9c:	f89d 400e 	ldrb.w	r4, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001ea0:	2002      	movs	r0, #2
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001ea2:	f004 041f 	and.w	r4, r4, #31
 8001ea6:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8001eaa:	b2e4      	uxtb	r4, r4
 8001eac:	f88d 400e 	strb.w	r4, [sp, #14]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001eb0:	f006 f886 	bl	8007fc0 <malloc>
 8001eb4:	4605      	mov	r5, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001eb6:	f8cd 8000 	str.w	r8, [sp]
 8001eba:	2302      	movs	r3, #2
 8001ebc:	21ae      	movs	r1, #174	@ 0xae
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	6830      	ldr	r0, [r6, #0]
    *payload = reg;
 8001ec2:	702f      	strb	r7, [r5, #0]
        memcpy(payload + 1, buf, buflen);
 8001ec4:	706c      	strb	r4, [r5, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001ec6:	f001 ffaf 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001eca:	4628      	mov	r0, r5
}
 8001ecc:	b004      	add	sp, #16
 8001ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8001ed2:	f006 b87d 	b.w	8007fd0 <free>
 8001ed6:	bf00      	nop

08001ed8 <max30102_set_led_current_1>:
{
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	4605      	mov	r5, r0
 8001edc:	b082      	sub	sp, #8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001ede:	2002      	movs	r0, #2
{
 8001ee0:	460e      	mov	r6, r1
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001ee2:	f006 f86d 	bl	8007fc0 <malloc>
    *payload = reg;
 8001ee6:	230c      	movs	r3, #12
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001ee8:	4604      	mov	r4, r0
    uint8_t pa = ma / 0.2;
 8001eea:	4630      	mov	r0, r6
    *payload = reg;
 8001eec:	7023      	strb	r3, [r4, #0]
    uint8_t pa = ma / 0.2;
 8001eee:	f7fe faeb 	bl	80004c8 <__aeabi_f2d>
 8001ef2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f28 <max30102_set_led_current_1+0x50>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fc68 	bl	80007cc <__aeabi_ddiv>
 8001efc:	f7fe fe14 	bl	8000b28 <__aeabi_d2uiz>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f00:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    uint8_t pa = ma / 0.2;
 8001f04:	4684      	mov	ip, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f06:	2302      	movs	r3, #2
 8001f08:	6828      	ldr	r0, [r5, #0]
    uint8_t pa = ma / 0.2;
 8001f0a:	f884 c001 	strb.w	ip, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f0e:	4622      	mov	r2, r4
 8001f10:	21ae      	movs	r1, #174	@ 0xae
 8001f12:	9600      	str	r6, [sp, #0]
 8001f14:	f001 ff88 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001f18:	4620      	mov	r0, r4
}
 8001f1a:	b002      	add	sp, #8
 8001f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(payload);
 8001f20:	f006 b856 	b.w	8007fd0 <free>
 8001f24:	f3af 8000 	nop.w
 8001f28:	9999999a 	.word	0x9999999a
 8001f2c:	3fc99999 	.word	0x3fc99999

08001f30 <max30102_set_led_current_2>:
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	4605      	mov	r5, r0
 8001f34:	b082      	sub	sp, #8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f36:	2002      	movs	r0, #2
{
 8001f38:	460e      	mov	r6, r1
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f3a:	f006 f841 	bl	8007fc0 <malloc>
    *payload = reg;
 8001f3e:	230d      	movs	r3, #13
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f40:	4604      	mov	r4, r0
    uint8_t pa = ma / 0.2;
 8001f42:	4630      	mov	r0, r6
    *payload = reg;
 8001f44:	7023      	strb	r3, [r4, #0]
    uint8_t pa = ma / 0.2;
 8001f46:	f7fe fabf 	bl	80004c8 <__aeabi_f2d>
 8001f4a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f80 <max30102_set_led_current_2+0x50>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fc3c 	bl	80007cc <__aeabi_ddiv>
 8001f54:	f7fe fde8 	bl	8000b28 <__aeabi_d2uiz>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f58:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
    uint8_t pa = ma / 0.2;
 8001f5c:	4684      	mov	ip, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f5e:	2302      	movs	r3, #2
 8001f60:	6828      	ldr	r0, [r5, #0]
    uint8_t pa = ma / 0.2;
 8001f62:	f884 c001 	strb.w	ip, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f66:	4622      	mov	r2, r4
 8001f68:	21ae      	movs	r1, #174	@ 0xae
 8001f6a:	9600      	str	r6, [sp, #0]
 8001f6c:	f001 ff5c 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001f70:	4620      	mov	r0, r4
}
 8001f72:	b002      	add	sp, #8
 8001f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(payload);
 8001f78:	f006 b82a 	b.w	8007fd0 <free>
 8001f7c:	f3af 8000 	nop.w
 8001f80:	9999999a 	.word	0x9999999a
 8001f84:	3fc99999 	.word	0x3fc99999

08001f88 <max30102_set_fifo_config>:
{
 8001f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8c:	4607      	mov	r7, r0
 8001f8e:	b082      	sub	sp, #8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f90:	2002      	movs	r0, #2
{
 8001f92:	4688      	mov	r8, r1
 8001f94:	4615      	mov	r5, r2
 8001f96:	461c      	mov	r4, r3
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001f98:	f006 f812 	bl	8007fc0 <malloc>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001f9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001fa0:	4606      	mov	r6, r0
    *payload = reg;
 8001fa2:	2208      	movs	r2, #8
        memcpy(payload + 1, buf, buflen);
 8001fa4:	f004 040f 	and.w	r4, r4, #15
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001fa8:	012d      	lsls	r5, r5, #4
        memcpy(payload + 1, buf, buflen);
 8001faa:	ea44 1448 	orr.w	r4, r4, r8, lsl #5
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001fae:	f005 0510 	and.w	r5, r5, #16
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001fb2:	9300      	str	r3, [sp, #0]
        memcpy(payload + 1, buf, buflen);
 8001fb4:	432c      	orrs	r4, r5
    *payload = reg;
 8001fb6:	7032      	strb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001fb8:	2302      	movs	r3, #2
 8001fba:	4632      	mov	r2, r6
 8001fbc:	21ae      	movs	r1, #174	@ 0xae
 8001fbe:	6838      	ldr	r0, [r7, #0]
        memcpy(payload + 1, buf, buflen);
 8001fc0:	7074      	strb	r4, [r6, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001fc2:	f001 ff31 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8001fc6:	4630      	mov	r0, r6
}
 8001fc8:	b002      	add	sp, #8
 8001fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8001fce:	f005 bfff 	b.w	8007fd0 <free>
 8001fd2:	bf00      	nop

08001fd4 <max30102_clear_fifo>:
{
 8001fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t val[4] = {0x00};
 8001fd8:	2300      	movs	r3, #0
{
 8001fda:	4606      	mov	r6, r0
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001fdc:	2004      	movs	r0, #4
{
 8001fde:	b084      	sub	sp, #16
    *payload = reg;
 8001fe0:	4605      	mov	r5, r0
    uint8_t val[4] = {0x00};
 8001fe2:	9303      	str	r3, [sp, #12]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001fe4:	f005 ffec 	bl	8007fc0 <malloc>
 8001fe8:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001fea:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
    *payload = reg;
 8001fee:	46a4      	mov	ip, r4
        memcpy(payload + 1, buf, buflen);
 8001ff0:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8001ff4:	f8bd 800c 	ldrh.w	r8, [sp, #12]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001ff8:	9700      	str	r7, [sp, #0]
    *payload = reg;
 8001ffa:	f80c 5b01 	strb.w	r5, [ip], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001ffe:	462b      	mov	r3, r5
 8002000:	4622      	mov	r2, r4
 8002002:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 8002004:	f8a4 8001 	strh.w	r8, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002008:	6830      	ldr	r0, [r6, #0]
        memcpy(payload + 1, buf, buflen);
 800200a:	f88c e002 	strb.w	lr, [ip, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800200e:	f001 ff0b 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8002012:	4620      	mov	r0, r4
 8002014:	f005 ffdc 	bl	8007fd0 <free>
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8002018:	4628      	mov	r0, r5
 800201a:	f005 ffd1 	bl	8007fc0 <malloc>
 800201e:	4604      	mov	r4, r0
    *payload = reg;
 8002020:	f04f 0806 	mov.w	r8, #6
 8002024:	4622      	mov	r2, r4
        memcpy(payload + 1, buf, buflen);
 8002026:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 800202a:	f89d c00e 	ldrb.w	ip, [sp, #14]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800202e:	9700      	str	r7, [sp, #0]
    *payload = reg;
 8002030:	f802 8b01 	strb.w	r8, [r2], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002034:	462b      	mov	r3, r5
        memcpy(payload + 1, buf, buflen);
 8002036:	f8a4 e001 	strh.w	lr, [r4, #1]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800203a:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 800203c:	f882 c002 	strb.w	ip, [r2, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002040:	6830      	ldr	r0, [r6, #0]
 8002042:	4622      	mov	r2, r4
 8002044:	f001 fef0 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 8002048:	4620      	mov	r0, r4
 800204a:	f005 ffc1 	bl	8007fd0 <free>
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800204e:	4628      	mov	r0, r5
 8002050:	f005 ffb6 	bl	8007fc0 <malloc>
 8002054:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002056:	9700      	str	r7, [sp, #0]
    *payload = reg;
 8002058:	4622      	mov	r2, r4
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800205a:	6830      	ldr	r0, [r6, #0]
    *payload = reg;
 800205c:	2605      	movs	r6, #5
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800205e:	462b      	mov	r3, r5
        memcpy(payload + 1, buf, buflen);
 8002060:	f89d 700e 	ldrb.w	r7, [sp, #14]
 8002064:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    *payload = reg;
 8002068:	f802 6b01 	strb.w	r6, [r2], #1
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800206c:	21ae      	movs	r1, #174	@ 0xae
        memcpy(payload + 1, buf, buflen);
 800206e:	f8a4 5001 	strh.w	r5, [r4, #1]
 8002072:	7097      	strb	r7, [r2, #2]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8002074:	4622      	mov	r2, r4
 8002076:	f001 fed7 	bl	8003e28 <HAL_I2C_Master_Transmit>
    free(payload);
 800207a:	4620      	mov	r0, r4
    max30102_write(obj, MAX30102_FIFO_WR_PTR, (uint8_t*)&val, 3);
    max30102_write(obj, MAX30102_FIFO_RD_PTR, (uint8_t*)&val, 3);
    max30102_write(obj, MAX30102_OVF_COUNTER, (uint8_t*)&val, 3);
}
 800207c:	b004      	add	sp, #16
 800207e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    free(payload);
 8002082:	f005 bfa5 	b.w	8007fd0 <free>
 8002086:	bf00      	nop

08002088 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8002088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800208c:	2500      	movs	r5, #0
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800208e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 8002092:	2704      	movs	r7, #4
{
 8002094:	4606      	mov	r6, r0
 8002096:	b087      	sub	sp, #28
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8002098:	f88d 500d 	strb.w	r5, [sp, #13]
 800209c:	f88d 500e 	strb.w	r5, [sp, #14]
    uint8_t reg_addr = reg;
 80020a0:	2506      	movs	r5, #6
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80020a2:	9400      	str	r4, [sp, #0]
 80020a4:	2301      	movs	r3, #1
 80020a6:	21ae      	movs	r1, #174	@ 0xae
 80020a8:	aa04      	add	r2, sp, #16
 80020aa:	6800      	ldr	r0, [r0, #0]
    uint8_t reg_addr = reg;
 80020ac:	f88d 7010 	strb.w	r7, [sp, #16]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80020b0:	f001 feba 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80020b4:	9400      	str	r4, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	21ae      	movs	r1, #174	@ 0xae
 80020ba:	f10d 020d 	add.w	r2, sp, #13
 80020be:	6830      	ldr	r0, [r6, #0]
 80020c0:	f001 ffa0 	bl	8004004 <HAL_I2C_Master_Receive>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80020c4:	9400      	str	r4, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	21ae      	movs	r1, #174	@ 0xae
 80020ca:	aa04      	add	r2, sp, #16
 80020cc:	6830      	ldr	r0, [r6, #0]
    uint8_t reg_addr = reg;
 80020ce:	f88d 5010 	strb.w	r5, [sp, #16]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80020d2:	f001 fea9 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80020d6:	9400      	str	r4, [sp, #0]
 80020d8:	2301      	movs	r3, #1
 80020da:	f10d 020e 	add.w	r2, sp, #14
 80020de:	21ae      	movs	r1, #174	@ 0xae
 80020e0:	6830      	ldr	r0, [r6, #0]
 80020e2:	f001 ff8f 	bl	8004004 <HAL_I2C_Master_Receive>
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80020e6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80020ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	fa4f f883 	sxtb.w	r8, r3
    if (num_samples < 1)
 80020f4:	f1b8 0f00 	cmp.w	r8, #0
 80020f8:	dd3b      	ble.n	8002172 <max30102_read_fifo+0xea>
 80020fa:	4635      	mov	r5, r6
{
 80020fc:	2400      	movs	r4, #0
    uint8_t reg_addr = reg;
 80020fe:	f04f 0907 	mov.w	r9, #7
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002102:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 8002106:	2301      	movs	r3, #1
 8002108:	21ae      	movs	r1, #174	@ 0xae
 800210a:	6830      	ldr	r0, [r6, #0]
 800210c:	f10d 020f 	add.w	r2, sp, #15
 8002110:	9700      	str	r7, [sp, #0]
    uint8_t reg_addr = reg;
 8002112:	f88d 900f 	strb.w	r9, [sp, #15]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002116:	f001 fe87 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800211a:	2306      	movs	r3, #6
 800211c:	21ae      	movs	r1, #174	@ 0xae
 800211e:	6830      	ldr	r0, [r6, #0]
 8002120:	aa04      	add	r2, sp, #16
 8002122:	9700      	str	r7, [sp, #0]
 8002124:	f001 ff6e 	bl	8004004 <HAL_I2C_Master_Receive>
    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8002128:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800212c:	f89d c010 	ldrb.w	ip, [sp, #16]
 8002130:	f89d 3012 	ldrb.w	r3, [sp, #18]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002134:	f89d 1014 	ldrb.w	r1, [sp, #20]
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8002138:	0200      	lsls	r0, r0, #8
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800213a:	f89d 2013 	ldrb.w	r2, [sp, #19]
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800213e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002142:	4318      	orrs	r0, r3
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002144:	0209      	lsls	r1, r1, #8
 8002146:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800214a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800214e:	4319      	orrs	r1, r3
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8002150:	f3c0 0011 	ubfx	r0, r0, #0, #18
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8002154:	f3c1 0111 	ubfx	r1, r1, #0, #18
        obj->_ir_samples[i] = ir_sample;
 8002158:	f845 0f04 	str.w	r0, [r5, #4]!
        obj->_red_samples[i] = red_sample;
 800215c:	f8c5 1080 	str.w	r1, [r5, #128]	@ 0x80
    for (int8_t i = 0; i < num_samples; i++)
 8002160:	3401      	adds	r4, #1
        max30102_plot(ir_sample, red_sample);
 8002162:	f7fe fe95 	bl	8000e90 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8002166:	b263      	sxtb	r3, r4
 8002168:	4598      	cmp	r8, r3
 800216a:	dccc      	bgt.n	8002106 <max30102_read_fifo+0x7e>
    }
}
 800216c:	b007      	add	sp, #28
 800216e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002172:	b2db      	uxtb	r3, r3
        num_samples += 32;
 8002174:	3320      	adds	r3, #32
 8002176:	fa4f f883 	sxtb.w	r8, r3
    for (int8_t i = 0; i < num_samples; i++)
 800217a:	f1b8 0f00 	cmp.w	r8, #0
 800217e:	dcbc      	bgt.n	80020fa <max30102_read_fifo+0x72>
}
 8002180:	b007      	add	sp, #28
 8002182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002186:	bf00      	nop

08002188 <max30102_interrupt_handler>:
{
 8002188:	b530      	push	{r4, r5, lr}
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800218a:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
    uint8_t reg[2] = {0x00};
 800218e:	f04f 0c00 	mov.w	ip, #0
{
 8002192:	4604      	mov	r4, r0
 8002194:	b085      	sub	sp, #20
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002196:	9500      	str	r5, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	21ae      	movs	r1, #174	@ 0xae
 800219c:	f10d 020b 	add.w	r2, sp, #11
 80021a0:	6800      	ldr	r0, [r0, #0]
    uint8_t reg[2] = {0x00};
 80021a2:	f8ad c00c 	strh.w	ip, [sp, #12]
    uint8_t reg_addr = reg;
 80021a6:	f88d c00b 	strb.w	ip, [sp, #11]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80021aa:	f001 fe3d 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80021ae:	9500      	str	r5, [sp, #0]
 80021b0:	2302      	movs	r3, #2
 80021b2:	21ae      	movs	r1, #174	@ 0xae
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	aa03      	add	r2, sp, #12
 80021b8:	f001 ff24 	bl	8004004 <HAL_I2C_Master_Receive>
    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 80021bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80021c0:	09db      	lsrs	r3, r3, #7
 80021c2:	d108      	bne.n	80021d6 <max30102_interrupt_handler+0x4e>
    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80021c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80021c8:	079b      	lsls	r3, r3, #30
 80021ca:	d40b      	bmi.n	80021e4 <max30102_interrupt_handler+0x5c>
    obj->_interrupt_flag = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
}
 80021d2:	b005      	add	sp, #20
 80021d4:	bd30      	pop	{r4, r5, pc}
        max30102_read_fifo(obj);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff56 	bl	8002088 <max30102_read_fifo>
    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80021dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80021e0:	079b      	lsls	r3, r3, #30
 80021e2:	d5f3      	bpl.n	80021cc <max30102_interrupt_handler+0x44>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80021e4:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
    uint8_t reg_addr = reg;
 80021e8:	f04f 0c1f 	mov.w	ip, #31
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80021ec:	6820      	ldr	r0, [r4, #0]
 80021ee:	f10d 020b 	add.w	r2, sp, #11
 80021f2:	2301      	movs	r3, #1
 80021f4:	21ae      	movs	r1, #174	@ 0xae
 80021f6:	9500      	str	r5, [sp, #0]
    uint8_t reg_addr = reg;
 80021f8:	f88d c00b 	strb.w	ip, [sp, #11]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80021fc:	f001 fe14 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8002200:	9500      	str	r5, [sp, #0]
 8002202:	f10d 0209 	add.w	r2, sp, #9
 8002206:	2301      	movs	r3, #1
 8002208:	21ae      	movs	r1, #174	@ 0xae
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	f001 fefa 	bl	8004004 <HAL_I2C_Master_Receive>
    uint8_t reg_addr = reg;
 8002210:	f04f 0c20 	mov.w	ip, #32
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002214:	9500      	str	r5, [sp, #0]
 8002216:	f10d 020b 	add.w	r2, sp, #11
 800221a:	2301      	movs	r3, #1
 800221c:	21ae      	movs	r1, #174	@ 0xae
 800221e:	6820      	ldr	r0, [r4, #0]
    uint8_t reg_addr = reg;
 8002220:	f88d c00b 	strb.w	ip, [sp, #11]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8002224:	f001 fe00 	bl	8003e28 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	2301      	movs	r3, #1
 800222c:	21ae      	movs	r1, #174	@ 0xae
 800222e:	9500      	str	r5, [sp, #0]
 8002230:	f10d 020a 	add.w	r2, sp, #10
 8002234:	f001 fee6 	bl	8004004 <HAL_I2C_Master_Receive>
    obj->_interrupt_flag = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
}
 800223e:	b005      	add	sp, #20
 8002240:	bd30      	pop	{r4, r5, pc}
 8002242:	bf00      	nop

08002244 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002244:	b538      	push	{r3, r4, r5, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002246:	2130      	movs	r1, #48	@ 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002248:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800224a:	f44f 7582 	mov.w	r5, #260	@ 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224e:	f44f 7400 	mov.w	r4, #512	@ 0x200
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8002252:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 8002254:	480a      	ldr	r0, [pc, #40]	@ (8002280 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002256:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800225e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002262:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	6243      	str	r3, [r0, #36]	@ 0x24
 8002268:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Instance = SPI1;
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_SPI1_Init+0x40>)
  hspi1.Init.CRCPolynomial = 10;
 800226c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Instance = SPI1;
 800226e:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002270:	f002 fd9c 	bl	8004dac <HAL_SPI_Init>
 8002274:	b900      	cbnz	r0, 8002278 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002276:	bd38      	pop	{r3, r4, r5, pc}
 8002278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800227c:	f7ff bc30 	b.w	8001ae0 <Error_Handler>
 8002280:	20000480 	.word	0x20000480
 8002284:	40013000 	.word	0x40013000

08002288 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002288:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800228a:	2300      	movs	r3, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800228c:	f44f 7482 	mov.w	r4, #260	@ 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002290:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8002294:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 8002296:	480b      	ldr	r0, [pc, #44]	@ (80022c4 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002298:	e9c0 4301 	strd	r4, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800229c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022a0:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a8:	6243      	str	r3, [r0, #36]	@ 0x24
 80022aa:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Instance = SPI2;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <MX_SPI2_Init+0x40>)
  hspi2.Init.CRCPolynomial = 10;
 80022ae:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Instance = SPI2;
 80022b0:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022b2:	f002 fd7b 	bl	8004dac <HAL_SPI_Init>
 80022b6:	b900      	cbnz	r0, 80022ba <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80022be:	f7ff bc0f 	b.w	8001ae0 <Error_Handler>
 80022c2:	bf00      	nop
 80022c4:	20000428 	.word	0x20000428
 80022c8:	40003800 	.word	0x40003800

080022cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 80022d0:	4a3f      	ldr	r2, [pc, #252]	@ (80023d0 <HAL_SPI_MspInit+0x104>)
 80022d2:	6803      	ldr	r3, [r0, #0]
{
 80022d4:	b089      	sub	sp, #36	@ 0x24
  if(spiHandle->Instance==SPI1)
 80022d6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80022dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(spiHandle->Instance==SPI1)
 80022e0:	d004      	beq.n	80022ec <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80022e2:	4a3c      	ldr	r2, [pc, #240]	@ (80023d4 <HAL_SPI_MspInit+0x108>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d029      	beq.n	800233c <HAL_SPI_MspInit+0x70>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022e8:	b009      	add	sp, #36	@ 0x24
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_SPI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022ee:	26a0      	movs	r6, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022f2:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022f8:	619a      	str	r2, [r3, #24]
 80022fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002302:	9200      	str	r2, [sp, #0]
 8002304:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	4834      	ldr	r0, [pc, #208]	@ (80023dc <HAL_SPI_MspInit+0x110>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	f042 0204 	orr.w	r2, r2, #4
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002312:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002320:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f001 f8e5 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002326:	2240      	movs	r2, #64	@ 0x40
 8002328:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	482c      	ldr	r0, [pc, #176]	@ (80023dc <HAL_SPI_MspInit+0x110>)
 800232c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800232e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f001 f8dc 	bl	80034f0 <HAL_GPIO_Init>
}
 8002338:	b009      	add	sp, #36	@ 0x24
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_SPI_MspInit+0x10c>)
 800233e:	4605      	mov	r5, r0
 8002340:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	4827      	ldr	r0, [pc, #156]	@ (80023e0 <HAL_SPI_MspInit+0x114>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002348:	61da      	str	r2, [r3, #28]
 800234a:	69da      	ldr	r2, [r3, #28]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800234c:	4e25      	ldr	r6, [pc, #148]	@ (80023e4 <HAL_SPI_MspInit+0x118>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002352:	9202      	str	r2, [sp, #8]
 8002354:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	f042 0208 	orr.w	r2, r2, #8
 800235c:	619a      	str	r2, [r3, #24]
 800235e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002360:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	9303      	str	r3, [sp, #12]
 800236a:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236c:	2103      	movs	r1, #3
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800236e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002374:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f001 f8ba 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800237c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002380:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	4817      	ldr	r0, [pc, #92]	@ (80023e0 <HAL_SPI_MspInit+0x114>)
 8002384:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002386:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238c:	f001 f8b0 	bl	80034f0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_SPI_MspInit+0x11c>)
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002392:	2110      	movs	r1, #16
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002394:	2280      	movs	r2, #128	@ 0x80
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002396:	6033      	str	r3, [r6, #0]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800239c:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800239e:	60b4      	str	r4, [r6, #8]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a0:	6134      	str	r4, [r6, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a2:	6174      	str	r4, [r6, #20]
 80023a4:	61b4      	str	r4, [r6, #24]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a6:	6071      	str	r1, [r6, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023a8:	60f2      	str	r2, [r6, #12]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023aa:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023ac:	f000 fd6e 	bl	8002e8c <HAL_DMA_Init>
 80023b0:	b958      	cbnz	r0, 80023ca <HAL_SPI_MspInit+0xfe>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2105      	movs	r1, #5
 80023b6:	2024      	movs	r0, #36	@ 0x24
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023b8:	64ae      	str	r6, [r5, #72]	@ 0x48
 80023ba:	6275      	str	r5, [r6, #36]	@ 0x24
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80023bc:	f000 fd0c 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023c0:	2024      	movs	r0, #36	@ 0x24
 80023c2:	f000 fd4f 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 80023c6:	b009      	add	sp, #36	@ 0x24
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80023ca:	f7ff fb89 	bl	8001ae0 <Error_Handler>
 80023ce:	e7f0      	b.n	80023b2 <HAL_SPI_MspInit+0xe6>
 80023d0:	40013000 	.word	0x40013000
 80023d4:	40003800 	.word	0x40003800
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010800 	.word	0x40010800
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	200003e0 	.word	0x200003e0
 80023e8:	40020058 	.word	0x40020058

080023ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_MspInit+0x48>)
{
 80023ee:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f0:	6998      	ldr	r0, [r3, #24]
{
 80023f2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f4:	f040 0001 	orr.w	r0, r0, #1
 80023f8:	6198      	str	r0, [r3, #24]
 80023fa:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023fc:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fe:	f004 0401 	and.w	r4, r4, #1
 8002402:	9400      	str	r4, [sp, #0]
 8002404:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002408:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 800240e:	61dc      	str	r4, [r3, #28]
 8002410:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002412:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800241e:	f000 fcdb 	bl	8002dd8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <HAL_MspInit+0x4c>)
 8002424:	6853      	ldr	r3, [r2, #4]
 8002426:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800242a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800242e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002430:	b002      	add	sp, #8
 8002432:	bd10      	pop	{r4, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000

0800243c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800243c:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <HAL_InitTick+0x90>)
{
 800243e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002440:	69da      	ldr	r2, [r3, #28]
{
 8002442:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002444:	f042 0220 	orr.w	r2, r2, #32
 8002448:	61da      	str	r2, [r3, #28]
 800244a:	69db      	ldr	r3, [r3, #28]
{
 800244c:	4605      	mov	r5, r0
  __HAL_RCC_TIM7_CLK_ENABLE();
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	a901      	add	r1, sp, #4
 8002456:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002458:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245a:	f002 fb77 	bl	8004b4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800245e:	9b06      	ldr	r3, [sp, #24]
 8002460:	b9d3      	cbnz	r3, 8002498 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002462:	f002 fb53 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8002466:	4603      	mov	r3, r0
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 8002468:	2200      	movs	r2, #0
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800246a:	f240 36e7 	movw	r6, #999	@ 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800246e:	4918      	ldr	r1, [pc, #96]	@ (80024d0 <HAL_InitTick+0x94>)
  htim7.Instance = TIM7;
 8002470:	4c18      	ldr	r4, [pc, #96]	@ (80024d4 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002472:	fba1 1303 	umull	r1, r3, r1, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	3b01      	subs	r3, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 800247a:	6063      	str	r3, [r4, #4]
  htim7.Instance = TIM7;
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_InitTick+0x9c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 800247e:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8002480:	e9c4 6203 	strd	r6, r2, [r4, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	61a2      	str	r2, [r4, #24]
  htim7.Instance = TIM7;
 8002488:	6023      	str	r3, [r4, #0]
  status = HAL_TIM_Base_Init(&htim7);
 800248a:	f003 f94f 	bl	800572c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800248e:	4606      	mov	r6, r0
 8002490:	b130      	cbz	r0, 80024a0 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 8002492:	4630      	mov	r0, r6
 8002494:	b008      	add	sp, #32
 8002496:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002498:	f002 fb38 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 800249c:	0043      	lsls	r3, r0, #1
 800249e:	e7e3      	b.n	8002468 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 80024a0:	4620      	mov	r0, r4
 80024a2:	f002 ffe3 	bl	800546c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80024a6:	4606      	mov	r6, r0
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d1f2      	bne.n	8002492 <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024ac:	2037      	movs	r0, #55	@ 0x37
 80024ae:	f000 fcd9 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	2d0f      	cmp	r5, #15
 80024b4:	d901      	bls.n	80024ba <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 80024b6:	2601      	movs	r6, #1
 80024b8:	e7eb      	b.n	8002492 <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80024ba:	4632      	mov	r2, r6
 80024bc:	4629      	mov	r1, r5
 80024be:	2037      	movs	r0, #55	@ 0x37
 80024c0:	f000 fc8a 	bl	8002dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_InitTick+0xa0>)
 80024c6:	601d      	str	r5, [r3, #0]
 80024c8:	e7e3      	b.n	8002492 <HAL_InitTick+0x56>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	200004d8 	.word	0x200004d8
 80024d8:	40001400 	.word	0x40001400
 80024dc:	20000008 	.word	0x20000008

080024e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler>
 80024e2:	bf00      	nop

080024e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <HardFault_Handler>
 80024e6:	bf00      	nop

080024e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler>
 80024ea:	bf00      	nop

080024ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <BusFault_Handler>
 80024ee:	bf00      	nop

080024f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <UsageFault_Handler>
 80024f2:	bf00      	nop

080024f4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024f8:	4801      	ldr	r0, [pc, #4]	@ (8002500 <DMA1_Channel1_IRQHandler+0x8>)
 80024fa:	f000 bea3 	b.w	8003244 <HAL_DMA_IRQHandler>
 80024fe:	bf00      	nop
 8002500:	200001f8 	.word	0x200001f8

08002504 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002504:	4801      	ldr	r0, [pc, #4]	@ (800250c <DMA1_Channel5_IRQHandler+0x8>)
 8002506:	f000 be9d 	b.w	8003244 <HAL_DMA_IRQHandler>
 800250a:	bf00      	nop
 800250c:	200003e0 	.word	0x200003e0

08002510 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TCH_IRQ_Pin);
 8002510:	2040      	movs	r0, #64	@ 0x40
 8002512:	f001 b9f5 	b.w	8003900 <HAL_GPIO_EXTI_IRQHandler>
 8002516:	bf00      	nop

08002518 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002518:	4801      	ldr	r0, [pc, #4]	@ (8002520 <SPI2_IRQHandler+0x8>)
 800251a:	f002 bf25 	b.w	8005368 <HAL_SPI_IRQHandler>
 800251e:	bf00      	nop
 8002520:	20000428 	.word	0x20000428

08002524 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002524:	4801      	ldr	r0, [pc, #4]	@ (800252c <USART1_IRQHandler+0x8>)
 8002526:	f003 bbc5 	b.w	8005cb4 <HAL_UART_IRQHandler>
 800252a:	bf00      	nop
 800252c:	200005b8 	.word	0x200005b8

08002530 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002530:	4801      	ldr	r0, [pc, #4]	@ (8002538 <USART2_IRQHandler+0x8>)
 8002532:	f003 bbbf 	b.w	8005cb4 <HAL_UART_IRQHandler>
 8002536:	bf00      	nop
 8002538:	20000570 	.word	0x20000570

0800253c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800253c:	4801      	ldr	r0, [pc, #4]	@ (8002544 <USART3_IRQHandler+0x8>)
 800253e:	f003 bbb9 	b.w	8005cb4 <HAL_UART_IRQHandler>
 8002542:	bf00      	nop
 8002544:	20000528 	.word	0x20000528

08002548 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002548:	4801      	ldr	r0, [pc, #4]	@ (8002550 <UART4_IRQHandler+0x8>)
 800254a:	f003 bbb3 	b.w	8005cb4 <HAL_UART_IRQHandler>
 800254e:	bf00      	nop
 8002550:	20000600 	.word	0x20000600

08002554 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */
  
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002554:	4801      	ldr	r0, [pc, #4]	@ (800255c <TIM7_IRQHandler+0x8>)
 8002556:	f002 bfeb 	b.w	8005530 <HAL_TIM_IRQHandler>
 800255a:	bf00      	nop
 800255c:	200004d8 	.word	0x200004d8

08002560 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002560:	2001      	movs	r0, #1
 8002562:	4770      	bx	lr

08002564 <_kill>:

int _kill(int pid, int sig)
{
 8002564:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002566:	f006 fccb 	bl	8008f00 <__errno>
 800256a:	2216      	movs	r2, #22
 800256c:	4603      	mov	r3, r0
  return -1;
}
 800256e:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bd08      	pop	{r3, pc}
 8002576:	bf00      	nop

08002578 <_exit>:

void _exit (int status)
{
 8002578:	b508      	push	{r3, lr}
  errno = EINVAL;
 800257a:	f006 fcc1 	bl	8008f00 <__errno>
 800257e:	2316      	movs	r3, #22
 8002580:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002582:	e7fe      	b.n	8002582 <_exit+0xa>

08002584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002584:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	1e16      	subs	r6, r2, #0
 8002588:	dd07      	ble.n	800259a <_read+0x16>
 800258a:	460c      	mov	r4, r1
 800258c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800258e:	f3af 8000 	nop.w
 8002592:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	42a5      	cmp	r5, r4
 8002598:	d1f9      	bne.n	800258e <_read+0xa>
  }

  return len;
}
 800259a:	4630      	mov	r0, r6
 800259c:	bd70      	pop	{r4, r5, r6, pc}
 800259e:	bf00      	nop

080025a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	1e16      	subs	r6, r2, #0
 80025a4:	dd07      	ble.n	80025b6 <_write+0x16>
 80025a6:	460c      	mov	r4, r1
 80025a8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80025aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80025ae:	f7fe fc35 	bl	8000e1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	42a5      	cmp	r5, r4
 80025b4:	d1f9      	bne.n	80025aa <_write+0xa>
  }
  return len;
}
 80025b6:	4630      	mov	r0, r6
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	bf00      	nop

080025bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80025c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80025c8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80025ca:	604b      	str	r3, [r1, #4]
}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80025d0:	2001      	movs	r0, #1
 80025d2:	4770      	bx	lr

080025d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80025d4:	2000      	movs	r0, #0
 80025d6:	4770      	bx	lr

080025d8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	490d      	ldr	r1, [pc, #52]	@ (8002610 <_sbrk+0x38>)
{
 80025da:	4603      	mov	r3, r0
 80025dc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025de:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <_sbrk+0x3c>)
 80025e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002618 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80025e2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80025e6:	b120      	cbz	r0, 80025f2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e8:	4403      	add	r3, r0
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d807      	bhi.n	80025fe <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80025ee:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80025f0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80025f2:	4c0a      	ldr	r4, [pc, #40]	@ (800261c <_sbrk+0x44>)
 80025f4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4403      	add	r3, r0
 80025f8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80025fa:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80025fc:	d9f7      	bls.n	80025ee <_sbrk+0x16>
    errno = ENOMEM;
 80025fe:	f006 fc7f 	bl	8008f00 <__errno>
 8002602:	220c      	movs	r2, #12
 8002604:	4603      	mov	r3, r0
    return (void *)-1;
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bd10      	pop	{r4, pc}
 800260e:	bf00      	nop
 8002610:	20000520 	.word	0x20000520
 8002614:	2000c000 	.word	0x2000c000
 8002618:	00000400 	.word	0x00000400
 800261c:	20003ce0 	.word	0x20003ce0

08002620 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <MX_UART4_Init>:
  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 9600;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002624:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 9600;
 8002626:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800262a:	220c      	movs	r2, #12
{
 800262c:	b510      	push	{r4, lr}
  huart4.Instance = UART4;
 800262e:	4809      	ldr	r0, [pc, #36]	@ (8002654 <MX_UART4_Init+0x30>)
 8002630:	4c09      	ldr	r4, [pc, #36]	@ (8002658 <MX_UART4_Init+0x34>)
  huart4.Init.BaudRate = 9600;
 8002632:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002636:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Instance = UART4;
 800263a:	6004      	str	r4, [r0, #0]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800263c:	6142      	str	r2, [r0, #20]
 800263e:	6183      	str	r3, [r0, #24]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002642:	f003 f9f1 	bl	8005a28 <HAL_UART_Init>
 8002646:	b900      	cbnz	r0, 800264a <MX_UART4_Init+0x26>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002648:	bd10      	pop	{r4, pc}
 800264a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800264e:	f7ff ba47 	b.w	8001ae0 <Error_Handler>
 8002652:	bf00      	nop
 8002654:	20000600 	.word	0x20000600
 8002658:	40004c00 	.word	0x40004c00

0800265c <MX_USART1_UART_Init>:
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265c:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 800265e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002662:	220c      	movs	r2, #12
{
 8002664:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002666:	4809      	ldr	r0, [pc, #36]	@ (800268c <MX_USART1_UART_Init+0x30>)
 8002668:	4c09      	ldr	r4, [pc, #36]	@ (8002690 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 800266a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 800266e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Instance = USART1;
 8002672:	6004      	str	r4, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002674:	6142      	str	r2, [r0, #20]
 8002676:	6183      	str	r3, [r0, #24]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800267a:	f003 f9d5 	bl	8005a28 <HAL_UART_Init>
 800267e:	b900      	cbnz	r0, 8002682 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002680:	bd10      	pop	{r4, pc}
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002686:	f7ff ba2b 	b.w	8001ae0 <Error_Handler>
 800268a:	bf00      	nop
 800268c:	200005b8 	.word	0x200005b8
 8002690:	40013800 	.word	0x40013800

08002694 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002694:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 9600;
 8002696:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269a:	220c      	movs	r2, #12
{
 800269c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800269e:	4809      	ldr	r0, [pc, #36]	@ (80026c4 <MX_USART2_UART_Init+0x30>)
 80026a0:	4c09      	ldr	r4, [pc, #36]	@ (80026c8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 80026a2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Instance = USART2;
 80026aa:	6004      	str	r4, [r0, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ac:	6142      	str	r2, [r0, #20]
 80026ae:	6183      	str	r3, [r0, #24]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026b2:	f003 f9b9 	bl	8005a28 <HAL_UART_Init>
 80026b6:	b900      	cbnz	r0, 80026ba <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80026be:	f7ff ba0f 	b.w	8001ae0 <Error_Handler>
 80026c2:	bf00      	nop
 80026c4:	20000570 	.word	0x20000570
 80026c8:	40004400 	.word	0x40004400

080026cc <MX_USART3_UART_Init>:
  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026cc:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 80026ce:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d2:	220c      	movs	r2, #12
{
 80026d4:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 80026d6:	4809      	ldr	r0, [pc, #36]	@ (80026fc <MX_USART3_UART_Init+0x30>)
 80026d8:	4c09      	ldr	r4, [pc, #36]	@ (8002700 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 80026da:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026de:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Instance = USART3;
 80026e2:	6004      	str	r4, [r0, #0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026e4:	6142      	str	r2, [r0, #20]
 80026e6:	6183      	str	r3, [r0, #24]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026ea:	f003 f99d 	bl	8005a28 <HAL_UART_Init>
 80026ee:	b900      	cbnz	r0, 80026f2 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f0:	bd10      	pop	{r4, pc}
 80026f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80026f6:	f7ff b9f3 	b.w	8001ae0 <Error_Handler>
 80026fa:	bf00      	nop
 80026fc:	20000528 	.word	0x20000528
 8002700:	40004800 	.word	0x40004800

08002704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART4)
 8002708:	4a6c      	ldr	r2, [pc, #432]	@ (80028bc <HAL_UART_MspInit+0x1b8>)
 800270a:	6803      	ldr	r3, [r0, #0]
{
 800270c:	b08c      	sub	sp, #48	@ 0x30
  if(uartHandle->Instance==UART4)
 800270e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002714:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  if(uartHandle->Instance==UART4)
 8002718:	d03c      	beq.n	8002794 <HAL_UART_MspInit+0x90>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800271a:	4a69      	ldr	r2, [pc, #420]	@ (80028c0 <HAL_UART_MspInit+0x1bc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d06b      	beq.n	80027f8 <HAL_UART_MspInit+0xf4>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002720:	4a68      	ldr	r2, [pc, #416]	@ (80028c4 <HAL_UART_MspInit+0x1c0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f000 809a 	beq.w	800285c <HAL_UART_MspInit+0x158>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002728:	4a67      	ldr	r2, [pc, #412]	@ (80028c8 <HAL_UART_MspInit+0x1c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d001      	beq.n	8002732 <HAL_UART_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800272e:	b00c      	add	sp, #48	@ 0x30
 8002730:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8002732:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002734:	f44f 6680 	mov.w	r6, #1024	@ 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 8002738:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800273a:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800273c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002740:	61da      	str	r2, [r3, #28]
 8002742:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	a908      	add	r1, sp, #32
    __HAL_RCC_USART3_CLK_ENABLE();
 8002746:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800274a:	9206      	str	r2, [sp, #24]
 800274c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002750:	485f      	ldr	r0, [pc, #380]	@ (80028d0 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	f042 0208 	orr.w	r2, r2, #8
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800275a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002764:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	9a07      	ldr	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002768:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f000 fec1 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800276e:	2300      	movs	r3, #0
 8002770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	a908      	add	r1, sp, #32
 8002776:	4856      	ldr	r0, [pc, #344]	@ (80028d0 <HAL_UART_MspInit+0x1cc>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002778:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f000 feb7 	bl	80034f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002782:	4622      	mov	r2, r4
 8002784:	2027      	movs	r0, #39	@ 0x27
 8002786:	2105      	movs	r1, #5
 8002788:	f000 fb26 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800278c:	2027      	movs	r0, #39	@ 0x27
 800278e:	f000 fb69 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 8002792:	e7cc      	b.n	800272e <HAL_UART_MspInit+0x2a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002794:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002796:	f44f 6680 	mov.w	r6, #1024	@ 0x400
    __HAL_RCC_UART4_CLK_ENABLE();
 800279a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800279c:	2702      	movs	r7, #2
    __HAL_RCC_UART4_CLK_ENABLE();
 800279e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	a908      	add	r1, sp, #32
    __HAL_RCC_UART4_CLK_ENABLE();
 80027a8:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	4848      	ldr	r0, [pc, #288]	@ (80028d4 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	f042 0210 	orr.w	r2, r2, #16
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027bc:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ca:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027cc:	f000 fe90 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d6:	a908      	add	r1, sp, #32
 80027d8:	483e      	ldr	r0, [pc, #248]	@ (80028d4 <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027da:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f000 fe86 	bl	80034f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80027e4:	4622      	mov	r2, r4
 80027e6:	2105      	movs	r1, #5
 80027e8:	2034      	movs	r0, #52	@ 0x34
 80027ea:	f000 faf5 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027ee:	2034      	movs	r0, #52	@ 0x34
 80027f0:	f000 fb38 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 80027f4:	b00c      	add	sp, #48	@ 0x30
 80027f6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f8:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fa:	f44f 7600 	mov.w	r6, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fe:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002800:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8002802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002806:	619a      	str	r2, [r3, #24]
 8002808:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	a908      	add	r1, sp, #32
    __HAL_RCC_USART1_CLK_ENABLE();
 800280c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002810:	9202      	str	r2, [sp, #8]
 8002812:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	4830      	ldr	r0, [pc, #192]	@ (80028d8 <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	f042 0204 	orr.w	r2, r2, #4
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002820:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282e:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f000 fe5e 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002834:	2300      	movs	r3, #0
 8002836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	a908      	add	r1, sp, #32
 800283c:	4826      	ldr	r0, [pc, #152]	@ (80028d8 <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800283e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f000 fe54 	bl	80034f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002848:	4622      	mov	r2, r4
 800284a:	2105      	movs	r1, #5
 800284c:	2025      	movs	r0, #37	@ 0x25
 800284e:	f000 fac3 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002852:	2025      	movs	r0, #37	@ 0x25
 8002854:	f000 fb06 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 8002858:	b00c      	add	sp, #48	@ 0x30
 800285a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800285e:	2604      	movs	r6, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002860:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002862:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8002864:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002868:	61da      	str	r2, [r3, #28]
 800286a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	a908      	add	r1, sp, #32
    __HAL_RCC_USART2_CLK_ENABLE();
 800286e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002872:	9204      	str	r2, [sp, #16]
 8002874:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	4817      	ldr	r0, [pc, #92]	@ (80028d8 <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	f042 0204 	orr.w	r2, r2, #4
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002882:	e9cd 6708 	strd	r6, r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002890:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f000 fe2d 	bl	80034f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002896:	2300      	movs	r3, #0
 8002898:	2208      	movs	r2, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	a908      	add	r1, sp, #32
 800289c:	480e      	ldr	r0, [pc, #56]	@ (80028d8 <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800289e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f000 fe24 	bl	80034f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028a8:	4622      	mov	r2, r4
 80028aa:	2105      	movs	r1, #5
 80028ac:	2026      	movs	r0, #38	@ 0x26
 80028ae:	f000 fa93 	bl	8002dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028b2:	2026      	movs	r0, #38	@ 0x26
 80028b4:	f000 fad6 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 80028b8:	b00c      	add	sp, #48	@ 0x30
 80028ba:	bdd0      	pop	{r4, r6, r7, pc}
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40004800 	.word	0x40004800
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40010800 	.word	0x40010800

080028dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028dc:	f7ff fea0 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480b      	ldr	r0, [pc, #44]	@ (8002910 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e2:	490c      	ldr	r1, [pc, #48]	@ (8002914 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a09      	ldr	r2, [pc, #36]	@ (800291c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028f8:	4c09      	ldr	r4, [pc, #36]	@ (8002920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f006 fb01 	bl	8008f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7ff f8bf 	bl	8001a8c <main>
  bx lr
 800290e:	4770      	bx	lr
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002918:	0800b1c0 	.word	0x0800b1c0
  ldr r2, =_sbss
 800291c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002920:	20003cdc 	.word	0x20003cdc

08002924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC1_2_IRQHandler>
	...

08002928 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002928:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <HAL_Init+0x20>)
{
 800292a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	f043 0310 	orr.w	r3, r3, #16
 8002934:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002936:	f000 fa31 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293a:	200f      	movs	r0, #15
 800293c:	f7ff fd7e 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002940:	f7ff fd54 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002944:	2000      	movs	r0, #0
 8002946:	bd08      	pop	{r3, pc}
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800294c:	4a03      	ldr	r2, [pc, #12]	@ (800295c <HAL_IncTick+0x10>)
 800294e:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_IncTick+0x14>)
 8002950:	6811      	ldr	r1, [r2, #0]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	440b      	add	r3, r1
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000648 	.word	0x20000648
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002964:	4b01      	ldr	r3, [pc, #4]	@ (800296c <HAL_GetTick+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000648 	.word	0x20000648

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fff6 	bl	8002964 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002978:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800297a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800297c:	d002      	beq.n	8002984 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <HAL_Delay+0x20>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	1b40      	subs	r0, r0, r5
 800298a:	42a0      	cmp	r0, r4
 800298c:	d3fa      	bcc.n	8002984 <HAL_Delay+0x14>
  {
  }
}
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002994:	2300      	movs	r3, #0
{ 
 8002996:	b530      	push	{r4, r5, lr}
 8002998:	b083      	sub	sp, #12
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800299a:	4a5d      	ldr	r2, [pc, #372]	@ (8002b10 <HAL_ADC_ConfigChannel+0x17c>)
  __IO uint32_t wait_loop_index = 0U;
 800299c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800299e:	6803      	ldr	r3, [r0, #0]
{ 
 80029a0:	4605      	mov	r5, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80029a2:	4293      	cmp	r3, r2
{ 
 80029a4:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80029a6:	d00c      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x2e>
 80029a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d008      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x2e>
 80029b0:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x2e>
 80029b8:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 80029bc:	4855      	ldr	r0, [pc, #340]	@ (8002b14 <HAL_ADC_ConfigChannel+0x180>)
 80029be:	f7ff f891 	bl	8001ae4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	2b11      	cmp	r3, #17
 80029c6:	d871      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x118>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80029c8:	6863      	ldr	r3, [r4, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d867      	bhi.n	8002aa0 <HAL_ADC_ConfigChannel+0x10c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80029d0:	68a3      	ldr	r3, [r4, #8]
 80029d2:	2b07      	cmp	r3, #7
 80029d4:	d858      	bhi.n	8002a88 <HAL_ADC_ConfigChannel+0xf4>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d05d      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x106>
 80029de:	2201      	movs	r2, #1
 80029e0:	f885 2024 	strb.w	r2, [r5, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029e4:	6860      	ldr	r0, [r4, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029e6:	682b      	ldr	r3, [r5, #0]
  if (sConfig->Rank < 7U)
 80029e8:	2806      	cmp	r0, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  if (sConfig->Rank < 7U)
 80029f0:	d92d      	bls.n	8002a4e <HAL_ADC_ConfigChannel+0xba>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f2:	280c      	cmp	r0, #12
 80029f4:	d860      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x124>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029f6:	f04f 0c1f 	mov.w	ip, #31
 80029fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80029fc:	3923      	subs	r1, #35	@ 0x23
 80029fe:	fa02 fe01 	lsl.w	lr, r2, r1
 8002a02:	fa0c f101 	lsl.w	r1, ip, r1
 8002a06:	ea20 0101 	bic.w	r1, r0, r1
 8002a0a:	ea41 010e 	orr.w	r1, r1, lr
 8002a0e:	6319      	str	r1, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a10:	2a09      	cmp	r2, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a12:	68a1      	ldr	r1, [r4, #8]
 8002a14:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a18:	d92b      	bls.n	8002a72 <HAL_ADC_ConfigChannel+0xde>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a1a:	2407      	movs	r4, #7
 8002a1c:	381e      	subs	r0, #30
 8002a1e:	4081      	lsls	r1, r0
 8002a20:	4084      	lsls	r4, r0
 8002a22:	68d8      	ldr	r0, [r3, #12]
 8002a24:	ea20 0004 	bic.w	r0, r0, r4
 8002a28:	4301      	orrs	r1, r0
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a2a:	f1a2 0010 	sub.w	r0, r2, #16
 8002a2e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a30:	60d9      	str	r1, [r3, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a32:	d827      	bhi.n	8002a84 <HAL_ADC_ConfigChannel+0xf0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a34:	4936      	ldr	r1, [pc, #216]	@ (8002b10 <HAL_ADC_ConfigChannel+0x17c>)
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d04c      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x140>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8002a3a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	62ab      	str	r3, [r5, #40]	@ 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a44:	2300      	movs	r3, #0
 8002a46:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002a4a:	b003      	add	sp, #12
 8002a4c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a4e:	f04f 0c1f 	mov.w	ip, #31
 8002a52:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002a54:	3905      	subs	r1, #5
 8002a56:	fa02 fe01 	lsl.w	lr, r2, r1
 8002a5a:	fa0c f101 	lsl.w	r1, ip, r1
 8002a5e:	ea20 0101 	bic.w	r1, r0, r1
 8002a62:	ea41 010e 	orr.w	r1, r1, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a66:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a68:	6359      	str	r1, [r3, #52]	@ 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a6a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8002a6e:	68a1      	ldr	r1, [r4, #8]
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a70:	d8d3      	bhi.n	8002a1a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a72:	2407      	movs	r4, #7
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	4081      	lsls	r1, r0
 8002a78:	fa04 f000 	lsl.w	r0, r4, r0
 8002a7c:	ea22 0200 	bic.w	r2, r2, r0
 8002a80:	430a      	orrs	r2, r1
 8002a82:	611a      	str	r2, [r3, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2000      	movs	r0, #0
 8002a86:	e7dd      	b.n	8002a44 <HAL_ADC_ConfigChannel+0xb0>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002a88:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8002a8c:	4821      	ldr	r0, [pc, #132]	@ (8002b14 <HAL_ADC_ConfigChannel+0x180>)
 8002a8e:	f7ff f829 	bl	8001ae4 <assert_failed>
  __HAL_LOCK(hadc);
 8002a92:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d1a1      	bne.n	80029de <HAL_ADC_ConfigChannel+0x4a>
 8002a9a:	2002      	movs	r0, #2
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002aa0:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 8002aa4:	481b      	ldr	r0, [pc, #108]	@ (8002b14 <HAL_ADC_ConfigChannel+0x180>)
 8002aa6:	f7ff f81d 	bl	8001ae4 <assert_failed>
 8002aaa:	e791      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x3c>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002aac:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8002ab0:	4818      	ldr	r0, [pc, #96]	@ (8002b14 <HAL_ADC_ConfigChannel+0x180>)
 8002ab2:	f7ff f817 	bl	8001ae4 <assert_failed>
 8002ab6:	e787      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x34>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ab8:	f04f 0c1f 	mov.w	ip, #31
 8002abc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002abe:	3941      	subs	r1, #65	@ 0x41
 8002ac0:	fa02 fe01 	lsl.w	lr, r2, r1
 8002ac4:	fa0c f101 	lsl.w	r1, ip, r1
 8002ac8:	ea20 0101 	bic.w	r1, r0, r1
 8002acc:	ea41 010e 	orr.w	r1, r1, lr
 8002ad0:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8002ad2:	e79d      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x7c>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	0209      	lsls	r1, r1, #8
 8002ad8:	d4d4      	bmi.n	8002a84 <HAL_ADC_ConfigChannel+0xf0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ada:	6899      	ldr	r1, [r3, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002adc:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ade:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002ae2:	6099      	str	r1, [r3, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae4:	d1ce      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0xf0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <HAL_ADC_ConfigChannel+0x184>)
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_ADC_ConfigChannel+0x188>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0c1      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0xf0>
            wait_loop_index--;
 8002b00:	9b01      	ldr	r3, [sp, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f9      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x16c>
 8002b0c:	e7ba      	b.n	8002a84 <HAL_ADC_ConfigChannel+0xf0>
 8002b0e:	bf00      	nop
 8002b10:	40012400 	.word	0x40012400
 8002b14:	0800abd0 	.word	0x0800abd0
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	431bde83 	.word	0x431bde83

08002b20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b22:	6803      	ldr	r3, [r0, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	07d4      	lsls	r4, r2, #31
 8002b28:	d401      	bmi.n	8002b2e <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b2a:	2000      	movs	r0, #0
}
 8002b2c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002b2e:	4604      	mov	r4, r0
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002b38:	f7ff ff14 	bl	8002964 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b3c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b3e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	07d9      	lsls	r1, r3, #31
 8002b44:	d5f1      	bpl.n	8002b2a <ADC_ConversionStop_Disable+0xa>
 8002b46:	e002      	b.n	8002b4e <ADC_ConversionStop_Disable+0x2e>
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	07db      	lsls	r3, r3, #31
 8002b4c:	d5ed      	bpl.n	8002b2a <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b4e:	f7ff ff09 	bl	8002964 <HAL_GetTick>
 8002b52:	1b43      	subs	r3, r0, r5
 8002b54:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b56:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b58:	d9f6      	bls.n	8002b48 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	07d2      	lsls	r2, r2, #31
 8002b5e:	d5f3      	bpl.n	8002b48 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002b60:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b64:	f043 0310 	orr.w	r3, r3, #16
 8002b68:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b6c:	4303      	orrs	r3, r0
 8002b6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
 8002b72:	bf00      	nop

08002b74 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f000 80d9 	beq.w	8002d2c <HAL_ADC_Init+0x1b8>
{
 8002b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b7c:	4a82      	ldr	r2, [pc, #520]	@ (8002d88 <HAL_ADC_Init+0x214>)
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	4604      	mov	r4, r0
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00c      	beq.n	8002ba0 <HAL_ADC_Init+0x2c>
 8002b86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d008      	beq.n	8002ba0 <HAL_ADC_Init+0x2c>
 8002b8e:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_ADC_Init+0x2c>
 8002b96:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002b9a:	487c      	ldr	r0, [pc, #496]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002b9c:	f7fe ffa2 	bl	8001ae4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002ba0:	6863      	ldr	r3, [r4, #4]
 8002ba2:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_Init+0x3e>
 8002ba8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002bac:	4877      	ldr	r0, [pc, #476]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002bae:	f7fe ff99 	bl	8001ae4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_Init+0x50>
 8002bba:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002bbe:	4873      	ldr	r0, [pc, #460]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002bc0:	f7fe ff90 	bl	8001ae4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002bc4:	7b23      	ldrb	r3, [r4, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d874      	bhi.n	8002cb4 <HAL_ADC_Init+0x140>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002bca:	69e3      	ldr	r3, [r4, #28]
 8002bcc:	f433 23c0 	bics.w	r3, r3, #393216	@ 0x60000
 8002bd0:	d007      	beq.n	8002be2 <HAL_ADC_Init+0x6e>
 8002bd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_Init+0x6e>
 8002bd8:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8002bdc:	486b      	ldr	r0, [pc, #428]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002bde:	f7fe ff81 	bl	8001ae4 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	b16b      	cbz	r3, 8002c02 <HAL_ADC_Init+0x8e>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002be6:	6923      	ldr	r3, [r4, #16]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f200 8098 	bhi.w	8002d20 <HAL_ADC_Init+0x1ac>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002bf0:	7d23      	ldrb	r3, [r4, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d86f      	bhi.n	8002cd6 <HAL_ADC_Init+0x162>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bf6:	b123      	cbz	r3, 8002c02 <HAL_ADC_Init+0x8e>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002bf8:	69a3      	ldr	r3, [r4, #24]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	f200 8083 	bhi.w	8002d08 <HAL_ADC_Init+0x194>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c02:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05f      	beq.n	8002cc8 <HAL_ADC_Init+0x154>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7ff ff89 	bl	8002b20 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c10:	f013 0310 	ands.w	r3, r3, #16
 8002c14:	d148      	bne.n	8002ca8 <HAL_ADC_Init+0x134>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d146      	bne.n	8002ca8 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	4e5c      	ldr	r6, [pc, #368]	@ (8002d90 <HAL_ADC_Init+0x21c>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c20:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8002c24:	f021 0102 	bic.w	r1, r1, #2
 8002c28:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c2c:	42b2      	cmp	r2, r6
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	62a1      	str	r1, [r4, #40]	@ 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c30:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c32:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c34:	d06e      	beq.n	8002d14 <HAL_ADC_Init+0x1a0>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c36:	7b26      	ldrb	r6, [r4, #12]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c38:	f894 e014 	ldrb.w	lr, [r4, #20]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c3c:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8002c40:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c42:	68a5      	ldr	r5, [r4, #8]
 8002c44:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8002c48:	d04c      	beq.n	8002ce4 <HAL_ADC_Init+0x170>
 8002c4a:	f1a5 0c01 	sub.w	ip, r5, #1
 8002c4e:	fabc fc8c 	clz	ip, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c52:	f1be 0f01 	cmp.w	lr, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c56:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002c5a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c5e:	d068      	beq.n	8002d32 <HAL_ADC_Init+0x1be>
      MODIFY_REG(hadc->Instance->CR1,
 8002c60:	6856      	ldr	r6, [r2, #4]
 8002c62:	f426 4669 	bic.w	r6, r6, #59648	@ 0xe900
 8002c66:	ea46 060c 	orr.w	r6, r6, ip
 8002c6a:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002c6c:	6897      	ldr	r7, [r2, #8]
 8002c6e:	4e49      	ldr	r6, [pc, #292]	@ (8002d94 <HAL_ADC_Init+0x220>)
 8002c70:	403e      	ands	r6, r7
 8002c72:	430e      	orrs	r6, r1
 8002c74:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c76:	2d01      	cmp	r5, #1
 8002c78:	d042      	beq.n	8002d00 <HAL_ADC_Init+0x18c>
    MODIFY_REG(hadc->Instance->SQR1,
 8002c7a:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8002c7c:	f425 0c70 	bic.w	ip, r5, #15728640	@ 0xf00000
 8002c80:	ea4c 0303 	orr.w	r3, ip, r3
 8002c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	4b43      	ldr	r3, [pc, #268]	@ (8002d98 <HAL_ADC_Init+0x224>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	d06a      	beq.n	8002d66 <HAL_ADC_Init+0x1f2>
      ADC_STATE_CLR_SET(hadc->State,
 8002c90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002c94:	f023 0312 	bic.w	r3, r3, #18
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8002ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002cb4:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8002cb8:	4834      	ldr	r0, [pc, #208]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002cba:	f7fe ff13 	bl	8001ae4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002cbe:	69e3      	ldr	r3, [r4, #28]
 8002cc0:	f433 23c0 	bics.w	r3, r3, #393216	@ 0x60000
 8002cc4:	d08d      	beq.n	8002be2 <HAL_ADC_Init+0x6e>
 8002cc6:	e784      	b.n	8002bd2 <HAL_ADC_Init+0x5e>
    HAL_ADC_MspInit(hadc);
 8002cc8:	4620      	mov	r0, r4
    ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002ccc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002cd0:	f7fd ffbe 	bl	8000c50 <HAL_ADC_MspInit>
 8002cd4:	e798      	b.n	8002c08 <HAL_ADC_Init+0x94>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002cd6:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8002cda:	482c      	ldr	r0, [pc, #176]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002cdc:	f7fe ff02 	bl	8001ae4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce0:	7d23      	ldrb	r3, [r4, #20]
 8002ce2:	e788      	b.n	8002bf6 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ce4:	f1be 0f01 	cmp.w	lr, #1
 8002ce8:	d022      	beq.n	8002d30 <HAL_ADC_Init+0x1bc>
      MODIFY_REG(hadc->Instance->CR1,
 8002cea:	6853      	ldr	r3, [r2, #4]
 8002cec:	f423 4369 	bic.w	r3, r3, #59648	@ 0xe900
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002cf6:	6895      	ldr	r5, [r2, #8]
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <HAL_ADC_Init+0x220>)
 8002cfa:	402b      	ands	r3, r5
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d00:	6923      	ldr	r3, [r4, #16]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	051b      	lsls	r3, r3, #20
 8002d06:	e7b8      	b.n	8002c7a <HAL_ADC_Init+0x106>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002d08:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8002d0c:	481f      	ldr	r0, [pc, #124]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002d0e:	f7fe fee9 	bl	8001ae4 <assert_failed>
 8002d12:	e776      	b.n	8002c02 <HAL_ADC_Init+0x8e>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d14:	f5b5 2f40 	cmp.w	r5, #786432	@ 0xc0000
 8002d18:	bf08      	it	eq
 8002d1a:	f44f 2500 	moveq.w	r5, #524288	@ 0x80000
 8002d1e:	e78a      	b.n	8002c36 <HAL_ADC_Init+0xc2>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002d20:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8002d24:	4819      	ldr	r0, [pc, #100]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002d26:	f7fe fedd 	bl	8001ae4 <assert_failed>
 8002d2a:	e761      	b.n	8002bf0 <HAL_ADC_Init+0x7c>
    return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
}
 8002d2e:	4770      	bx	lr
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d30:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d32:	b30e      	cbz	r6, 8002d78 <HAL_ADC_Init+0x204>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002d36:	f046 0620 	orr.w	r6, r6, #32
 8002d3a:	62a6      	str	r6, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d3e:	f046 0601 	orr.w	r6, r6, #1
 8002d42:	62e6      	str	r6, [r4, #44]	@ 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002d44:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d46:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002d4a:	f426 4669 	bic.w	r6, r6, #59648	@ 0xe900
 8002d4e:	ea46 060c 	orr.w	r6, r6, ip
 8002d52:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d54:	6897      	ldr	r7, [r2, #8]
 8002d56:	4e0f      	ldr	r6, [pc, #60]	@ (8002d94 <HAL_ADC_Init+0x220>)
 8002d58:	ea06 0607 	and.w	r6, r6, r7
 8002d5c:	ea46 0601 	orr.w	r6, r6, r1
 8002d60:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d62:	d188      	bne.n	8002c76 <HAL_ADC_Init+0x102>
 8002d64:	e7cc      	b.n	8002d00 <HAL_ADC_Init+0x18c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d66:	2300      	movs	r3, #0
 8002d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002d6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d6c:	f023 0303 	bic.w	r3, r3, #3
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d78:	69a6      	ldr	r6, [r4, #24]
 8002d7a:	3e01      	subs	r6, #1
 8002d7c:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8002d80:	f446 6c00 	orr.w	ip, r6, #2048	@ 0x800
 8002d84:	e7de      	b.n	8002d44 <HAL_ADC_Init+0x1d0>
 8002d86:	bf00      	nop
 8002d88:	40012400 	.word	0x40012400
 8002d8c:	0800abd0 	.word	0x0800abd0
 8002d90:	40013c00 	.word	0x40013c00
 8002d94:	ffe1f7fd 	.word	0xffe1f7fd
 8002d98:	ff1f0efe 	.word	0xff1f0efe

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002d9c:	1ec3      	subs	r3, r0, #3
 8002d9e:	2b04      	cmp	r3, #4
{
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002da4:	d80e      	bhi.n	8002dc4 <HAL_NVIC_SetPriorityGrouping+0x28>
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002daa:	4909      	ldr	r1, [pc, #36]	@ (8002dd0 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dac:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dae:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db4:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002dc0:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002dc2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002dc4:	2191      	movs	r1, #145	@ 0x91
 8002dc6:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8002dc8:	f7fe fe8c 	bl	8001ae4 <assert_failed>
 8002dcc:	e7eb      	b.n	8002da6 <HAL_NVIC_SetPriorityGrouping+0xa>
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00
 8002dd4:	0800ac08 	.word	0x0800ac08

08002dd8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002dd8:	2a0f      	cmp	r2, #15
{ 
 8002dda:	b570      	push	{r4, r5, r6, lr}
 8002ddc:	4616      	mov	r6, r2
 8002dde:	4605      	mov	r5, r0
 8002de0:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002de2:	d834      	bhi.n	8002e4e <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002de4:	2c0f      	cmp	r4, #15
 8002de6:	d82d      	bhi.n	8002e44 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HAL_NVIC_SetPriority+0x80>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	f1c3 0207 	rsb	r2, r3, #7
 8002df4:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfa:	bf28      	it	cs
 8002dfc:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	2906      	cmp	r1, #6
 8002e00:	d917      	bls.n	8002e32 <HAL_NVIC_SetPriority+0x5a>
 8002e02:	1ed9      	subs	r1, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	408b      	lsls	r3, r1
 8002e0a:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	4093      	lsls	r3, r2
 8002e14:	ea24 0303 	bic.w	r3, r4, r3
 8002e18:	408b      	lsls	r3, r1
 8002e1a:	4333      	orrs	r3, r6
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	2d00      	cmp	r5, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002e22:	db09      	blt.n	8002e38 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	f105 4560 	add.w	r5, r5, #3758096384	@ 0xe0000000
 8002e28:	f505 4561 	add.w	r5, r5, #57600	@ 0xe100
 8002e2c:	f885 3300 	strb.w	r3, [r5, #768]	@ 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e34:	4631      	mov	r1, r6
 8002e36:	e7ea      	b.n	8002e0e <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <HAL_NVIC_SetPriority+0x84>)
 8002e3a:	f005 050f 	and.w	r5, r5, #15
 8002e3e:	442a      	add	r2, r5
 8002e40:	7613      	strb	r3, [r2, #24]
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e44:	21aa      	movs	r1, #170	@ 0xaa
 8002e46:	4806      	ldr	r0, [pc, #24]	@ (8002e60 <HAL_NVIC_SetPriority+0x88>)
 8002e48:	f7fe fe4c 	bl	8001ae4 <assert_failed>
 8002e4c:	e7cc      	b.n	8002de8 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e4e:	21a9      	movs	r1, #169	@ 0xa9
 8002e50:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <HAL_NVIC_SetPriority+0x88>)
 8002e52:	f7fe fe47 	bl	8001ae4 <assert_failed>
 8002e56:	e7c5      	b.n	8002de4 <HAL_NVIC_SetPriority+0xc>
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	e000ecfc 	.word	0xe000ecfc
 8002e60:	0800ac08 	.word	0x0800ac08

08002e64 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e64:	2800      	cmp	r0, #0
 8002e66:	db08      	blt.n	8002e7a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f000 011f 	and.w	r1, r0, #31
 8002e6e:	4a05      	ldr	r2, [pc, #20]	@ (8002e84 <HAL_NVIC_EnableIRQ+0x20>)
 8002e70:	0940      	lsrs	r0, r0, #5
 8002e72:	408b      	lsls	r3, r1
 8002e74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e78:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e7a:	21bd      	movs	r1, #189	@ 0xbd
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <HAL_NVIC_EnableIRQ+0x24>)
 8002e7e:	f7fe be31 	b.w	8001ae4 <assert_failed>
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	0800ac08 	.word	0x0800ac08

08002e8c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	f000 80b0 	beq.w	8002ff2 <HAL_DMA_Init+0x166>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002e92:	6803      	ldr	r3, [r0, #0]
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <HAL_DMA_Init+0x16c>)
{
 8002e96:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	d025      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002e9e:	3214      	adds	r2, #20
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ea4:	3214      	adds	r2, #20
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002eaa:	3214      	adds	r2, #20
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01c      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002eb0:	3214      	adds	r2, #20
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002eb6:	3214      	adds	r2, #20
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d016      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ebc:	3214      	adds	r2, #20
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ec2:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00f      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002eca:	3214      	adds	r2, #20
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00c      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ed0:	3214      	adds	r2, #20
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ed6:	3214      	adds	r2, #20
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d006      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002edc:	3214      	adds	r2, #20
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <HAL_DMA_Init+0x5e>
 8002ee2:	2199      	movs	r1, #153	@ 0x99
 8002ee4:	4845      	ldr	r0, [pc, #276]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002ee6:	f7fe fdfd 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	f033 0210 	bics.w	r2, r3, #16
 8002ef0:	d165      	bne.n	8002fbe <HAL_DMA_Init+0x132>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
 8002ef8:	d003      	beq.n	8002f02 <HAL_DMA_Init+0x76>
 8002efa:	219b      	movs	r1, #155	@ 0x9b
 8002efc:	483f      	ldr	r0, [pc, #252]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002efe:	f7fe fdf1 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002f02:	68e3      	ldr	r3, [r4, #12]
 8002f04:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8002f08:	d003      	beq.n	8002f12 <HAL_DMA_Init+0x86>
 8002f0a:	219c      	movs	r1, #156	@ 0x9c
 8002f0c:	483b      	ldr	r0, [pc, #236]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002f0e:	f7fe fde9 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002f12:	6923      	ldr	r3, [r4, #16]
 8002f14:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 8002f18:	d002      	beq.n	8002f20 <HAL_DMA_Init+0x94>
 8002f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1e:	d156      	bne.n	8002fce <HAL_DMA_Init+0x142>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002f20:	6963      	ldr	r3, [r4, #20]
 8002f22:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8002f26:	d002      	beq.n	8002f2e <HAL_DMA_Init+0xa2>
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f2c:	d158      	bne.n	8002fe0 <HAL_DMA_Init+0x154>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002f2e:	69a3      	ldr	r3, [r4, #24]
 8002f30:	f033 0320 	bics.w	r3, r3, #32
 8002f34:	d003      	beq.n	8002f3e <HAL_DMA_Init+0xb2>
 8002f36:	219f      	movs	r1, #159	@ 0x9f
 8002f38:	4830      	ldr	r0, [pc, #192]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002f3a:	f7fe fdd3 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002f3e:	69e1      	ldr	r1, [r4, #28]
 8002f40:	f431 5340 	bics.w	r3, r1, #12288	@ 0x3000
 8002f44:	d004      	beq.n	8002f50 <HAL_DMA_Init+0xc4>
 8002f46:	21a0      	movs	r1, #160	@ 0xa0
 8002f48:	482c      	ldr	r0, [pc, #176]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002f4a:	f7fe fdcb 	bl	8001ae4 <assert_failed>

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4e:	69e1      	ldr	r1, [r4, #28]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <HAL_DMA_Init+0x174>)
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d929      	bls.n	8002fac <HAL_DMA_Init+0x120>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_DMA_Init+0x178>)
 8002f5a:	482b      	ldr	r0, [pc, #172]	@ (8003008 <HAL_DMA_Init+0x17c>)
 8002f5c:	4413      	add	r3, r2
 8002f5e:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DmaBaseAddress = DMA2;
 8002f62:	482a      	ldr	r0, [pc, #168]	@ (800300c <HAL_DMA_Init+0x180>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8002f68:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f6a:	2002      	movs	r0, #2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6c:	2500      	movs	r5, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	f04f 0c01 	mov.w	ip, #1
 8002f72:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f74:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8002f78:	4333      	orrs	r3, r6
 8002f7a:	68e6      	ldr	r6, [r4, #12]
 8002f7c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8002f80:	4333      	orrs	r3, r6
 8002f82:	6926      	ldr	r6, [r4, #16]
 8002f84:	6810      	ldr	r0, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 8002f86:	4333      	orrs	r3, r6
 8002f88:	6966      	ldr	r6, [r4, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f8a:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8002f8e:	4333      	orrs	r3, r6
 8002f90:	69a6      	ldr	r6, [r4, #24]
 8002f92:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 8002f96:	4333      	orrs	r3, r6
 8002f98:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002f9a:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8002f9c:	6013      	str	r3, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9e:	63a5      	str	r5, [r4, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fa0:	f884 5020 	strb.w	r5, [r4, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	f884 c021 	strb.w	ip, [r4, #33]	@ 0x21

  return HAL_OK;
 8002fa8:	4628      	mov	r0, r5
}
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fac:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_DMA_Init+0x184>)
 8002fae:	4816      	ldr	r0, [pc, #88]	@ (8003008 <HAL_DMA_Init+0x17c>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	fba0 0303 	umull	r0, r3, r0, r3
 8002fb6:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8002fb8:	4816      	ldr	r0, [pc, #88]	@ (8003014 <HAL_DMA_Init+0x188>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fba:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8002fbc:	e7d4      	b.n	8002f68 <HAL_DMA_Init+0xdc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc2:	d096      	beq.n	8002ef2 <HAL_DMA_Init+0x66>
 8002fc4:	219a      	movs	r1, #154	@ 0x9a
 8002fc6:	480d      	ldr	r0, [pc, #52]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002fc8:	f7fe fd8c 	bl	8001ae4 <assert_failed>
 8002fcc:	e791      	b.n	8002ef2 <HAL_DMA_Init+0x66>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002fce:	219d      	movs	r1, #157	@ 0x9d
 8002fd0:	480a      	ldr	r0, [pc, #40]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002fd2:	f7fe fd87 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002fd6:	6963      	ldr	r3, [r4, #20]
 8002fd8:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8002fdc:	d0a7      	beq.n	8002f2e <HAL_DMA_Init+0xa2>
 8002fde:	e7a3      	b.n	8002f28 <HAL_DMA_Init+0x9c>
 8002fe0:	219e      	movs	r1, #158	@ 0x9e
 8002fe2:	4806      	ldr	r0, [pc, #24]	@ (8002ffc <HAL_DMA_Init+0x170>)
 8002fe4:	f7fe fd7e 	bl	8001ae4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002fe8:	69a3      	ldr	r3, [r4, #24]
 8002fea:	f033 0320 	bics.w	r3, r3, #32
 8002fee:	d0a6      	beq.n	8002f3e <HAL_DMA_Init+0xb2>
 8002ff0:	e7a1      	b.n	8002f36 <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40020008 	.word	0x40020008
 8002ffc:	0800ac44 	.word	0x0800ac44
 8003000:	40020407 	.word	0x40020407
 8003004:	bffdfbf8 	.word	0xbffdfbf8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020400 	.word	0x40020400
 8003010:	bffdfff8 	.word	0xbffdfff8
 8003014:	40020000 	.word	0x40020000

08003018 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800301c:	f64f 75fe 	movw	r5, #65534	@ 0xfffe
{
 8003020:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003022:	3b01      	subs	r3, #1
 8003024:	42ab      	cmp	r3, r5
{
 8003026:	4604      	mov	r4, r0
 8003028:	4688      	mov	r8, r1
 800302a:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800302c:	d836      	bhi.n	800309c <HAL_DMA_Start_IT+0x84>

  /* Process locked */
  __HAL_LOCK(hdma);
 800302e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d00a      	beq.n	800304c <HAL_DMA_Start_IT+0x34>
 8003036:	2101      	movs	r1, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003038:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
  __HAL_LOCK(hdma);
 800303c:	f884 1020 	strb.w	r1, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003040:	428b      	cmp	r3, r1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	d005      	beq.n	8003052 <HAL_DMA_Start_IT+0x3a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003046:	2300      	movs	r3, #0
 8003048:	f884 3020 	strb.w	r3, [r4, #32]
  __HAL_LOCK(hdma);
 800304c:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }    
  return status;
}
 800304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003058:	2300      	movs	r3, #0
    __HAL_DMA_DISABLE(hdma);
 800305a:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	63a3      	str	r3, [r4, #56]	@ 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800305e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003060:	409a      	lsls	r2, r3
    __HAL_DMA_DISABLE(hdma);
 8003062:	682b      	ldr	r3, [r5, #0]
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	602b      	str	r3, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800306c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306e:	6863      	ldr	r3, [r4, #4]
  hdma->Instance->CNDTR = DataLength;
 8003070:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003072:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003074:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003076:	bf0b      	itete	eq
 8003078:	60af      	streq	r7, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800307a:	f8c5 8008 	strne.w	r8, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800307e:	f8c5 800c 	streq.w	r8, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003082:	60ef      	strne	r7, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003084:	b183      	cbz	r3, 80030a8 <HAL_DMA_Start_IT+0x90>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	f043 030e 	orr.w	r3, r3, #14
 800308c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800308e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	602b      	str	r3, [r5, #0]
}
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800309c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80030a0:	4806      	ldr	r0, [pc, #24]	@ (80030bc <HAL_DMA_Start_IT+0xa4>)
 80030a2:	f7fe fd1f 	bl	8001ae4 <assert_failed>
 80030a6:	e7c2      	b.n	800302e <HAL_DMA_Start_IT+0x16>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	f043 030a 	orr.w	r3, r3, #10
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	e7e9      	b.n	800308e <HAL_DMA_Start_IT+0x76>
 80030ba:	bf00      	nop
 80030bc:	0800ac44 	.word	0x0800ac44

080030c0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c0:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 80030c4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c6:	2a02      	cmp	r2, #2
 80030c8:	d006      	beq.n	80030d8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	2204      	movs	r2, #4
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80030ce:	2200      	movs	r2, #0
    return HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80030d6:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030d8:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030dc:	681a      	ldr	r2, [r3, #0]
  return status; 
 80030de:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	f021 010e 	bic.w	r1, r1, #14
 80030e6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80030e8:	6811      	ldr	r1, [r2, #0]
 80030ea:	f021 0101 	bic.w	r1, r1, #1
 80030ee:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030f0:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	@ 0x3c
 80030f4:	fa0c f202 	lsl.w	r2, ip, r2
 80030f8:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80030fa:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 80030fc:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003100:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <HAL_DMA_Abort_IT>:
{  
 8003108:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800310a:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{  
 800310e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003110:	2a02      	cmp	r2, #2
 8003112:	d003      	beq.n	800311c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8003116:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003118:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800311a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311c:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800311e:	4845      	ldr	r0, [pc, #276]	@ (8003234 <HAL_DMA_Abort_IT+0x12c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003120:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003122:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003124:	f021 010e 	bic.w	r1, r1, #14
 8003128:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800312a:	6811      	ldr	r1, [r2, #0]
 800312c:	f021 0101 	bic.w	r1, r1, #1
 8003130:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003132:	4941      	ldr	r1, [pc, #260]	@ (8003238 <HAL_DMA_Abort_IT+0x130>)
 8003134:	d924      	bls.n	8003180 <HAL_DMA_Abort_IT+0x78>
 8003136:	428a      	cmp	r2, r1
 8003138:	d056      	beq.n	80031e8 <HAL_DMA_Abort_IT+0xe0>
 800313a:	3114      	adds	r1, #20
 800313c:	428a      	cmp	r2, r1
 800313e:	d05f      	beq.n	8003200 <HAL_DMA_Abort_IT+0xf8>
 8003140:	3114      	adds	r1, #20
 8003142:	428a      	cmp	r2, r1
 8003144:	d05e      	beq.n	8003204 <HAL_DMA_Abort_IT+0xfc>
 8003146:	3114      	adds	r1, #20
 8003148:	428a      	cmp	r2, r1
 800314a:	d054      	beq.n	80031f6 <HAL_DMA_Abort_IT+0xee>
 800314c:	3114      	adds	r1, #20
 800314e:	428a      	cmp	r2, r1
 8003150:	d061      	beq.n	8003216 <HAL_DMA_Abort_IT+0x10e>
 8003152:	3114      	adds	r1, #20
 8003154:	428a      	cmp	r2, r1
 8003156:	d064      	beq.n	8003222 <HAL_DMA_Abort_IT+0x11a>
 8003158:	4282      	cmp	r2, r0
 800315a:	d068      	beq.n	800322e <HAL_DMA_Abort_IT+0x126>
 800315c:	f501 7167 	add.w	r1, r1, #924	@ 0x39c
 8003160:	428a      	cmp	r2, r1
 8003162:	d041      	beq.n	80031e8 <HAL_DMA_Abort_IT+0xe0>
 8003164:	3114      	adds	r1, #20
 8003166:	428a      	cmp	r2, r1
 8003168:	d04a      	beq.n	8003200 <HAL_DMA_Abort_IT+0xf8>
 800316a:	3114      	adds	r1, #20
 800316c:	428a      	cmp	r2, r1
 800316e:	d049      	beq.n	8003204 <HAL_DMA_Abort_IT+0xfc>
 8003170:	3114      	adds	r1, #20
 8003172:	428a      	cmp	r2, r1
 8003174:	bf14      	ite	ne
 8003176:	f44f 3280 	movne.w	r2, #65536	@ 0x10000
 800317a:	f44f 5280 	moveq.w	r2, #4096	@ 0x1000
 800317e:	e034      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 8003180:	428a      	cmp	r2, r1
 8003182:	d022      	beq.n	80031ca <HAL_DMA_Abort_IT+0xc2>
 8003184:	3114      	adds	r1, #20
 8003186:	428a      	cmp	r2, r1
 8003188:	d038      	beq.n	80031fc <HAL_DMA_Abort_IT+0xf4>
 800318a:	3114      	adds	r1, #20
 800318c:	428a      	cmp	r2, r1
 800318e:	d03c      	beq.n	800320a <HAL_DMA_Abort_IT+0x102>
 8003190:	3114      	adds	r1, #20
 8003192:	428a      	cmp	r2, r1
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_Abort_IT+0xe8>
 8003196:	3114      	adds	r1, #20
 8003198:	428a      	cmp	r2, r1
 800319a:	d039      	beq.n	8003210 <HAL_DMA_Abort_IT+0x108>
 800319c:	3114      	adds	r1, #20
 800319e:	428a      	cmp	r2, r1
 80031a0:	d03c      	beq.n	800321c <HAL_DMA_Abort_IT+0x114>
 80031a2:	4282      	cmp	r2, r0
 80031a4:	d040      	beq.n	8003228 <HAL_DMA_Abort_IT+0x120>
 80031a6:	f501 7167 	add.w	r1, r1, #924	@ 0x39c
 80031aa:	428a      	cmp	r2, r1
 80031ac:	d00d      	beq.n	80031ca <HAL_DMA_Abort_IT+0xc2>
 80031ae:	3114      	adds	r1, #20
 80031b0:	428a      	cmp	r2, r1
 80031b2:	d023      	beq.n	80031fc <HAL_DMA_Abort_IT+0xf4>
 80031b4:	3114      	adds	r1, #20
 80031b6:	428a      	cmp	r2, r1
 80031b8:	d027      	beq.n	800320a <HAL_DMA_Abort_IT+0x102>
 80031ba:	3114      	adds	r1, #20
 80031bc:	428a      	cmp	r2, r1
 80031be:	bf14      	ite	ne
 80031c0:	f44f 3280 	movne.w	r2, #65536	@ 0x10000
 80031c4:	f44f 5280 	moveq.w	r2, #4096	@ 0x1000
 80031c8:	e000      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 80031ca:	2201      	movs	r2, #1
 80031cc:	491b      	ldr	r1, [pc, #108]	@ (800323c <HAL_DMA_Abort_IT+0x134>)
 80031ce:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80031d0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80031d2:	2100      	movs	r1, #0
    if(hdma->XferAbortCallback != NULL)
 80031d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80031d6:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80031da:	f883 1020 	strb.w	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80031de:	b10a      	cbz	r2, 80031e4 <HAL_DMA_Abort_IT+0xdc>
      hdma->XferAbortCallback(hdma);
 80031e0:	4618      	mov	r0, r3
 80031e2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2000      	movs	r0, #0
}
 80031e6:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031e8:	2201      	movs	r2, #1
 80031ea:	4915      	ldr	r1, [pc, #84]	@ (8003240 <HAL_DMA_Abort_IT+0x138>)
 80031ec:	604a      	str	r2, [r1, #4]
 80031ee:	e7ef      	b.n	80031d0 <HAL_DMA_Abort_IT+0xc8>
 80031f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f4:	e7ea      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 80031f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031fa:	e7f6      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 80031fc:	2210      	movs	r2, #16
 80031fe:	e7e5      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 8003200:	2210      	movs	r2, #16
 8003202:	e7f2      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 8003204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003208:	e7ef      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 800320a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800320e:	e7dd      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 8003210:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003214:	e7da      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 8003216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800321a:	e7e6      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 800321c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003220:	e7d4      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 8003222:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003226:	e7e0      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 8003228:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800322c:	e7ce      	b.n	80031cc <HAL_DMA_Abort_IT+0xc4>
 800322e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003232:	e7da      	b.n	80031ea <HAL_DMA_Abort_IT+0xe2>
 8003234:	40020080 	.word	0x40020080
 8003238:	40020008 	.word	0x40020008
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400

08003244 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003244:	2204      	movs	r2, #4
{
 8003246:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003248:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800324a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800324e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003250:	408a      	lsls	r2, r1
 8003252:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003254:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003256:	d043      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x9c>
 8003258:	076a      	lsls	r2, r5, #29
 800325a:	d541      	bpl.n	80032e0 <HAL_DMA_IRQHandler+0x9c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	0691      	lsls	r1, r2, #26
 8003260:	d403      	bmi.n	800326a <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f022 0204 	bic.w	r2, r2, #4
 8003268:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800326a:	4a9c      	ldr	r2, [pc, #624]	@ (80034dc <HAL_DMA_IRQHandler+0x298>)
 800326c:	499c      	ldr	r1, [pc, #624]	@ (80034e0 <HAL_DMA_IRQHandler+0x29c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f240 8093 	bls.w	800339a <HAL_DMA_IRQHandler+0x156>
 8003274:	428b      	cmp	r3, r1
 8003276:	f000 80f1 	beq.w	800345c <HAL_DMA_IRQHandler+0x218>
 800327a:	3114      	adds	r1, #20
 800327c:	428b      	cmp	r3, r1
 800327e:	f000 80f5 	beq.w	800346c <HAL_DMA_IRQHandler+0x228>
 8003282:	3114      	adds	r1, #20
 8003284:	428b      	cmp	r3, r1
 8003286:	f000 80e4 	beq.w	8003452 <HAL_DMA_IRQHandler+0x20e>
 800328a:	3114      	adds	r1, #20
 800328c:	428b      	cmp	r3, r1
 800328e:	f000 80f8 	beq.w	8003482 <HAL_DMA_IRQHandler+0x23e>
 8003292:	3114      	adds	r1, #20
 8003294:	428b      	cmp	r3, r1
 8003296:	f000 8100 	beq.w	800349a <HAL_DMA_IRQHandler+0x256>
 800329a:	3114      	adds	r1, #20
 800329c:	428b      	cmp	r3, r1
 800329e:	f000 8105 	beq.w	80034ac <HAL_DMA_IRQHandler+0x268>
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f000 810e 	beq.w	80034c4 <HAL_DMA_IRQHandler+0x280>
 80032a8:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	f000 80d5 	beq.w	800345c <HAL_DMA_IRQHandler+0x218>
 80032b2:	3214      	adds	r2, #20
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f000 80d9 	beq.w	800346c <HAL_DMA_IRQHandler+0x228>
 80032ba:	3214      	adds	r2, #20
 80032bc:	4293      	cmp	r3, r2
 80032be:	f000 80c8 	beq.w	8003452 <HAL_DMA_IRQHandler+0x20e>
 80032c2:	3214      	adds	r2, #20
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf14      	ite	ne
 80032c8:	f44f 2380 	movne.w	r3, #262144	@ 0x40000
 80032cc:	f44f 4380 	moveq.w	r3, #16384	@ 0x4000
 80032d0:	4a84      	ldr	r2, [pc, #528]	@ (80034e4 <HAL_DMA_IRQHandler+0x2a0>)
 80032d2:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 80b2 	bne.w	8003440 <HAL_DMA_IRQHandler+0x1fc>
}
 80032dc:	bc70      	pop	{r4, r5, r6}
 80032de:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032e0:	2202      	movs	r2, #2
 80032e2:	408a      	lsls	r2, r1
 80032e4:	4222      	tst	r2, r4
 80032e6:	d03f      	beq.n	8003368 <HAL_DMA_IRQHandler+0x124>
 80032e8:	07aa      	lsls	r2, r5, #30
 80032ea:	d53d      	bpl.n	8003368 <HAL_DMA_IRQHandler+0x124>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	0691      	lsls	r1, r2, #26
 80032f0:	d406      	bmi.n	8003300 <HAL_DMA_IRQHandler+0xbc>
      hdma->State = HAL_DMA_STATE_READY;
 80032f2:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f022 020a 	bic.w	r2, r2, #10
 80032fa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80032fc:	f880 1021 	strb.w	r1, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003300:	4a76      	ldr	r2, [pc, #472]	@ (80034dc <HAL_DMA_IRQHandler+0x298>)
 8003302:	4977      	ldr	r1, [pc, #476]	@ (80034e0 <HAL_DMA_IRQHandler+0x29c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d96f      	bls.n	80033e8 <HAL_DMA_IRQHandler+0x1a4>
 8003308:	428b      	cmp	r3, r1
 800330a:	f000 80a9 	beq.w	8003460 <HAL_DMA_IRQHandler+0x21c>
 800330e:	3114      	adds	r1, #20
 8003310:	428b      	cmp	r3, r1
 8003312:	f000 8099 	beq.w	8003448 <HAL_DMA_IRQHandler+0x204>
 8003316:	3114      	adds	r1, #20
 8003318:	428b      	cmp	r3, r1
 800331a:	f000 80a9 	beq.w	8003470 <HAL_DMA_IRQHandler+0x22c>
 800331e:	3114      	adds	r1, #20
 8003320:	428b      	cmp	r3, r1
 8003322:	f000 80b1 	beq.w	8003488 <HAL_DMA_IRQHandler+0x244>
 8003326:	3114      	adds	r1, #20
 8003328:	428b      	cmp	r3, r1
 800332a:	f000 80bc 	beq.w	80034a6 <HAL_DMA_IRQHandler+0x262>
 800332e:	3114      	adds	r1, #20
 8003330:	428b      	cmp	r3, r1
 8003332:	f000 80c4 	beq.w	80034be <HAL_DMA_IRQHandler+0x27a>
 8003336:	4293      	cmp	r3, r2
 8003338:	f000 80cd 	beq.w	80034d6 <HAL_DMA_IRQHandler+0x292>
 800333c:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003340:	4293      	cmp	r3, r2
 8003342:	f000 808d 	beq.w	8003460 <HAL_DMA_IRQHandler+0x21c>
 8003346:	3214      	adds	r2, #20
 8003348:	4293      	cmp	r3, r2
 800334a:	d07d      	beq.n	8003448 <HAL_DMA_IRQHandler+0x204>
 800334c:	3214      	adds	r2, #20
 800334e:	4293      	cmp	r3, r2
 8003350:	f000 808e 	beq.w	8003470 <HAL_DMA_IRQHandler+0x22c>
 8003354:	3214      	adds	r2, #20
 8003356:	4293      	cmp	r3, r2
 8003358:	bf14      	ite	ne
 800335a:	f44f 3200 	movne.w	r2, #131072	@ 0x20000
 800335e:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 8003362:	4b60      	ldr	r3, [pc, #384]	@ (80034e4 <HAL_DMA_IRQHandler+0x2a0>)
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	e064      	b.n	8003432 <HAL_DMA_IRQHandler+0x1ee>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003368:	2208      	movs	r2, #8
 800336a:	408a      	lsls	r2, r1
 800336c:	4222      	tst	r2, r4
 800336e:	d0b5      	beq.n	80032dc <HAL_DMA_IRQHandler+0x98>
 8003370:	072a      	lsls	r2, r5, #28
 8003372:	d5b3      	bpl.n	80032dc <HAL_DMA_IRQHandler+0x98>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003374:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8003376:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003378:	f022 020e 	bic.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800337e:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8003380:	6b02      	ldr	r2, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003382:	fa03 f101 	lsl.w	r1, r3, r1
 8003386:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003388:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800338a:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 800338e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    if (hdma->XferErrorCallback != NULL)
 8003392:	2a00      	cmp	r2, #0
 8003394:	d0a2      	beq.n	80032dc <HAL_DMA_IRQHandler+0x98>
}
 8003396:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003398:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800339a:	428b      	cmp	r3, r1
 800339c:	d05c      	beq.n	8003458 <HAL_DMA_IRQHandler+0x214>
 800339e:	3114      	adds	r1, #20
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d061      	beq.n	8003468 <HAL_DMA_IRQHandler+0x224>
 80033a4:	3114      	adds	r1, #20
 80033a6:	428b      	cmp	r3, r1
 80033a8:	d050      	beq.n	800344c <HAL_DMA_IRQHandler+0x208>
 80033aa:	3114      	adds	r1, #20
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d065      	beq.n	800347c <HAL_DMA_IRQHandler+0x238>
 80033b0:	3114      	adds	r1, #20
 80033b2:	428b      	cmp	r3, r1
 80033b4:	d06e      	beq.n	8003494 <HAL_DMA_IRQHandler+0x250>
 80033b6:	3114      	adds	r1, #20
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d07a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x26e>
 80033bc:	4293      	cmp	r3, r2
 80033be:	f000 8084 	beq.w	80034ca <HAL_DMA_IRQHandler+0x286>
 80033c2:	4a49      	ldr	r2, [pc, #292]	@ (80034e8 <HAL_DMA_IRQHandler+0x2a4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d047      	beq.n	8003458 <HAL_DMA_IRQHandler+0x214>
 80033c8:	3214      	adds	r2, #20
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04c      	beq.n	8003468 <HAL_DMA_IRQHandler+0x224>
 80033ce:	3214      	adds	r2, #20
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d03b      	beq.n	800344c <HAL_DMA_IRQHandler+0x208>
 80033d4:	3214      	adds	r2, #20
 80033d6:	4293      	cmp	r3, r2
 80033d8:	bf14      	ite	ne
 80033da:	f44f 2380 	movne.w	r3, #262144	@ 0x40000
 80033de:	f44f 4380 	moveq.w	r3, #16384	@ 0x4000
 80033e2:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <HAL_DMA_IRQHandler+0x2a8>)
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	e775      	b.n	80032d4 <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033e8:	428b      	cmp	r3, r1
 80033ea:	d03b      	beq.n	8003464 <HAL_DMA_IRQHandler+0x220>
 80033ec:	3114      	adds	r1, #20
 80033ee:	428b      	cmp	r3, r1
 80033f0:	d028      	beq.n	8003444 <HAL_DMA_IRQHandler+0x200>
 80033f2:	3114      	adds	r1, #20
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d03e      	beq.n	8003476 <HAL_DMA_IRQHandler+0x232>
 80033f8:	3114      	adds	r1, #20
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d047      	beq.n	800348e <HAL_DMA_IRQHandler+0x24a>
 80033fe:	3114      	adds	r1, #20
 8003400:	428b      	cmp	r3, r1
 8003402:	d04d      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x25c>
 8003404:	3114      	adds	r1, #20
 8003406:	428b      	cmp	r3, r1
 8003408:	d056      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x274>
 800340a:	4293      	cmp	r3, r2
 800340c:	d060      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x28c>
 800340e:	4a36      	ldr	r2, [pc, #216]	@ (80034e8 <HAL_DMA_IRQHandler+0x2a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d027      	beq.n	8003464 <HAL_DMA_IRQHandler+0x220>
 8003414:	3214      	adds	r2, #20
 8003416:	4293      	cmp	r3, r2
 8003418:	d014      	beq.n	8003444 <HAL_DMA_IRQHandler+0x200>
 800341a:	3214      	adds	r2, #20
 800341c:	4293      	cmp	r3, r2
 800341e:	d02a      	beq.n	8003476 <HAL_DMA_IRQHandler+0x232>
 8003420:	3214      	adds	r2, #20
 8003422:	4293      	cmp	r3, r2
 8003424:	bf14      	ite	ne
 8003426:	f44f 3200 	movne.w	r2, #131072	@ 0x20000
 800342a:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800342e:	4b2f      	ldr	r3, [pc, #188]	@ (80034ec <HAL_DMA_IRQHandler+0x2a8>)
 8003430:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8003432:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 8003434:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    __HAL_UNLOCK(hdma);
 8003436:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800343a:	2b00      	cmp	r3, #0
 800343c:	f43f af4e 	beq.w	80032dc <HAL_DMA_IRQHandler+0x98>
}
 8003440:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003442:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003444:	2220      	movs	r2, #32
 8003446:	e7f2      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
 8003448:	2220      	movs	r2, #32
 800344a:	e78a      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800344c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003450:	e7c7      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
 8003452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003456:	e73b      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
 8003458:	2304      	movs	r3, #4
 800345a:	e7c2      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
 800345c:	2304      	movs	r3, #4
 800345e:	e737      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003460:	2202      	movs	r2, #2
 8003462:	e77e      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
 8003464:	2202      	movs	r2, #2
 8003466:	e7e2      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003468:	2340      	movs	r3, #64	@ 0x40
 800346a:	e7ba      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
 800346c:	2340      	movs	r3, #64	@ 0x40
 800346e:	e72f      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003474:	e775      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
 8003476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800347a:	e7d8      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800347c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003480:	e7af      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
 8003482:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003486:	e723      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800348c:	e769      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
 800348e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003492:	e7cc      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003494:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003498:	e7a3      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
 800349a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800349e:	e717      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034a4:	e7c3      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
 80034a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034aa:	e75a      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034b0:	e70e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
 80034b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034b6:	e794      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80034bc:	e7b7      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
 80034be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80034c2:	e74e      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034c8:	e702      	b.n	80032d0 <HAL_DMA_IRQHandler+0x8c>
 80034ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034ce:	e788      	b.n	80033e2 <HAL_DMA_IRQHandler+0x19e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d4:	e7ab      	b.n	800342e <HAL_DMA_IRQHandler+0x1ea>
 80034d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034da:	e742      	b.n	8003362 <HAL_DMA_IRQHandler+0x11e>
 80034dc:	40020080 	.word	0x40020080
 80034e0:	40020008 	.word	0x40020008
 80034e4:	40020400 	.word	0x40020400
 80034e8:	40020408 	.word	0x40020408
 80034ec:	40020000 	.word	0x40020000

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003798 <HAL_GPIO_Init+0x2a8>)
{
 80034f6:	4606      	mov	r6, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034f8:	4298      	cmp	r0, r3
{
 80034fa:	460f      	mov	r7, r1
 80034fc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034fe:	d01b      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003504:	4298      	cmp	r0, r3
 8003506:	d017      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800350c:	4298      	cmp	r0, r3
 800350e:	d013      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003510:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003514:	4298      	cmp	r0, r3
 8003516:	d00f      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800351c:	4298      	cmp	r0, r3
 800351e:	d00b      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003524:	4298      	cmp	r0, r3
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003528:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800352c:	4298      	cmp	r0, r3
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x48>
 8003530:	21bd      	movs	r1, #189	@ 0xbd
 8003532:	489a      	ldr	r0, [pc, #616]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 8003534:	f7fe fad6 	bl	8001ae4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b29a      	uxth	r2, r3
 800353c:	b11a      	cbz	r2, 8003546 <HAL_GPIO_Init+0x56>
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003542:	f0c0 8123 	bcc.w	800378c <HAL_GPIO_Init+0x29c>
 8003546:	21be      	movs	r1, #190	@ 0xbe
 8003548:	4894      	ldr	r0, [pc, #592]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 800354a:	f7fe facb 	bl	8001ae4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	2a01      	cmp	r2, #1
 8003552:	d90b      	bls.n	800356c <HAL_GPIO_Init+0x7c>
 8003554:	4b92      	ldr	r3, [pc, #584]	@ (80037a0 <HAL_GPIO_Init+0x2b0>)
 8003556:	429a      	cmp	r2, r3
 8003558:	d008      	beq.n	800356c <HAL_GPIO_Init+0x7c>
 800355a:	d864      	bhi.n	8003626 <HAL_GPIO_Init+0x136>
 800355c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003560:	429a      	cmp	r2, r3
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x7c>
 8003564:	d950      	bls.n	8003608 <HAL_GPIO_Init+0x118>
 8003566:	4b8f      	ldr	r3, [pc, #572]	@ (80037a4 <HAL_GPIO_Init+0x2b4>)
 8003568:	429a      	cmp	r2, r3
 800356a:	d152      	bne.n	8003612 <HAL_GPIO_Init+0x122>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d056      	beq.n	8003620 <HAL_GPIO_Init+0x130>
{
 8003572:	f04f 0900 	mov.w	r9, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003576:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8003798 <HAL_GPIO_Init+0x2a8>
{
 800357a:	464d      	mov	r5, r9
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800357c:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80037a8 <HAL_GPIO_Init+0x2b8>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003580:	4a8a      	ldr	r2, [pc, #552]	@ (80037ac <HAL_GPIO_Init+0x2bc>)
 8003582:	e003      	b.n	800358c <HAL_GPIO_Init+0x9c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8003584:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003586:	fa33 f105 	lsrs.w	r1, r3, r5
 800358a:	d049      	beq.n	8003620 <HAL_GPIO_Init+0x130>
    ioposition = (0x01uL << position);
 800358c:	2401      	movs	r4, #1
 800358e:	40ac      	lsls	r4, r5
    if (iocurrent == ioposition)
 8003590:	ea34 0103 	bics.w	r1, r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003594:	ea04 0803 	and.w	r8, r4, r3
    if (iocurrent == ioposition)
 8003598:	d1f4      	bne.n	8003584 <HAL_GPIO_Init+0x94>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800359a:	455e      	cmp	r6, fp
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 800359e:	4b84      	ldr	r3, [pc, #528]	@ (80037b0 <HAL_GPIO_Init+0x2c0>)
 80035a0:	429e      	cmp	r6, r3
 80035a2:	d016      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035a4:	4296      	cmp	r6, r2
 80035a6:	d014      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ac:	429e      	cmp	r6, r3
 80035ae:	d010      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035b4:	429e      	cmp	r6, r3
 80035b6:	d00c      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035bc:	429e      	cmp	r6, r3
 80035be:	d008      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035c4:	429e      	cmp	r6, r3
 80035c6:	d004      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
 80035c8:	21cd      	movs	r1, #205	@ 0xcd
 80035ca:	4874      	ldr	r0, [pc, #464]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 80035cc:	f7fe fa8a 	bl	8001ae4 <assert_failed>
 80035d0:	4a76      	ldr	r2, [pc, #472]	@ (80037ac <HAL_GPIO_Init+0x2bc>)
      switch (GPIO_Init->Mode)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b12      	cmp	r3, #18
 80035d6:	f200 80b8 	bhi.w	800374a <HAL_GPIO_Init+0x25a>
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d840      	bhi.n	8003660 <HAL_GPIO_Init+0x170>
 80035de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035e2:	00c1      	.short	0x00c1
 80035e4:	0103010a 	.word	0x0103010a
 80035e8:	003f0119 	.word	0x003f0119
 80035ec:	003f003f 	.word	0x003f003f
 80035f0:	003f003f 	.word	0x003f003f
 80035f4:	003f003f 	.word	0x003f003f
 80035f8:	003f003f 	.word	0x003f003f
 80035fc:	003f003f 	.word	0x003f003f
 8003600:	003f003f 	.word	0x003f003f
 8003604:	00f500fc 	.word	0x00f500fc
 8003608:	2a03      	cmp	r2, #3
 800360a:	d9af      	bls.n	800356c <HAL_GPIO_Init+0x7c>
 800360c:	3a11      	subs	r2, #17
 800360e:	2a01      	cmp	r2, #1
 8003610:	d9ac      	bls.n	800356c <HAL_GPIO_Init+0x7c>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003612:	21bf      	movs	r1, #191	@ 0xbf
 8003614:	4861      	ldr	r0, [pc, #388]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 8003616:	f7fe fa65 	bl	8001ae4 <assert_failed>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1a8      	bne.n	8003572 <HAL_GPIO_Init+0x82>
  }
}
 8003620:	b003      	add	sp, #12
 8003622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003626:	4b63      	ldr	r3, [pc, #396]	@ (80037b4 <HAL_GPIO_Init+0x2c4>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d09f      	beq.n	800356c <HAL_GPIO_Init+0x7c>
 800362c:	f5a3 2370 	sub.w	r3, r3, #983040	@ 0xf0000
 8003630:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003634:	429a      	cmp	r2, r3
 8003636:	d099      	beq.n	800356c <HAL_GPIO_Init+0x7c>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003638:	21bf      	movs	r1, #191	@ 0xbf
 800363a:	4858      	ldr	r0, [pc, #352]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 800363c:	f7fe fa52 	bl	8001ae4 <assert_failed>
 8003640:	e7eb      	b.n	800361a <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8003642:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003646:	428b      	cmp	r3, r1
 8003648:	f000 808c 	beq.w	8003764 <HAL_GPIO_Init+0x274>
 800364c:	f501 2170 	add.w	r1, r1, #983040	@ 0xf0000
 8003650:	428b      	cmp	r3, r1
 8003652:	f000 8087 	beq.w	8003764 <HAL_GPIO_Init+0x274>
 8003656:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800365a:	428b      	cmp	r3, r1
 800365c:	f000 8082 	beq.w	8003764 <HAL_GPIO_Init+0x274>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003660:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8003664:	f200 8089 	bhi.w	800377a <HAL_GPIO_Init+0x28a>
 8003668:	4634      	mov	r4, r6
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800366a:	00a9      	lsls	r1, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800366c:	200f      	movs	r0, #15
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	fa09 fc01 	lsl.w	ip, r9, r1
 8003674:	fa00 f101 	lsl.w	r1, r0, r1
 8003678:	ea23 0301 	bic.w	r3, r3, r1
 800367c:	ea43 030c 	orr.w	r3, r3, ip
 8003680:	6023      	str	r3, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	00d9      	lsls	r1, r3, #3
 8003686:	d57f      	bpl.n	8003788 <HAL_GPIO_Init+0x298>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003688:	f8da 1018 	ldr.w	r1, [sl, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800368c:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003690:	f041 0101 	orr.w	r1, r1, #1
 8003694:	f8ca 1018 	str.w	r1, [sl, #24]
 8003698:	f8da 1018 	ldr.w	r1, [sl, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369c:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800369e:	f001 0101 	and.w	r1, r1, #1
 80036a2:	9101      	str	r1, [sp, #4]
 80036a4:	9901      	ldr	r1, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80036a6:	f025 0103 	bic.w	r1, r5, #3
 80036aa:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80036ae:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 80036b2:	f8d1 c008 	ldr.w	ip, [r1, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036b6:	40a0      	lsls	r0, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b8:	455e      	cmp	r6, fp
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ba:	ea2c 0000 	bic.w	r0, ip, r0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036be:	d01e      	beq.n	80036fe <HAL_GPIO_Init+0x20e>
 80036c0:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80037b0 <HAL_GPIO_Init+0x2c0>
 80036c4:	4566      	cmp	r6, ip
 80036c6:	f000 80ae 	beq.w	8003826 <HAL_GPIO_Init+0x336>
 80036ca:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80037ac <HAL_GPIO_Init+0x2bc>
 80036ce:	4566      	cmp	r6, ip
 80036d0:	f000 80a3 	beq.w	800381a <HAL_GPIO_Init+0x32a>
 80036d4:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80037b8 <HAL_GPIO_Init+0x2c8>
 80036d8:	4566      	cmp	r6, ip
 80036da:	f000 80ba 	beq.w	8003852 <HAL_GPIO_Init+0x362>
 80036de:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80037bc <HAL_GPIO_Init+0x2cc>
 80036e2:	4566      	cmp	r6, ip
 80036e4:	f000 80d0 	beq.w	8003888 <HAL_GPIO_Init+0x398>
 80036e8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80037c0 <HAL_GPIO_Init+0x2d0>
 80036ec:	4566      	cmp	r6, ip
 80036ee:	bf0c      	ite	eq
 80036f0:	f04f 0c05 	moveq.w	ip, #5
 80036f4:	f04f 0c06 	movne.w	ip, #6
 80036f8:	fa0c f404 	lsl.w	r4, ip, r4
 80036fc:	4320      	orrs	r0, r4
        AFIO->EXTICR[position >> 2u] = temp;
 80036fe:	6088      	str	r0, [r1, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003700:	4830      	ldr	r0, [pc, #192]	@ (80037c4 <HAL_GPIO_Init+0x2d4>)
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003702:	02dc      	lsls	r4, r3, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8003704:	6881      	ldr	r1, [r0, #8]
 8003706:	bf4c      	ite	mi
 8003708:	ea41 0108 	orrmi.w	r1, r1, r8
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800370c:	ea21 0108 	bicpl.w	r1, r1, r8
 8003710:	6081      	str	r1, [r0, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003712:	482c      	ldr	r0, [pc, #176]	@ (80037c4 <HAL_GPIO_Init+0x2d4>)
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003714:	029c      	lsls	r4, r3, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8003716:	68c1      	ldr	r1, [r0, #12]
 8003718:	bf4c      	ite	mi
 800371a:	ea41 0108 	orrmi.w	r1, r1, r8
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800371e:	ea21 0108 	bicpl.w	r1, r1, r8
 8003722:	60c1      	str	r1, [r0, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8003724:	4827      	ldr	r0, [pc, #156]	@ (80037c4 <HAL_GPIO_Init+0x2d4>)
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003726:	039c      	lsls	r4, r3, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8003728:	6841      	ldr	r1, [r0, #4]
 800372a:	bf4c      	ite	mi
 800372c:	ea41 0108 	orrmi.w	r1, r1, r8
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003730:	ea21 0108 	bicpl.w	r1, r1, r8
 8003734:	6041      	str	r1, [r0, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003736:	4923      	ldr	r1, [pc, #140]	@ (80037c4 <HAL_GPIO_Init+0x2d4>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003738:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800373c:	680b      	ldr	r3, [r1, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800373e:	d020      	beq.n	8003782 <HAL_GPIO_Init+0x292>
          SET_BIT(EXTI->IMR, iocurrent);
 8003740:	ea43 0308 	orr.w	r3, r3, r8
 8003744:	600b      	str	r3, [r1, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	e71c      	b.n	8003584 <HAL_GPIO_Init+0x94>
      switch (GPIO_Init->Mode)
 800374a:	491f      	ldr	r1, [pc, #124]	@ (80037c8 <HAL_GPIO_Init+0x2d8>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d009      	beq.n	8003764 <HAL_GPIO_Init+0x274>
 8003750:	f67f af77 	bls.w	8003642 <HAL_GPIO_Init+0x152>
 8003754:	4917      	ldr	r1, [pc, #92]	@ (80037b4 <HAL_GPIO_Init+0x2c4>)
 8003756:	428b      	cmp	r3, r1
 8003758:	d004      	beq.n	8003764 <HAL_GPIO_Init+0x274>
 800375a:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800375e:	428b      	cmp	r3, r1
 8003760:	f47f af7e 	bne.w	8003660 <HAL_GPIO_Init+0x170>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d86a      	bhi.n	8003840 <HAL_GPIO_Init+0x350>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800376a:	2b00      	cmp	r3, #0
 800376c:	d161      	bne.n	8003832 <HAL_GPIO_Init+0x342>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800376e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003772:	f04f 0904 	mov.w	r9, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003776:	f67f af77 	bls.w	8003668 <HAL_GPIO_Init+0x178>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800377a:	00a9      	lsls	r1, r5, #2
 800377c:	3920      	subs	r1, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800377e:	1d34      	adds	r4, r6, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003780:	e774      	b.n	800366c <HAL_GPIO_Init+0x17c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003782:	ea23 0308 	bic.w	r3, r3, r8
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	e6fb      	b.n	8003584 <HAL_GPIO_Init+0x94>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	2a01      	cmp	r2, #1
 8003790:	f63f aee0 	bhi.w	8003554 <HAL_GPIO_Init+0x64>
 8003794:	e6ed      	b.n	8003572 <HAL_GPIO_Init+0x82>
 8003796:	bf00      	nop
 8003798:	40010800 	.word	0x40010800
 800379c:	0800ac7c 	.word	0x0800ac7c
 80037a0:	10210000 	.word	0x10210000
 80037a4:	10120000 	.word	0x10120000
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40011000 	.word	0x40011000
 80037b0:	40010c00 	.word	0x40010c00
 80037b4:	10310000 	.word	0x10310000
 80037b8:	40011400 	.word	0x40011400
 80037bc:	40011800 	.word	0x40011800
 80037c0:	40011c00 	.word	0x40011c00
 80037c4:	40010400 	.word	0x40010400
 80037c8:	10220000 	.word	0x10220000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e59      	subs	r1, r3, #1
 80037d0:	2902      	cmp	r1, #2
 80037d2:	d852      	bhi.n	800387a <HAL_GPIO_Init+0x38a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037d4:	f103 090c 	add.w	r9, r3, #12
          break;
 80037d8:	e742      	b.n	8003660 <HAL_GPIO_Init+0x170>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e59      	subs	r1, r3, #1
 80037de:	2902      	cmp	r1, #2
 80037e0:	d844      	bhi.n	800386c <HAL_GPIO_Init+0x37c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037e2:	f103 0904 	add.w	r9, r3, #4
          break;
 80037e6:	e73b      	b.n	8003660 <HAL_GPIO_Init+0x170>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e59      	subs	r1, r3, #1
 80037ec:	2902      	cmp	r1, #2
 80037ee:	d836      	bhi.n	800385e <HAL_GPIO_Init+0x36e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037f0:	f103 0908 	add.w	r9, r3, #8
          break;
 80037f4:	e734      	b.n	8003660 <HAL_GPIO_Init+0x170>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037f6:	f8d7 900c 	ldr.w	r9, [r7, #12]
 80037fa:	f109 33ff 	add.w	r3, r9, #4294967295
 80037fe:	2b02      	cmp	r3, #2
 8003800:	f67f af2e 	bls.w	8003660 <HAL_GPIO_Init+0x170>
 8003804:	21d5      	movs	r1, #213	@ 0xd5
 8003806:	4823      	ldr	r0, [pc, #140]	@ (8003894 <HAL_GPIO_Init+0x3a4>)
 8003808:	f7fe f96c 	bl	8001ae4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800380c:	f8d7 900c 	ldr.w	r9, [r7, #12]
          break;
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <HAL_GPIO_Init+0x3a8>)
 8003812:	e725      	b.n	8003660 <HAL_GPIO_Init+0x170>
      switch (GPIO_Init->Mode)
 8003814:	f04f 0900 	mov.w	r9, #0
 8003818:	e722      	b.n	8003660 <HAL_GPIO_Init+0x170>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800381a:	f04f 0c02 	mov.w	ip, #2
 800381e:	fa0c f404 	lsl.w	r4, ip, r4
 8003822:	4320      	orrs	r0, r4
 8003824:	e76b      	b.n	80036fe <HAL_GPIO_Init+0x20e>
 8003826:	f04f 0c01 	mov.w	ip, #1
 800382a:	fa0c f404 	lsl.w	r4, ip, r4
 800382e:	4320      	orrs	r0, r4
 8003830:	e765      	b.n	80036fe <HAL_GPIO_Init+0x20e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003832:	2b01      	cmp	r3, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003834:	f04f 0908 	mov.w	r9, #8
            GPIOx->BSRR = ioposition;
 8003838:	bf0c      	ite	eq
 800383a:	6134      	streq	r4, [r6, #16]
            GPIOx->BRR = ioposition;
 800383c:	6174      	strne	r4, [r6, #20]
 800383e:	e70f      	b.n	8003660 <HAL_GPIO_Init+0x170>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003840:	21f7      	movs	r1, #247	@ 0xf7
 8003842:	4814      	ldr	r0, [pc, #80]	@ (8003894 <HAL_GPIO_Init+0x3a4>)
 8003844:	f7fe f94e 	bl	8001ae4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <HAL_GPIO_Init+0x3a8>)
 800384c:	2b00      	cmp	r3, #0
 800384e:	d08e      	beq.n	800376e <HAL_GPIO_Init+0x27e>
 8003850:	e7ef      	b.n	8003832 <HAL_GPIO_Init+0x342>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003852:	f04f 0c03 	mov.w	ip, #3
 8003856:	fa0c f404 	lsl.w	r4, ip, r4
 800385a:	4320      	orrs	r0, r4
 800385c:	e74f      	b.n	80036fe <HAL_GPIO_Init+0x20e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800385e:	21e3      	movs	r1, #227	@ 0xe3
 8003860:	480c      	ldr	r0, [pc, #48]	@ (8003894 <HAL_GPIO_Init+0x3a4>)
 8003862:	f7fe f93f 	bl	8001ae4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <HAL_GPIO_Init+0x3a8>)
 800386a:	e7c1      	b.n	80037f0 <HAL_GPIO_Init+0x300>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800386c:	21dc      	movs	r1, #220	@ 0xdc
 800386e:	4809      	ldr	r0, [pc, #36]	@ (8003894 <HAL_GPIO_Init+0x3a4>)
 8003870:	f7fe f938 	bl	8001ae4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <HAL_GPIO_Init+0x3a8>)
 8003878:	e7b3      	b.n	80037e2 <HAL_GPIO_Init+0x2f2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800387a:	21ea      	movs	r1, #234	@ 0xea
 800387c:	4805      	ldr	r0, [pc, #20]	@ (8003894 <HAL_GPIO_Init+0x3a4>)
 800387e:	f7fe f931 	bl	8001ae4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_GPIO_Init+0x3a8>)
 8003886:	e7a5      	b.n	80037d4 <HAL_GPIO_Init+0x2e4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003888:	f04f 0c04 	mov.w	ip, #4
 800388c:	fa0c f404 	lsl.w	r4, ip, r4
 8003890:	4320      	orrs	r0, r4
 8003892:	e734      	b.n	80036fe <HAL_GPIO_Init+0x20e>
 8003894:	0800ac7c 	.word	0x0800ac7c
 8003898:	40011000 	.word	0x40011000

0800389c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038a0:	460c      	mov	r4, r1
{
 80038a2:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038a4:	b161      	cbz	r1, 80038c0 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80038a6:	2d01      	cmp	r5, #1
 80038a8:	d803      	bhi.n	80038b2 <HAL_GPIO_WritePin+0x16>

  if (PinState != GPIO_PIN_RESET)
 80038aa:	b905      	cbnz	r5, 80038ae <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ac:	0424      	lsls	r4, r4, #16
 80038ae:	6134      	str	r4, [r6, #16]
  }
}
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80038b2:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80038b6:	4805      	ldr	r0, [pc, #20]	@ (80038cc <HAL_GPIO_WritePin+0x30>)
 80038b8:	f7fe f914 	bl	8001ae4 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038bc:	6134      	str	r4, [r6, #16]
}
 80038be:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038c0:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80038c4:	4801      	ldr	r0, [pc, #4]	@ (80038cc <HAL_GPIO_WritePin+0x30>)
 80038c6:	f7fe f90d 	bl	8001ae4 <assert_failed>
 80038ca:	e7ec      	b.n	80038a6 <HAL_GPIO_WritePin+0xa>
 80038cc:	0800ac7c 	.word	0x0800ac7c

080038d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038d4:	460c      	mov	r4, r1
 80038d6:	b141      	cbz	r1, 80038ea <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038d8:	68eb      	ldr	r3, [r5, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038da:	ea04 0203 	and.w	r2, r4, r3
 80038de:	ea24 0403 	bic.w	r4, r4, r3
 80038e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80038e6:	612c      	str	r4, [r5, #16]
}
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038ea:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 80038ee:	4802      	ldr	r0, [pc, #8]	@ (80038f8 <HAL_GPIO_TogglePin+0x28>)
 80038f0:	f7fe f8f8 	bl	8001ae4 <assert_failed>
 80038f4:	e7f0      	b.n	80038d8 <HAL_GPIO_TogglePin+0x8>
 80038f6:	bf00      	nop
 80038f8:	0800ac7c 	.word	0x0800ac7c

080038fc <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003900:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003902:	6951      	ldr	r1, [r2, #20]
 8003904:	4201      	tst	r1, r0
 8003906:	d100      	bne.n	800390a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003908:	4770      	bx	lr
{
 800390a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800390c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800390e:	f7ff fff5 	bl	80038fc <HAL_GPIO_EXTI_Callback>
}
 8003912:	bd08      	pop	{r3, pc}
 8003914:	40010400 	.word	0x40010400

08003918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800391c:	460d      	mov	r5, r1
 800391e:	4681      	mov	r9, r0
 8003920:	4616      	mov	r6, r2
 8003922:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003924:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8003928:	f8d9 2000 	ldr.w	r2, [r9]
 800392c:	e001      	b.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	1c7b      	adds	r3, r7, #1
 8003930:	d113      	bne.n	800395a <I2C_WaitOnFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003932:	f1b8 0f01 	cmp.w	r8, #1
 8003936:	bf0b      	itete	eq
 8003938:	6953      	ldreq	r3, [r2, #20]
 800393a:	6994      	ldrne	r4, [r2, #24]
 800393c:	ea25 0c03 	biceq.w	ip, r5, r3
 8003940:	ea25 0c04 	bicne.w	ip, r5, r4
 8003944:	fa1f fc8c 	uxth.w	ip, ip
 8003948:	fabc fc8c 	clz	ip, ip
 800394c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003950:	45b4      	cmp	ip, r6
 8003952:	d0ec      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x16>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2000      	movs	r0, #0
}
 8003956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7ff f803 	bl	8002964 <HAL_GetTick>
 800395e:	9b08      	ldr	r3, [sp, #32]
 8003960:	1ac0      	subs	r0, r0, r3
 8003962:	42b8      	cmp	r0, r7
 8003964:	d920      	bls.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x90>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003966:	f8d9 3000 	ldr.w	r3, [r9]
 800396a:	f1b8 0f01 	cmp.w	r8, #1
 800396e:	bf0c      	ite	eq
 8003970:	695b      	ldreq	r3, [r3, #20]
 8003972:	699b      	ldrne	r3, [r3, #24]
 8003974:	ea25 0303 	bic.w	r3, r5, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	42b3      	cmp	r3, r6
 8003982:	d1d1      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003984:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003986:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003988:	f8c9 2030 	str.w	r2, [r9, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800398c:	f889 303d 	strb.w	r3, [r9, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003990:	f889 203e 	strb.w	r2, [r9, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
          return HAL_ERROR;
 8003998:	2001      	movs	r0, #1
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399a:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hi2c);
 800399e:	f889 203c 	strb.w	r2, [r9, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	f8c9 3040 	str.w	r3, [r9, #64]	@ 0x40
          return HAL_ERROR;
 80039a6:	e7d6      	b.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d1bd      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x10>
 80039ac:	e7db      	b.n	8003966 <I2C_WaitOnFlagUntilTimeout+0x4e>
 80039ae:	bf00      	nop

080039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b4:	4680      	mov	r8, r0
 80039b6:	460e      	mov	r6, r1
 80039b8:	4617      	mov	r7, r2
 80039ba:	4699      	mov	r9, r3
 80039bc:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039be:	e004      	b.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c0:	6965      	ldr	r5, [r4, #20]
 80039c2:	056a      	lsls	r2, r5, #21
 80039c4:	d409      	bmi.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2a>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	1c7b      	adds	r3, r7, #1
 80039c8:	d121      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ca:	6960      	ldr	r0, [r4, #20]
 80039cc:	ea26 0000 	bic.w	r0, r6, r0
 80039d0:	b280      	uxth	r0, r0
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d1f4      	bne.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
}
 80039d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039da:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039dc:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039e8:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ec:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	f888 103d 	strb.w	r1, [r8, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	f888 203e 	strb.w	r2, [r8, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f8:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003a04:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8003a08:	f888 303c 	strb.w	r3, [r8, #60]	@ 0x3c
 8003a0c:	e7e3      	b.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x26>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fe ffa9 	bl	8002964 <HAL_GetTick>
 8003a12:	eba0 0009 	sub.w	r0, r0, r9
 8003a16:	42b8      	cmp	r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a18:	f8d8 4000 	ldr.w	r4, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	d801      	bhi.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
 8003a1e:	2f00      	cmp	r7, #0
 8003a20:	d1d3      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	ea26 0303 	bic.w	r3, r6, r3
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0cd      	beq.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2e:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a36:	f888 203d 	strb.w	r2, [r8, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3a:	f888 303e 	strb.w	r3, [r8, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8003a48:	e7dc      	b.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
 8003a4a:	bf00      	nop

08003a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a4e:	6803      	ldr	r3, [r0, #0]
{
 8003a50:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	0654      	lsls	r4, r2, #25
 8003a56:	d424      	bmi.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 8003a58:	4606      	mov	r6, r0
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	e00d      	b.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fe ff81 	bl	8002964 <HAL_GetTick>
 8003a62:	1bc0      	subs	r0, r0, r7
 8003a64:	42a8      	cmp	r0, r5
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a66:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a68:	d800      	bhi.n	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
 8003a6a:	b91d      	cbnz	r5, 8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a6c:	695c      	ldr	r4, [r3, #20]
 8003a6e:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8003a72:	d018      	beq.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	0652      	lsls	r2, r2, #25
 8003a78:	d413      	bmi.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	06d1      	lsls	r1, r2, #27
 8003a7e:	d5ee      	bpl.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a82:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a88:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	6332      	str	r2, [r6, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a94:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8003a96:	6433      	str	r3, [r6, #64]	@ 0x40
        hi2c->State               = HAL_I2C_STATE_READY;
        hi2c->Mode                = HAL_I2C_MODE_NONE;
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
      return HAL_ERROR;
 8003a9e:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003aa2:	2000      	movs	r0, #0
}
 8003aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	6334      	str	r4, [r6, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aaa:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aae:	f886 403e 	strb.w	r4, [r6, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8003ab4:	f043 0320 	orr.w	r3, r3, #32
 8003ab8:	6433      	str	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8003aba:	e7ed      	b.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>

08003abc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	4605      	mov	r5, r0
 8003ac0:	460e      	mov	r6, r1
 8003ac2:	4617      	mov	r7, r2
 8003ac4:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac6:	e001      	b.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	1c73      	adds	r3, r6, #1
 8003aca:	d11a      	bne.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003acc:	6963      	ldr	r3, [r4, #20]
 8003ace:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8003ad2:	d114      	bne.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x42>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad4:	6960      	ldr	r0, [r4, #20]
 8003ad6:	0542      	lsls	r2, r0, #21
 8003ad8:	d5f6      	bpl.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ada:	f46f 6180 	mvn.w	r1, #1024	@ 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ade:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	632b      	str	r3, [r5, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aec:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	642b      	str	r3, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
}
 8003afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe ff2f 	bl	8002964 <HAL_GetTick>
 8003b06:	1bc0      	subs	r0, r0, r7
 8003b08:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b0a:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0c:	d801      	bhi.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
 8003b0e:	2e00      	cmp	r6, #0
 8003b10:	d1dc      	bne.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b12:	6963      	ldr	r3, [r4, #20]
 8003b14:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8003b18:	d1d8      	bne.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x10>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b1a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1c:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b1e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b22:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	642b      	str	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003b2c:	e7e2      	b.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x38>
 8003b2e:	bf00      	nop

08003b30 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	460e      	mov	r6, r1
 8003b36:	4617      	mov	r7, r2
 8003b38:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b3a:	e001      	b.n	8003b40 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	1c73      	adds	r3, r6, #1
 8003b3e:	d11a      	bne.n	8003b76 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b40:	6963      	ldr	r3, [r4, #20]
 8003b42:	f013 0304 	ands.w	r3, r3, #4
 8003b46:	d114      	bne.n	8003b72 <I2C_WaitOnBTFFlagUntilTimeout+0x42>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b48:	6960      	ldr	r0, [r4, #20]
 8003b4a:	0542      	lsls	r2, r0, #21
 8003b4c:	d5f6      	bpl.n	8003b3c <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	632b      	str	r3, [r5, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b60:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	642b      	str	r3, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
}
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003b72:	2000      	movs	r0, #0
}
 8003b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fef5 	bl	8002964 <HAL_GetTick>
 8003b7a:	1bc0      	subs	r0, r0, r7
 8003b7c:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b7e:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b80:	d801      	bhi.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
 8003b82:	2e00      	cmp	r6, #0
 8003b84:	d1dc      	bne.n	8003b40 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	f013 0304 	ands.w	r3, r3, #4
 8003b8c:	d1d8      	bne.n	8003b40 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b92:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	642b      	str	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003ba0:	e7e2      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x38>
 8003ba2:	bf00      	nop

08003ba4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	f000 812c 	beq.w	8003e02 <HAL_I2C_Init+0x25e>
{
 8003baa:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003bac:	4a96      	ldr	r2, [pc, #600]	@ (8003e08 <HAL_I2C_Init+0x264>)
 8003bae:	6803      	ldr	r3, [r0, #0]
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d008      	beq.n	8003bc8 <HAL_I2C_Init+0x24>
 8003bb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_I2C_Init+0x24>
 8003bbe:	f240 11db 	movw	r1, #475	@ 0x1db
 8003bc2:	4892      	ldr	r0, [pc, #584]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003bc4:	f7fd ff8e 	bl	8001ae4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	4a91      	ldr	r2, [pc, #580]	@ (8003e10 <HAL_I2C_Init+0x26c>)
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f200 80ff 	bhi.w	8003dd2 <HAL_I2C_Init+0x22e>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	f433 4380 	bics.w	r3, r3, #16384	@ 0x4000
 8003bda:	f040 80d8 	bne.w	8003d8e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003bde:	68e3      	ldr	r3, [r4, #12]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	f080 80dd 	bcs.w	8003da2 <HAL_I2C_Init+0x1fe>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bf2:	d004      	beq.n	8003bfe <HAL_I2C_Init+0x5a>
 8003bf4:	f240 11df 	movw	r1, #479	@ 0x1df
 8003bf8:	4884      	ldr	r0, [pc, #528]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003bfa:	f7fd ff73 	bl	8001ae4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003bfe:	6963      	ldr	r3, [r4, #20]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f200 80d4 	bhi.w	8003dae <HAL_I2C_Init+0x20a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003c06:	69a3      	ldr	r3, [r4, #24]
 8003c08:	f033 03fe 	bics.w	r3, r3, #254	@ 0xfe
 8003c0c:	f040 80d9 	bne.w	8003dc2 <HAL_I2C_Init+0x21e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003c10:	69e3      	ldr	r3, [r4, #28]
 8003c12:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
 8003c16:	d004      	beq.n	8003c22 <HAL_I2C_Init+0x7e>
 8003c18:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8003c1c:	487b      	ldr	r0, [pc, #492]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003c1e:	f7fd ff61 	bl	8001ae4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003c22:	6a23      	ldr	r3, [r4, #32]
 8003c24:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8003c28:	f040 809f 	bne.w	8003d6a <HAL_I2C_Init+0x1c6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003c30:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a4 	beq.w	8003d82 <HAL_I2C_Init+0x1de>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3a:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c50:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c58:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c5a:	f000 ff57 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	4a6c      	ldr	r2, [pc, #432]	@ (8003e14 <HAL_I2C_Init+0x270>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d84f      	bhi.n	8003d06 <HAL_I2C_Init+0x162>
 8003c66:	4a6c      	ldr	r2, [pc, #432]	@ (8003e18 <HAL_I2C_Init+0x274>)
 8003c68:	4290      	cmp	r0, r2
 8003c6a:	f240 80b0 	bls.w	8003dce <HAL_I2C_Init+0x22a>
  freqrange = I2C_FREQRANGE(pclk1);
 8003c6e:	4d6b      	ldr	r5, [pc, #428]	@ (8003e1c <HAL_I2C_Init+0x278>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c70:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8003c72:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c76:	1e43      	subs	r3, r0, #1
 8003c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c7c:	f640 7cfc 	movw	ip, #4092	@ 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c80:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003c82:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c84:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c86:	3101      	adds	r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c88:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8003c8c:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003c90:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c92:	6a10      	ldr	r0, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c94:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c96:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8003c9a:	4301      	orrs	r1, r0
 8003c9c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c9e:	69d1      	ldr	r1, [r2, #28]
 8003ca0:	ea13 0f0c 	tst.w	r3, ip
 8003ca4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003ca8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003cac:	f040 8097 	bne.w	8003dde <HAL_I2C_Init+0x23a>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb6:	6811      	ldr	r1, [r2, #0]
 8003cb8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003cbc:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc6:	6891      	ldr	r1, [r2, #8]
 8003cc8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003ccc:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8003cd0:	4303      	orrs	r3, r0
 8003cd2:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cda:	68d0      	ldr	r0, [r2, #12]
 8003cdc:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8003ce0:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003cea:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf6:	6421      	str	r1, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfc:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003d02:	4608      	mov	r0, r1
}
 8003d04:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d06:	4a46      	ldr	r2, [pc, #280]	@ (8003e20 <HAL_I2C_Init+0x27c>)
 8003d08:	4290      	cmp	r0, r2
 8003d0a:	d960      	bls.n	8003dce <HAL_I2C_Init+0x22a>
  freqrange = I2C_FREQRANGE(pclk1);
 8003d0c:	4a43      	ldr	r2, [pc, #268]	@ (8003e1c <HAL_I2C_Init+0x278>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d0e:	4d45      	ldr	r5, [pc, #276]	@ (8003e24 <HAL_I2C_Init+0x280>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003d10:	fba2 2c00 	umull	r2, ip, r2, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d14:	f44f 7296 	mov.w	r2, #300	@ 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003d18:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1c:	fb02 f101 	mul.w	r1, r2, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d20:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d22:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d26:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d28:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d2a:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8003d2e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8003d32:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d34:	6a15      	ldr	r5, [r2, #32]
 8003d36:	3101      	adds	r1, #1
 8003d38:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8003d3c:	4329      	orrs	r1, r5
 8003d3e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d40:	69d1      	ldr	r1, [r2, #28]
 8003d42:	68a5      	ldr	r5, [r4, #8]
 8003d44:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003d48:	3801      	subs	r0, #1
 8003d4a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	d148      	bne.n	8003de4 <HAL_I2C_Init+0x240>
 8003d52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04c      	beq.n	8003dfe <HAL_I2C_Init+0x25a>
 8003d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d68:	e7a3      	b.n	8003cb2 <HAL_I2C_Init+0x10e>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003d6a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8003d6e:	4827      	ldr	r0, [pc, #156]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003d70:	f7fd feb8 	bl	8001ae4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d74:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003d78:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f af5c 	bne.w	8003c3a <HAL_I2C_Init+0x96>
    HAL_I2C_MspInit(hi2c);
 8003d82:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003d84:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003d88:	f7fd f956 	bl	8001038 <HAL_I2C_MspInit>
 8003d8c:	e755      	b.n	8003c3a <HAL_I2C_Init+0x96>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003d8e:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8003d92:	481e      	ldr	r0, [pc, #120]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003d94:	f7fd fea6 	bl	8001ae4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003d98:	68e3      	ldr	r3, [r4, #12]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	f4ff af23 	bcc.w	8003be8 <HAL_I2C_Init+0x44>
 8003da2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003da6:	4819      	ldr	r0, [pc, #100]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003da8:	f7fd fe9c 	bl	8001ae4 <assert_failed>
 8003dac:	e71c      	b.n	8003be8 <HAL_I2C_Init+0x44>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003dae:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003db2:	4816      	ldr	r0, [pc, #88]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003db4:	f7fd fe96 	bl	8001ae4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003db8:	69a3      	ldr	r3, [r4, #24]
 8003dba:	f033 03fe 	bics.w	r3, r3, #254	@ 0xfe
 8003dbe:	f43f af27 	beq.w	8003c10 <HAL_I2C_Init+0x6c>
 8003dc2:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8003dc6:	4811      	ldr	r0, [pc, #68]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003dc8:	f7fd fe8c 	bl	8001ae4 <assert_failed>
 8003dcc:	e720      	b.n	8003c10 <HAL_I2C_Init+0x6c>
    return HAL_ERROR;
 8003dce:	2001      	movs	r0, #1
}
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003dd2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8003dd6:	480d      	ldr	r0, [pc, #52]	@ (8003e0c <HAL_I2C_Init+0x268>)
 8003dd8:	f7fd fe84 	bl	8001ae4 <assert_failed>
 8003ddc:	e6fa      	b.n	8003bd4 <HAL_I2C_Init+0x30>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	e766      	b.n	8003cb2 <HAL_I2C_Init+0x10e>
 8003de4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	b113      	cbz	r3, 8003dfe <HAL_I2C_Init+0x25a>
 8003df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dfc:	e759      	b.n	8003cb2 <HAL_I2C_Init+0x10e>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e757      	b.n	8003cb2 <HAL_I2C_Init+0x10e>
    return HAL_ERROR;
 8003e02:	2001      	movs	r0, #1
}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40005400 	.word	0x40005400
 8003e0c:	0800acb8 	.word	0x0800acb8
 8003e10:	00061a7f 	.word	0x00061a7f
 8003e14:	000186a0 	.word	0x000186a0
 8003e18:	001e847f 	.word	0x001e847f
 8003e1c:	431bde83 	.word	0x431bde83
 8003e20:	003d08ff 	.word	0x003d08ff
 8003e24:	10624dd3 	.word	0x10624dd3

08003e28 <HAL_I2C_Master_Transmit>:
{
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	b084      	sub	sp, #16
 8003e30:	4698      	mov	r8, r3
 8003e32:	460f      	mov	r7, r1
 8003e34:	4691      	mov	r9, r2
 8003e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7fe fd94 	bl	8002964 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d004      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x26>
      return HAL_BUSY;
 8003e44:	2702      	movs	r7, #2
}
 8003e46:	4638      	mov	r0, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4e:	4605      	mov	r5, r0
 8003e50:	9000      	str	r0, [sp, #0]
 8003e52:	2319      	movs	r3, #25
 8003e54:	2201      	movs	r2, #1
 8003e56:	4620      	mov	r0, r4
 8003e58:	4967      	ldr	r1, [pc, #412]	@ (8003ff8 <HAL_I2C_Master_Transmit+0x1d0>)
 8003e5a:	f7ff fd5d 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x1c>
    __HAL_LOCK(hi2c);
 8003e62:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d0ec      	beq.n	8003e44 <HAL_I2C_Master_Transmit+0x1c>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	07d2      	lsls	r2, r2, #31
 8003e76:	f140 8093 	bpl.w	8003fa0 <HAL_I2C_Master_Transmit+0x178>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e7a:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e7c:	f04f 0c21 	mov.w	ip, #33	@ 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e80:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e88:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e8a:	f884 c03d 	strb.w	ip, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e8e:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e92:	6421      	str	r1, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8003e94:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e98:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e9a:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
 8003e9e:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003ea0:	8522      	strh	r2, [r4, #40]	@ 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ea2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 8003ea4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ea8:	2a08      	cmp	r2, #8
 8003eaa:	d006      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x92>
 8003eac:	2a01      	cmp	r2, #1
 8003eae:	d004      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x92>
 8003eb0:	428a      	cmp	r2, r1
 8003eb2:	d002      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eb4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003eb6:	2a12      	cmp	r2, #18
 8003eb8:	d103      	bne.n	8003ec2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	4633      	mov	r3, r6
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eca:	4620      	mov	r0, r4
 8003ecc:	9500      	str	r5, [sp, #0]
 8003ece:	f7ff fd23 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	f040 8082 	bne.w	8003fdc <HAL_I2C_Master_Transmit+0x1b4>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed8:	6923      	ldr	r3, [r4, #16]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eda:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee0:	d163      	bne.n	8003faa <HAL_I2C_Master_Transmit+0x182>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
 8003ee6:	6117      	str	r7, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee8:	462b      	mov	r3, r5
 8003eea:	4632      	mov	r2, r6
 8003eec:	4620      	mov	r0, r4
 8003eee:	4943      	ldr	r1, [pc, #268]	@ (8003ffc <HAL_I2C_Master_Transmit+0x1d4>)
 8003ef0:	f7ff fd5e 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d16b      	bne.n	8003fd2 <HAL_I2C_Master_Transmit+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	9003      	str	r0, [sp, #12]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	9203      	str	r2, [sp, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003f08:	e03a      	b.n	8003f80 <HAL_I2C_Master_Transmit+0x158>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff fdd4 	bl	8003abc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d159      	bne.n	8003fcc <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f18:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8003f1c:	f8d4 e000 	ldr.w	lr, [r4]
 8003f20:	46c4      	mov	ip, r8
 8003f22:	f81c ab01 	ldrb.w	sl, [ip], #1
      hi2c->XferSize--;
 8003f26:	f8b4 9028 	ldrh.w	r9, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2a:	f8ce a010 	str.w	sl, [lr, #16]
      hi2c->pBuffPtr++;
 8003f2e:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003f32:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f36:	f109 33ff 	add.w	r3, r9, #4294967295
      hi2c->XferCount--;
 8003f3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f3e:	fa1f fc8c 	uxth.w	ip, ip
 8003f42:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f46:	f8de c014 	ldr.w	ip, [lr, #20]
      hi2c->XferSize--;
 8003f4a:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4c:	f01c 0f04 	tst.w	ip, #4
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	462a      	mov	r2, r5
 8003f52:	4631      	mov	r1, r6
 8003f54:	4620      	mov	r0, r4
      hi2c->XferSize--;
 8003f56:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f58:	d00f      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x152>
 8003f5a:	b173      	cbz	r3, 8003f7a <HAL_I2C_Master_Transmit+0x152>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f5c:	f898 3001 	ldrb.w	r3, [r8, #1]
        hi2c->XferSize--;
 8003f60:	f1a9 0902 	sub.w	r9, r9, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	f8ce 3010 	str.w	r3, [lr, #16]
        hi2c->pBuffPtr++;
 8003f68:	f108 0302 	add.w	r3, r8, #2
 8003f6c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003f6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f70:	f8a4 9028 	strh.w	r9, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	f7ff fdd9 	bl	8003b30 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f7e:	bb28      	cbnz	r0, 8003fcc <HAL_I2C_Master_Transmit+0x1a4>
    while (hi2c->XferSize > 0U)
 8003f80:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1c1      	bne.n	8003f0a <HAL_I2C_Master_Transmit+0xe2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	680a      	ldr	r2, [r1, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003f92:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003f9e:	e752      	b.n	8003e46 <HAL_I2C_Master_Transmit+0x1e>
      __HAL_I2C_ENABLE(hi2c);
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e767      	b.n	8003e7a <HAL_I2C_Master_Transmit+0x52>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003faa:	11fb      	asrs	r3, r7, #7
 8003fac:	f003 0306 	and.w	r3, r3, #6
 8003fb0:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8003fb4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	4632      	mov	r2, r6
 8003fbc:	4910      	ldr	r1, [pc, #64]	@ (8004000 <HAL_I2C_Master_Transmit+0x1d8>)
 8003fbe:	f7ff fcf7 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc2:	b930      	cbnz	r0, 8003fd2 <HAL_I2C_Master_Transmit+0x1aa>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b2ff      	uxtb	r7, r7
 8003fc8:	611f      	str	r7, [r3, #16]
 8003fca:	e78d      	b.n	8003ee8 <HAL_I2C_Master_Transmit+0xc0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d00c      	beq.n	8003fec <HAL_I2C_Master_Transmit+0x1c4>
      return HAL_ERROR;
 8003fd2:	2701      	movs	r7, #1
}
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	b004      	add	sp, #16
 8003fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	05db      	lsls	r3, r3, #23
 8003fe2:	d5f6      	bpl.n	8003fd2 <HAL_I2C_Master_Transmit+0x1aa>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fe8:	6423      	str	r3, [r4, #64]	@ 0x40
 8003fea:	e7f2      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e7ec      	b.n	8003fd2 <HAL_I2C_Master_Transmit+0x1aa>
 8003ff8:	00100002 	.word	0x00100002
 8003ffc:	00010002 	.word	0x00010002
 8004000:	00010008 	.word	0x00010008

08004004 <HAL_I2C_Master_Receive>:
{
 8004004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = 0U;
 8004008:	2400      	movs	r4, #0
{
 800400a:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 800400c:	9402      	str	r4, [sp, #8]
{
 800400e:	4604      	mov	r4, r0
 8004010:	4698      	mov	r8, r3
 8004012:	460f      	mov	r7, r1
 8004014:	4691      	mov	r9, r2
 8004016:	9d10      	ldr	r5, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7fe fca4 	bl	8002964 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800401c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004020:	2b20      	cmp	r3, #32
 8004022:	d004      	beq.n	800402e <HAL_I2C_Master_Receive+0x2a>
      return HAL_BUSY;
 8004024:	2702      	movs	r7, #2
}
 8004026:	4638      	mov	r0, r7
 8004028:	b008      	add	sp, #32
 800402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402e:	4606      	mov	r6, r0
 8004030:	9000      	str	r0, [sp, #0]
 8004032:	2319      	movs	r3, #25
 8004034:	2201      	movs	r2, #1
 8004036:	4620      	mov	r0, r4
 8004038:	499c      	ldr	r1, [pc, #624]	@ (80042ac <HAL_I2C_Master_Receive+0x2a8>)
 800403a:	f7ff fc6d 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 800403e:	2800      	cmp	r0, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_I2C_Master_Receive+0x20>
    __HAL_LOCK(hi2c);
 8004042:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d0ec      	beq.n	8004024 <HAL_I2C_Master_Receive+0x20>
 800404a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800404e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004052:	6803      	ldr	r3, [r0, #0]
 8004054:	07da      	lsls	r2, r3, #31
 8004056:	d577      	bpl.n	8004148 <HAL_I2C_Master_Receive+0x144>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004058:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800405a:	f04f 0c22 	mov.w	ip, #34	@ 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800405e:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004066:	6003      	str	r3, [r0, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004068:	f884 c03d 	strb.w	ip, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800406c:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004070:	6422      	str	r2, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8004072:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004076:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004078:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800407c:	62e2      	str	r2, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800407e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004080:	8523      	strh	r3, [r4, #40]	@ 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	6803      	ldr	r3, [r0, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004084:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
    hi2c->pBuffPtr    = pData;
 800408a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	6003      	str	r3, [r0, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004090:	d007      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x9e>
 8004092:	2a01      	cmp	r2, #1
 8004094:	d005      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x9e>
 8004096:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800409a:	d002      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x9e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800409c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800409e:	2b11      	cmp	r3, #17
 80040a0:	d106      	bne.n	80040b0 <HAL_I2C_Master_Receive+0xac>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a2:	6803      	ldr	r3, [r0, #0]
 80040a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a8:	6003      	str	r3, [r0, #0]
 80040aa:	e001      	b.n	80040b0 <HAL_I2C_Master_Receive+0xac>
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	1c6b      	adds	r3, r5, #1
 80040ae:	d12a      	bne.n	8004106 <HAL_I2C_Master_Receive+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b0:	6943      	ldr	r3, [r0, #20]
 80040b2:	07db      	lsls	r3, r3, #31
 80040b4:	d5fa      	bpl.n	80040ac <HAL_I2C_Master_Receive+0xa8>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040bc:	d149      	bne.n	8004152 <HAL_I2C_Master_Receive+0x14e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040be:	f047 0701 	orr.w	r7, r7, #1
 80040c2:	b2ff      	uxtb	r7, r7
 80040c4:	6107      	str	r7, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c6:	4633      	mov	r3, r6
 80040c8:	462a      	mov	r2, r5
 80040ca:	4620      	mov	r0, r4
 80040cc:	4978      	ldr	r1, [pc, #480]	@ (80042b0 <HAL_I2C_Master_Receive+0x2ac>)
 80040ce:	f7ff fc6f 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d2:	4607      	mov	r7, r0
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d132      	bne.n	800413e <HAL_I2C_Master_Receive+0x13a>
    if (hi2c->XferSize == 0U)
 80040d8:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80040dc:	2900      	cmp	r1, #0
 80040de:	d171      	bne.n	80041c4 <HAL_I2C_Master_Receive+0x1c0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e0:	9003      	str	r0, [sp, #12]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	9203      	str	r2, [sp, #12]
 80040ea:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80040f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004104:	e78f      	b.n	8004026 <HAL_I2C_Master_Receive+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe fc2d 	bl	8002964 <HAL_GetTick>
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800410e:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	d254      	bcs.n	80041bc <HAL_I2C_Master_Receive+0x1b8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004112:	6943      	ldr	r3, [r0, #20]
 8004114:	07d9      	lsls	r1, r3, #31
 8004116:	d4cb      	bmi.n	80040b0 <HAL_I2C_Master_Receive+0xac>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004118:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800411a:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800411c:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800411e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004122:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8004128:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	f043 0320 	orr.w	r3, r3, #32
 8004130:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	05da      	lsls	r2, r3, #23
 8004136:	d502      	bpl.n	800413e <HAL_I2C_Master_Receive+0x13a>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800413c:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800413e:	2701      	movs	r7, #1
}
 8004140:	4638      	mov	r0, r7
 8004142:	b008      	add	sp, #32
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6003      	str	r3, [r0, #0]
 8004150:	e782      	b.n	8004058 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004152:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8004156:	f008 0806 	and.w	r8, r8, #6
 800415a:	f048 03f0 	orr.w	r3, r8, #240	@ 0xf0
 800415e:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004160:	462a      	mov	r2, r5
 8004162:	4633      	mov	r3, r6
 8004164:	4620      	mov	r0, r4
 8004166:	4953      	ldr	r1, [pc, #332]	@ (80042b4 <HAL_I2C_Master_Receive+0x2b0>)
 8004168:	f7ff fc22 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416c:	2800      	cmp	r0, #0
 800416e:	d1e6      	bne.n	800413e <HAL_I2C_Master_Receive+0x13a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	b2ff      	uxtb	r7, r7
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004174:	462a      	mov	r2, r5
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004176:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004178:	4620      	mov	r0, r4
 800417a:	4633      	mov	r3, r6
 800417c:	494c      	ldr	r1, [pc, #304]	@ (80042b0 <HAL_I2C_Master_Receive+0x2ac>)
 800417e:	f7ff fc17 	bl	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004182:	4602      	mov	r2, r0
 8004184:	2800      	cmp	r0, #0
 8004186:	d1da      	bne.n	800413e <HAL_I2C_Master_Receive+0x13a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004188:	6821      	ldr	r1, [r4, #0]
 800418a:	9007      	str	r0, [sp, #28]
 800418c:	6948      	ldr	r0, [r1, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	462b      	mov	r3, r5
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	9007      	str	r0, [sp, #28]
 8004192:	6988      	ldr	r0, [r1, #24]
 8004194:	9007      	str	r0, [sp, #28]
 8004196:	9807      	ldr	r0, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004198:	6808      	ldr	r0, [r1, #0]
 800419a:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800419e:	6008      	str	r0, [r1, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041a4:	4620      	mov	r0, r4
 80041a6:	9600      	str	r6, [sp, #0]
 80041a8:	f7ff fbb6 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f040 8101 	bne.w	80043b4 <HAL_I2C_Master_Receive+0x3b0>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 80041b8:	6113      	str	r3, [r2, #16]
 80041ba:	e784      	b.n	80040c6 <HAL_I2C_Master_Receive+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	2d00      	cmp	r5, #0
 80041be:	f47f af77 	bne.w	80040b0 <HAL_I2C_Master_Receive+0xac>
 80041c2:	e7a6      	b.n	8004112 <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 1U)
 80041c4:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 1U)
 80041c8:	f000 80df 	beq.w	800438a <HAL_I2C_Master_Receive+0x386>
    else if (hi2c->XferSize == 2U)
 80041cc:	2902      	cmp	r1, #2
 80041ce:	d079      	beq.n	80042c4 <HAL_I2C_Master_Receive+0x2c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041d4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	9006      	str	r0, [sp, #24]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	9206      	str	r2, [sp, #24]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	9306      	str	r3, [sp, #24]
 80041e0:	9b06      	ldr	r3, [sp, #24]
      if (hi2c->XferSize <= 3U)
 80041e2:	2903      	cmp	r1, #3
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80042b8 <HAL_I2C_Master_Receive+0x2b4>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041e8:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 80042bc <HAL_I2C_Master_Receive+0x2b8>
 80041ec:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 80042c0 <HAL_I2C_Master_Receive+0x2bc>
      if (hi2c->XferSize <= 3U)
 80041f0:	d836      	bhi.n	8004260 <HAL_I2C_Master_Receive+0x25c>
        if (hi2c->XferSize == 1U)
 80041f2:	2901      	cmp	r1, #1
 80041f4:	f000 80b9 	beq.w	800436a <HAL_I2C_Master_Receive+0x366>
        else if (hi2c->XferSize == 2U)
 80041f8:	2902      	cmp	r1, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fa:	462b      	mov	r3, r5
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	4641      	mov	r1, r8
 8004202:	4620      	mov	r0, r4
 8004204:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8004206:	d172      	bne.n	80042ee <HAL_I2C_Master_Receive+0x2ea>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004208:	f7ff fb86 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 800420c:	2800      	cmp	r0, #0
 800420e:	d196      	bne.n	800413e <HAL_I2C_Master_Receive+0x13a>
 8004210:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004222:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004224:	3b01      	subs	r3, #1
 8004226:	b29b      	uxth	r3, r3
 8004228:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800422a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800422c:	3301      	adds	r3, #1
 800422e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004230:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	8523      	strh	r3, [r4, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004236:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800423e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004240:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8004242:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004244:	3b01      	subs	r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800424a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800424c:	3901      	subs	r1, #1
 800424e:	b289      	uxth	r1, r1
          hi2c->pBuffPtr++;
 8004250:	3301      	adds	r3, #1
          hi2c->XferSize--;
 8004252:	8521      	strh	r1, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8004254:	6263      	str	r3, [r4, #36]	@ 0x24
    while (hi2c->XferSize > 0U)
 8004256:	2900      	cmp	r1, #0
 8004258:	f43f af4c 	beq.w	80040f4 <HAL_I2C_Master_Receive+0xf0>
      if (hi2c->XferSize <= 3U)
 800425c:	2903      	cmp	r1, #3
 800425e:	d9c8      	bls.n	80041f2 <HAL_I2C_Master_Receive+0x1ee>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	4632      	mov	r2, r6
 8004262:	4629      	mov	r1, r5
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff fbf1 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800426a:	2800      	cmp	r0, #0
 800426c:	f47f af67 	bne.w	800413e <HAL_I2C_Master_Receive+0x13a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004276:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004278:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 800427a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800427c:	3b01      	subs	r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004282:	6823      	ldr	r3, [r4, #0]
        hi2c->pBuffPtr++;
 8004284:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004286:	6958      	ldr	r0, [r3, #20]
        hi2c->XferSize--;
 8004288:	3901      	subs	r1, #1
 800428a:	b289      	uxth	r1, r1
        hi2c->pBuffPtr++;
 800428c:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004290:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004292:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8004294:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004298:	d5dd      	bpl.n	8004256 <HAL_I2C_Master_Receive+0x252>
          if (hi2c->XferSize == 3U)
 800429a:	2903      	cmp	r1, #3
 800429c:	d103      	bne.n	80042a6 <HAL_I2C_Master_Receive+0x2a2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80042a4:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	7053      	strb	r3, [r2, #1]
 80042aa:	e7c9      	b.n	8004240 <HAL_I2C_Master_Receive+0x23c>
 80042ac:	00100002 	.word	0x00100002
 80042b0:	00010002 	.word	0x00010002
 80042b4:	00010008 	.word	0x00010008
 80042b8:	00010004 	.word	0x00010004
 80042bc:	20000000 	.word	0x20000000
 80042c0:	14f8b589 	.word	0x14f8b589
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ca:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	9005      	str	r0, [sp, #20]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	9205      	str	r2, [sp, #20]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	9205      	str	r2, [sp, #20]
 80042d8:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042e2:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80042e4:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80042e6:	2900      	cmp	r1, #0
 80042e8:	f47f af7b 	bne.w	80041e2 <HAL_I2C_Master_Receive+0x1de>
 80042ec:	e702      	b.n	80040f4 <HAL_I2C_Master_Receive+0xf0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ee:	f7ff fb13 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f47f af23 	bne.w	800413e <HAL_I2C_Master_Receive+0x13a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004300:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004302:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800430a:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800430c:	f8da 3000 	ldr.w	r3, [sl]
          hi2c->pBuffPtr++;
 8004310:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004312:	08db      	lsrs	r3, r3, #3
 8004314:	fba9 2303 	umull	r2, r3, r9, r3
          hi2c->XferCount--;
 8004318:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8004320:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004322:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004326:	b292      	uxth	r2, r2
 8004328:	8562      	strh	r2, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800432a:	9302      	str	r3, [sp, #8]
          hi2c->XferSize--;
 800432c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8004332:	1c4b      	adds	r3, r1, #1
 8004334:	6263      	str	r3, [r4, #36]	@ 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004336:	e003      	b.n	8004340 <HAL_I2C_Master_Receive+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	0752      	lsls	r2, r2, #29
 800433e:	d41d      	bmi.n	800437c <HAL_I2C_Master_Receive+0x378>
            count--;
 8004340:	9b02      	ldr	r3, [sp, #8]
 8004342:	3b01      	subs	r3, #1
 8004344:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8004346:	9b02      	ldr	r3, [sp, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f5      	bne.n	8004338 <HAL_I2C_Master_Receive+0x334>
              hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004350:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004360:	b662      	cpsie	i
      return HAL_ERROR;
 8004362:	2701      	movs	r7, #1
              __HAL_UNLOCK(hi2c);
 8004364:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8004368:	e6ea      	b.n	8004140 <HAL_I2C_Master_Receive+0x13c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436a:	4632      	mov	r2, r6
 800436c:	4629      	mov	r1, r5
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff fb6c 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004374:	2800      	cmp	r0, #0
 8004376:	f43f af5f 	beq.w	8004238 <HAL_I2C_Master_Receive+0x234>
 800437a:	e6e0      	b.n	800413e <HAL_I2C_Master_Receive+0x13a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004382:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	704b      	strb	r3, [r1, #1]
 8004388:	e74b      	b.n	8004222 <HAL_I2C_Master_Receive+0x21e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004390:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	9004      	str	r0, [sp, #16]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	9204      	str	r2, [sp, #16]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	9204      	str	r2, [sp, #16]
 800439e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043a8:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80043aa:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80043ac:	2900      	cmp	r1, #0
 80043ae:	f47f af18 	bne.w	80041e2 <HAL_I2C_Master_Receive+0x1de>
 80043b2:	e69f      	b.n	80040f4 <HAL_I2C_Master_Receive+0xf0>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	05d9      	lsls	r1, r3, #23
 80043ba:	f57f aec0 	bpl.w	800413e <HAL_I2C_Master_Receive+0x13a>
 80043be:	e6bb      	b.n	8004138 <HAL_I2C_Master_Receive+0x134>

080043c0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f000 826b 	beq.w	800489c <HAL_RCC_OscConfig+0x4dc>
{
 80043c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80043ca:	6803      	ldr	r3, [r0, #0]
 80043cc:	4604      	mov	r4, r0
{
 80043ce:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d048      	beq.n	8004466 <HAL_RCC_OscConfig+0xa6>
 80043d4:	071e      	lsls	r6, r3, #28
 80043d6:	f000 81c7 	beq.w	8004768 <HAL_RCC_OscConfig+0x3a8>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043da:	07dd      	lsls	r5, r3, #31
 80043dc:	f140 80b2 	bpl.w	8004544 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
 80043e6:	d003      	beq.n	80043f0 <HAL_RCC_OscConfig+0x30>
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ec:	f040 8198 	bne.w	8004720 <HAL_RCC_OscConfig+0x360>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f0:	4aa2      	ldr	r2, [pc, #648]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 80043f2:	6853      	ldr	r3, [r2, #4]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	f000 809a 	beq.w	8004532 <HAL_RCC_OscConfig+0x172>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043fe:	6853      	ldr	r3, [r2, #4]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	f000 8090 	beq.w	800452a <HAL_RCC_OscConfig+0x16a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440a:	6863      	ldr	r3, [r4, #4]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	f000 8173 	beq.w	80046fa <HAL_RCC_OscConfig+0x33a>
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 81ae 	beq.w	8004776 <HAL_RCC_OscConfig+0x3b6>
 800441a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441e:	f000 8205 	beq.w	800482c <HAL_RCC_OscConfig+0x46c>
 8004422:	4b96      	ldr	r3, [pc, #600]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004432:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	e166      	b.n	8004704 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004436:	4a91      	ldr	r2, [pc, #580]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 8004438:	6a13      	ldr	r3, [r2, #32]
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004440:	f7fe fa90 	bl	8002964 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004448:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	4f8c      	ldr	r7, [pc, #560]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 800444c:	e005      	b.n	800445a <HAL_RCC_OscConfig+0x9a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe fa89 	bl	8002964 <HAL_GetTick>
 8004452:	1b80      	subs	r0, r0, r6
 8004454:	4540      	cmp	r0, r8
 8004456:	f200 8183 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	079b      	lsls	r3, r3, #30
 800445e:	d5f6      	bpl.n	800444e <HAL_RCC_OscConfig+0x8e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004460:	2d00      	cmp	r5, #0
 8004462:	f040 81dd 	bne.w	8004820 <HAL_RCC_OscConfig+0x460>
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004466:	69e3      	ldr	r3, [r4, #28]
 8004468:	2b02      	cmp	r3, #2
 800446a:	f200 813c 	bhi.w	80046e6 <HAL_RCC_OscConfig+0x326>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446e:	2b00      	cmp	r3, #0
 8004470:	d057      	beq.n	8004522 <HAL_RCC_OscConfig+0x162>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004472:	4d82      	ldr	r5, [pc, #520]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 8004474:	686a      	ldr	r2, [r5, #4]
 8004476:	f002 020c 	and.w	r2, r2, #12
 800447a:	2a08      	cmp	r2, #8
 800447c:	f000 81bf 	beq.w	80047fe <HAL_RCC_OscConfig+0x43e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 81e8 	bne.w	8004856 <HAL_RCC_OscConfig+0x496>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004486:	6a23      	ldr	r3, [r4, #32]
 8004488:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
 800448c:	d004      	beq.n	8004498 <HAL_RCC_OscConfig+0xd8>
 800448e:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004492:	487b      	ldr	r0, [pc, #492]	@ (8004680 <HAL_RCC_OscConfig+0x2c0>)
 8004494:	f7fd fb26 	bl	8001ae4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004498:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800449a:	f433 2240 	bics.w	r2, r3, #786432	@ 0xc0000
 800449e:	d012      	beq.n	80044c6 <HAL_RCC_OscConfig+0x106>
 80044a0:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80044a4:	d00f      	beq.n	80044c6 <HAL_RCC_OscConfig+0x106>
 80044a6:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 80044aa:	d00c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x106>
 80044ac:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80044b0:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 80044b4:	d007      	beq.n	80044c6 <HAL_RCC_OscConfig+0x106>
 80044b6:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80044ba:	d004      	beq.n	80044c6 <HAL_RCC_OscConfig+0x106>
 80044bc:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80044c0:	486f      	ldr	r0, [pc, #444]	@ (8004680 <HAL_RCC_OscConfig+0x2c0>)
 80044c2:	f7fd fb0f 	bl	8001ae4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	2200      	movs	r2, #0
 80044c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004684 <HAL_RCC_OscConfig+0x2c4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ca:	4e6c      	ldr	r6, [pc, #432]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_PLL_DISABLE();
 80044cc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80044ce:	f7fe fa49 	bl	8002964 <HAL_GetTick>
 80044d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d4:	e005      	b.n	80044e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fe fa45 	bl	8002964 <HAL_GetTick>
 80044da:	1b40      	subs	r0, r0, r5
 80044dc:	2802      	cmp	r0, #2
 80044de:	f200 813f 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	6833      	ldr	r3, [r6, #0]
 80044e4:	0199      	lsls	r1, r3, #6
 80044e6:	d4f6      	bmi.n	80044d6 <HAL_RCC_OscConfig+0x116>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e8:	6a22      	ldr	r2, [r4, #32]
 80044ea:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80044ee:	f000 81c3 	beq.w	8004878 <HAL_RCC_OscConfig+0x4b8>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f2:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f4:	4d61      	ldr	r5, [pc, #388]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 80044f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044f8:	686b      	ldr	r3, [r5, #4]
 80044fa:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80044fe:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8004500:	4960      	ldr	r1, [pc, #384]	@ (8004684 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004502:	4313      	orrs	r3, r2
 8004504:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004506:	6608      	str	r0, [r1, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe fa2c 	bl	8002964 <HAL_GetTick>
 800450c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450e:	e005      	b.n	800451c <HAL_RCC_OscConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe fa28 	bl	8002964 <HAL_GetTick>
 8004514:	1b00      	subs	r0, r0, r4
 8004516:	2802      	cmp	r0, #2
 8004518:	f200 8122 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	d5f6      	bpl.n	8004510 <HAL_RCC_OscConfig+0x150>
        }
      }
    }
  }

  return HAL_OK;
 8004522:	2000      	movs	r0, #0
}
 8004524:	b002      	add	sp, #8
 8004526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800452a:	6853      	ldr	r3, [r2, #4]
 800452c:	03d8      	lsls	r0, r3, #15
 800452e:	f57f af6c 	bpl.w	800440a <HAL_RCC_OscConfig+0x4a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004532:	4b52      	ldr	r3, [pc, #328]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0399      	lsls	r1, r3, #14
 8004538:	d503      	bpl.n	8004542 <HAL_RCC_OscConfig+0x182>
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 809a 	beq.w	8004676 <HAL_RCC_OscConfig+0x2b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	079f      	lsls	r7, r3, #30
 8004546:	d52f      	bpl.n	80045a8 <HAL_RCC_OscConfig+0x1e8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	f200 80a2 	bhi.w	8004694 <HAL_RCC_OscConfig+0x2d4>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	2b1f      	cmp	r3, #31
 8004554:	f200 80a7 	bhi.w	80046a6 <HAL_RCC_OscConfig+0x2e6>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004558:	4b48      	ldr	r3, [pc, #288]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	f012 0f0c 	tst.w	r2, #12
 8004560:	f000 8082 	beq.w	8004668 <HAL_RCC_OscConfig+0x2a8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	f002 020c 	and.w	r2, r2, #12
 800456a:	2a08      	cmp	r2, #8
 800456c:	d079      	beq.n	8004662 <HAL_RCC_OscConfig+0x2a2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8133 	beq.w	80047dc <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_ENABLE();
 8004576:	2201      	movs	r2, #1
 8004578:	4b42      	ldr	r3, [pc, #264]	@ (8004684 <HAL_RCC_OscConfig+0x2c4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4e40      	ldr	r6, [pc, #256]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_ENABLE();
 800457c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800457e:	f7fe f9f1 	bl	8002964 <HAL_GetTick>
 8004582:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	e005      	b.n	8004592 <HAL_RCC_OscConfig+0x1d2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fe f9ed 	bl	8002964 <HAL_GetTick>
 800458a:	1b40      	subs	r0, r0, r5
 800458c:	2802      	cmp	r0, #2
 800458e:	f200 80e7 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	6833      	ldr	r3, [r6, #0]
 8004594:	0798      	lsls	r0, r3, #30
 8004596:	d5f6      	bpl.n	8004586 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	6962      	ldr	r2, [r4, #20]
 800459c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045a4:	6033      	str	r3, [r6, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	071a      	lsls	r2, r3, #28
 80045aa:	d525      	bpl.n	80045f8 <HAL_RCC_OscConfig+0x238>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80045ac:	69a3      	ldr	r3, [r4, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f200 8090 	bhi.w	80046d4 <HAL_RCC_OscConfig+0x314>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d07c      	beq.n	80046b2 <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_LSI_ENABLE();
 80045b8:	2201      	movs	r2, #1
 80045ba:	4b32      	ldr	r3, [pc, #200]	@ (8004684 <HAL_RCC_OscConfig+0x2c4>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045bc:	4e2f      	ldr	r6, [pc, #188]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_ENABLE();
 80045be:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80045c2:	f7fe f9cf 	bl	8002964 <HAL_GetTick>
 80045c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c8:	e005      	b.n	80045d6 <HAL_RCC_OscConfig+0x216>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fe f9cb 	bl	8002964 <HAL_GetTick>
 80045ce:	1b40      	subs	r0, r0, r5
 80045d0:	2802      	cmp	r0, #2
 80045d2:	f200 80c5 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80045d8:	079b      	lsls	r3, r3, #30
 80045da:	d5f6      	bpl.n	80045ca <HAL_RCC_OscConfig+0x20a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_RCC_OscConfig+0x2c8>)
 80045de:	4a2b      	ldr	r2, [pc, #172]	@ (800468c <HAL_RCC_OscConfig+0x2cc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80045ea:	bf00      	nop
  }
  while (Delay --);
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f9      	bne.n	80045ea <HAL_RCC_OscConfig+0x22a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	075d      	lsls	r5, r3, #29
 80045fa:	f57f af34 	bpl.w	8004466 <HAL_RCC_OscConfig+0xa6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d906      	bls.n	8004612 <HAL_RCC_OscConfig+0x252>
 8004604:	2b05      	cmp	r3, #5
 8004606:	d004      	beq.n	8004612 <HAL_RCC_OscConfig+0x252>
 8004608:	f240 210f 	movw	r1, #527	@ 0x20f
 800460c:	481c      	ldr	r0, [pc, #112]	@ (8004680 <HAL_RCC_OscConfig+0x2c0>)
 800460e:	f7fd fa69 	bl	8001ae4 <assert_failed>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	00d0      	lsls	r0, r2, #3
 8004618:	f100 80c3 	bmi.w	80047a2 <HAL_RCC_OscConfig+0x3e2>
      pwrclkchanged = SET;
 800461c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004624:	61da      	str	r2, [r3, #28]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4e17      	ldr	r6, [pc, #92]	@ (8004690 <HAL_RCC_OscConfig+0x2d0>)
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	05d9      	lsls	r1, r3, #23
 8004636:	f140 8083 	bpl.w	8004740 <HAL_RCC_OscConfig+0x380>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	f43f aefa 	beq.w	8004436 <HAL_RCC_OscConfig+0x76>
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80af 	beq.w	80047a6 <HAL_RCC_OscConfig+0x3e6>
 8004648:	2b05      	cmp	r3, #5
 800464a:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	f000 80fa 	beq.w	8004846 <HAL_RCC_OscConfig+0x486>
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	621a      	str	r2, [r3, #32]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004660:	e6ee      	b.n	8004440 <HAL_RCC_OscConfig+0x80>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	03de      	lsls	r6, r3, #15
 8004666:	d482      	bmi.n	800456e <HAL_RCC_OscConfig+0x1ae>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <HAL_RCC_OscConfig+0x2bc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	079d      	lsls	r5, r3, #30
 800466e:	d55d      	bpl.n	800472c <HAL_RCC_OscConfig+0x36c>
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d05a      	beq.n	800472c <HAL_RCC_OscConfig+0x36c>
    return HAL_ERROR;
 8004676:	2001      	movs	r0, #1
 8004678:	e754      	b.n	8004524 <HAL_RCC_OscConfig+0x164>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	0800acf0 	.word	0x0800acf0
 8004684:	42420000 	.word	0x42420000
 8004688:	20000000 	.word	0x20000000
 800468c:	10624dd3 	.word	0x10624dd3
 8004690:	40007000 	.word	0x40007000
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004694:	f240 119f 	movw	r1, #415	@ 0x19f
 8004698:	4881      	ldr	r0, [pc, #516]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 800469a:	f7fd fa23 	bl	8001ae4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800469e:	6963      	ldr	r3, [r4, #20]
 80046a0:	2b1f      	cmp	r3, #31
 80046a2:	f67f af59 	bls.w	8004558 <HAL_RCC_OscConfig+0x198>
 80046a6:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80046aa:	487d      	ldr	r0, [pc, #500]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 80046ac:	f7fd fa1a 	bl	8001ae4 <assert_failed>
 80046b0:	e752      	b.n	8004558 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4a7c      	ldr	r2, [pc, #496]	@ (80048a4 <HAL_RCC_OscConfig+0x4e4>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b4:	4e7c      	ldr	r6, [pc, #496]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
      __HAL_RCC_LSI_DISABLE();
 80046b6:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80046ba:	f7fe f953 	bl	8002964 <HAL_GetTick>
 80046be:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	e004      	b.n	80046cc <HAL_RCC_OscConfig+0x30c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fe f94f 	bl	8002964 <HAL_GetTick>
 80046c6:	1b40      	subs	r0, r0, r5
 80046c8:	2802      	cmp	r0, #2
 80046ca:	d849      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3a0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80046ce:	079f      	lsls	r7, r3, #30
 80046d0:	d4f7      	bmi.n	80046c2 <HAL_RCC_OscConfig+0x302>
 80046d2:	e790      	b.n	80045f6 <HAL_RCC_OscConfig+0x236>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80046d4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80046d8:	4871      	ldr	r0, [pc, #452]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 80046da:	f7fd fa03 	bl	8001ae4 <assert_failed>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046de:	69a3      	ldr	r3, [r4, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0e6      	beq.n	80046b2 <HAL_RCC_OscConfig+0x2f2>
 80046e4:	e768      	b.n	80045b8 <HAL_RCC_OscConfig+0x1f8>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80046e6:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80046ea:	486d      	ldr	r0, [pc, #436]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 80046ec:	f7fd f9fa 	bl	8001ae4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f0:	69e3      	ldr	r3, [r4, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f47f aebd 	bne.w	8004472 <HAL_RCC_OscConfig+0xb2>
 80046f8:	e713      	b.n	8004522 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fa:	4a6b      	ldr	r2, [pc, #428]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004702:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004704:	f7fe f92e 	bl	8002964 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004708:	4e67      	ldr	r6, [pc, #412]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
        tickstart = HAL_GetTick();
 800470a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470c:	e004      	b.n	8004718 <HAL_RCC_OscConfig+0x358>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470e:	f7fe f929 	bl	8002964 <HAL_GetTick>
 8004712:	1b40      	subs	r0, r0, r5
 8004714:	2864      	cmp	r0, #100	@ 0x64
 8004716:	d823      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004718:	6833      	ldr	r3, [r6, #0]
 800471a:	039a      	lsls	r2, r3, #14
 800471c:	d5f7      	bpl.n	800470e <HAL_RCC_OscConfig+0x34e>
 800471e:	e710      	b.n	8004542 <HAL_RCC_OscConfig+0x182>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004720:	f240 116b 	movw	r1, #363	@ 0x16b
 8004724:	485e      	ldr	r0, [pc, #376]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 8004726:	f7fd f9dd 	bl	8001ae4 <assert_failed>
 800472a:	e661      	b.n	80043f0 <HAL_RCC_OscConfig+0x30>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4a5e      	ldr	r2, [pc, #376]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800472e:	6961      	ldr	r1, [r4, #20]
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004736:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800473a:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473c:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	e733      	b.n	80045a8 <HAL_RCC_OscConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004740:	6833      	ldr	r3, [r6, #0]
 8004742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004746:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004748:	f7fe f90c 	bl	8002964 <HAL_GetTick>
 800474c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	6833      	ldr	r3, [r6, #0]
 8004750:	05da      	lsls	r2, r3, #23
 8004752:	f53f af72 	bmi.w	800463a <HAL_RCC_OscConfig+0x27a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fe f905 	bl	8002964 <HAL_GetTick>
 800475a:	1bc0      	subs	r0, r0, r7
 800475c:	2864      	cmp	r0, #100	@ 0x64
 800475e:	d9f6      	bls.n	800474e <HAL_RCC_OscConfig+0x38e>
            return HAL_TIMEOUT;
 8004760:	2003      	movs	r0, #3
}
 8004762:	b002      	add	sp, #8
 8004764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004768:	f240 1165 	movw	r1, #357	@ 0x165
 800476c:	484c      	ldr	r0, [pc, #304]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 800476e:	f7fd f9b9 	bl	8001ae4 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	e631      	b.n	80043da <HAL_RCC_OscConfig+0x1a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004776:	4d4c      	ldr	r5, [pc, #304]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004786:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004788:	f7fe f8ec 	bl	8002964 <HAL_GetTick>
 800478c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e004      	b.n	800479a <HAL_RCC_OscConfig+0x3da>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe f8e8 	bl	8002964 <HAL_GetTick>
 8004794:	1b80      	subs	r0, r0, r6
 8004796:	2864      	cmp	r0, #100	@ 0x64
 8004798:	d8e2      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	039b      	lsls	r3, r3, #14
 800479e:	d4f7      	bmi.n	8004790 <HAL_RCC_OscConfig+0x3d0>
 80047a0:	e6cf      	b.n	8004542 <HAL_RCC_OscConfig+0x182>
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2500      	movs	r5, #0
 80047a4:	e744      	b.n	8004630 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a6:	4e40      	ldr	r6, [pc, #256]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	6a33      	ldr	r3, [r6, #32]
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6233      	str	r3, [r6, #32]
 80047b4:	6a33      	ldr	r3, [r6, #32]
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80047bc:	f7fe f8d2 	bl	8002964 <HAL_GetTick>
 80047c0:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	e004      	b.n	80047ce <HAL_RCC_OscConfig+0x40e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fe f8ce 	bl	8002964 <HAL_GetTick>
 80047c8:	1bc0      	subs	r0, r0, r7
 80047ca:	4540      	cmp	r0, r8
 80047cc:	d8c8      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3a0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ce:	6a33      	ldr	r3, [r6, #32]
 80047d0:	0798      	lsls	r0, r3, #30
 80047d2:	d4f7      	bmi.n	80047c4 <HAL_RCC_OscConfig+0x404>
    if (pwrclkchanged == SET)
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	f43f ae46 	beq.w	8004466 <HAL_RCC_OscConfig+0xa6>
 80047da:	e021      	b.n	8004820 <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_HSI_DISABLE();
 80047dc:	4a31      	ldr	r2, [pc, #196]	@ (80048a4 <HAL_RCC_OscConfig+0x4e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	4e32      	ldr	r6, [pc, #200]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
        __HAL_RCC_HSI_DISABLE();
 80047e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047e2:	f7fe f8bf 	bl	8002964 <HAL_GetTick>
 80047e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e8:	e004      	b.n	80047f4 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fe f8bb 	bl	8002964 <HAL_GetTick>
 80047ee:	1b40      	subs	r0, r0, r5
 80047f0:	2802      	cmp	r0, #2
 80047f2:	d8b5      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	0799      	lsls	r1, r3, #30
 80047f8:	d4f7      	bmi.n	80047ea <HAL_RCC_OscConfig+0x42a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	e6d4      	b.n	80045a8 <HAL_RCC_OscConfig+0x1e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f43f af39 	beq.w	8004676 <HAL_RCC_OscConfig+0x2b6>
        pll_config = RCC->CFGR;
 8004804:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	6a22      	ldr	r2, [r4, #32]
 8004808:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800480c:	4291      	cmp	r1, r2
 800480e:	f47f af32 	bne.w	8004676 <HAL_RCC_OscConfig+0x2b6>
 8004812:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004814:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004818:	1a18      	subs	r0, r3, r0
 800481a:	bf18      	it	ne
 800481c:	2001      	movne	r0, #1
 800481e:	e681      	b.n	8004524 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004822:	69d3      	ldr	r3, [r2, #28]
 8004824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004828:	61d3      	str	r3, [r2, #28]
 800482a:	e61c      	b.n	8004466 <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004830:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004842:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004844:	e75e      	b.n	8004704 <HAL_RCC_OscConfig+0x344>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004846:	f042 0204 	orr.w	r2, r2, #4
 800484a:	621a      	str	r2, [r3, #32]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004854:	e5f4      	b.n	8004440 <HAL_RCC_OscConfig+0x80>
        __HAL_RCC_PLL_DISABLE();
 8004856:	2200      	movs	r2, #0
 8004858:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 800485a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800485c:	f7fe f882 	bl	8002964 <HAL_GetTick>
 8004860:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004862:	e005      	b.n	8004870 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe f87e 	bl	8002964 <HAL_GetTick>
 8004868:	1b00      	subs	r0, r0, r4
 800486a:	2802      	cmp	r0, #2
 800486c:	f63f af78 	bhi.w	8004760 <HAL_RCC_OscConfig+0x3a0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	d4f6      	bmi.n	8004864 <HAL_RCC_OscConfig+0x4a4>
 8004876:	e654      	b.n	8004522 <HAL_RCC_OscConfig+0x162>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004878:	68a1      	ldr	r1, [r4, #8]
 800487a:	f431 3300 	bics.w	r3, r1, #131072	@ 0x20000
 800487e:	d006      	beq.n	800488e <HAL_RCC_OscConfig+0x4ce>
 8004880:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8004884:	4806      	ldr	r0, [pc, #24]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 8004886:	f7fd f92d 	bl	8001ae4 <assert_failed>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800488a:	68a1      	ldr	r1, [r4, #8]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800488c:	6a22      	ldr	r2, [r4, #32]
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800488e:	4806      	ldr	r0, [pc, #24]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004890:	6843      	ldr	r3, [r0, #4]
 8004892:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004896:	430b      	orrs	r3, r1
 8004898:	6043      	str	r3, [r0, #4]
 800489a:	e62a      	b.n	80044f2 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800489c:	2001      	movs	r0, #1
}
 800489e:	4770      	bx	lr
 80048a0:	0800acf0 	.word	0x0800acf0
 80048a4:	42420000 	.word	0x42420000
 80048a8:	40021000 	.word	0x40021000

080048ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80048ac:	4a0e      	ldr	r2, [pc, #56]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048ae:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80048b0:	f003 010c 	and.w	r1, r3, #12
 80048b4:	2908      	cmp	r1, #8
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80048b8:	480c      	ldr	r0, [pc, #48]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x40>)
}
 80048ba:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048bc:	480c      	ldr	r0, [pc, #48]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80048be:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048c4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c6:	d50a      	bpl.n	80048de <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048c8:	4908      	ldr	r1, [pc, #32]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ca:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048cc:	fb01 f000 	mul.w	r0, r1, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d0:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80048d2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80048d6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80048dc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80048e0:	fb03 f000 	mul.w	r0, r3, r0
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	0800ad2c 	.word	0x0800ad2c
 80048f4:	0800ad28 	.word	0x0800ad28
 80048f8:	003d0900 	.word	0x003d0900

080048fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f000 80ea 	beq.w	8004ad6 <HAL_RCC_ClockConfig+0x1da>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004902:	6803      	ldr	r3, [r0, #0]
{
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004908:	071e      	lsls	r6, r3, #28
 800490a:	4604      	mov	r4, r0
 800490c:	460d      	mov	r5, r1
 800490e:	f000 80cb 	beq.w	8004aa8 <HAL_RCC_ClockConfig+0x1ac>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004912:	2d02      	cmp	r5, #2
 8004914:	f200 80c2 	bhi.w	8004a9c <HAL_RCC_ClockConfig+0x1a0>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4a76      	ldr	r2, [pc, #472]	@ (8004af4 <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	42ab      	cmp	r3, r5
 8004922:	d20c      	bcs.n	800493e <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	432b      	orrs	r3, r5
 800492c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	42ab      	cmp	r3, r5
 8004936:	d002      	beq.n	800493e <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8004938:	2001      	movs	r0, #1
}
 800493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	0798      	lsls	r0, r3, #30
 8004942:	d528      	bpl.n	8004996 <HAL_RCC_ClockConfig+0x9a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	0759      	lsls	r1, r3, #29
 8004946:	d504      	bpl.n	8004952 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	496b      	ldr	r1, [pc, #428]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 800494a:	684a      	ldr	r2, [r1, #4]
 800494c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004950:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004952:	071a      	lsls	r2, r3, #28
 8004954:	d504      	bpl.n	8004960 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004956:	4968      	ldr	r1, [pc, #416]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 8004958:	684a      	ldr	r2, [r1, #4]
 800495a:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 800495e:	604a      	str	r2, [r1, #4]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004960:	68a2      	ldr	r2, [r4, #8]
 8004962:	b192      	cbz	r2, 800498a <HAL_RCC_ClockConfig+0x8e>
 8004964:	2ac0      	cmp	r2, #192	@ 0xc0
 8004966:	d010      	beq.n	800498a <HAL_RCC_ClockConfig+0x8e>
 8004968:	f200 80ac 	bhi.w	8004ac4 <HAL_RCC_ClockConfig+0x1c8>
 800496c:	2aa0      	cmp	r2, #160	@ 0xa0
 800496e:	d00c      	beq.n	800498a <HAL_RCC_ClockConfig+0x8e>
 8004970:	f200 80a4 	bhi.w	8004abc <HAL_RCC_ClockConfig+0x1c0>
 8004974:	f022 0110 	bic.w	r1, r2, #16
 8004978:	2980      	cmp	r1, #128	@ 0x80
 800497a:	d006      	beq.n	800498a <HAL_RCC_ClockConfig+0x8e>
 800497c:	f240 315d 	movw	r1, #861	@ 0x35d
 8004980:	485e      	ldr	r0, [pc, #376]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004982:	f7fd f8af 	bl	8001ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004986:	68a2      	ldr	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004988:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498a:	485b      	ldr	r0, [pc, #364]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 800498c:	6841      	ldr	r1, [r0, #4]
 800498e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8004992:	430a      	orrs	r2, r1
 8004994:	6042      	str	r2, [r0, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	07df      	lsls	r7, r3, #31
 8004998:	d526      	bpl.n	80049e8 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	2b02      	cmp	r3, #2
 800499e:	f200 80a0 	bhi.w	8004ae2 <HAL_RCC_ClockConfig+0x1e6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4a55      	ldr	r2, [pc, #340]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a8:	f000 8097 	beq.w	8004ada <HAL_RCC_ClockConfig+0x1de>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f000 8081 	beq.w	8004ab4 <HAL_RCC_ClockConfig+0x1b8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b2:	0791      	lsls	r1, r2, #30
 80049b4:	d5c0      	bpl.n	8004938 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4e50      	ldr	r6, [pc, #320]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049bc:	6872      	ldr	r2, [r6, #4]
 80049be:	f022 0203 	bic.w	r2, r2, #3
 80049c2:	4313      	orrs	r3, r2
 80049c4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80049c6:	f7fd ffcd 	bl	8002964 <HAL_GetTick>
 80049ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049cc:	e005      	b.n	80049da <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ce:	f7fd ffc9 	bl	8002964 <HAL_GetTick>
 80049d2:	1bc0      	subs	r0, r0, r7
 80049d4:	4540      	cmp	r0, r8
 80049d6:	f200 808b 	bhi.w	8004af0 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	6873      	ldr	r3, [r6, #4]
 80049dc:	6862      	ldr	r2, [r4, #4]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049e6:	d1f2      	bne.n	80049ce <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e8:	4a42      	ldr	r2, [pc, #264]	@ (8004af4 <HAL_RCC_ClockConfig+0x1f8>)
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	d909      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f4:	6813      	ldr	r3, [r2, #0]
 80049f6:	f023 0307 	bic.w	r3, r3, #7
 80049fa:	432b      	orrs	r3, r5
 80049fc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	d197      	bne.n	8004938 <HAL_RCC_ClockConfig+0x3c>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	075a      	lsls	r2, r3, #29
 8004a0c:	d518      	bpl.n	8004a40 <HAL_RCC_ClockConfig+0x144>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004a0e:	68e1      	ldr	r1, [r4, #12]
 8004a10:	f431 6280 	bics.w	r2, r1, #1024	@ 0x400
 8004a14:	d00e      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x138>
 8004a16:	f421 7200 	bic.w	r2, r1, #512	@ 0x200
 8004a1a:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x138>
 8004a20:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8004a24:	d006      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x138>
 8004a26:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8004a2a:	4834      	ldr	r0, [pc, #208]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004a2c:	f7fd f85a 	bl	8001ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4830      	ldr	r0, [pc, #192]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 8004a36:	6842      	ldr	r2, [r0, #4]
 8004a38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	6042      	str	r2, [r0, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	d518      	bpl.n	8004a76 <HAL_RCC_ClockConfig+0x17a>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004a44:	6922      	ldr	r2, [r4, #16]
 8004a46:	f432 6380 	bics.w	r3, r2, #1024	@ 0x400
 8004a4a:	d00d      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x16c>
 8004a4c:	f422 7300 	bic.w	r3, r2, #512	@ 0x200
 8004a50:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a54:	d008      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x16c>
 8004a56:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x16c>
 8004a5c:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8004a60:	4826      	ldr	r0, [pc, #152]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004a62:	f7fd f83f 	bl	8001ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a66:	6922      	ldr	r2, [r4, #16]
 8004a68:	4923      	ldr	r1, [pc, #140]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 8004a6a:	684b      	ldr	r3, [r1, #4]
 8004a6c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004a70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a74:	604b      	str	r3, [r1, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a76:	f7ff ff19 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <HAL_RCC_ClockConfig+0x1fc>)
 8004a7e:	4920      	ldr	r1, [pc, #128]	@ (8004b00 <HAL_RCC_ClockConfig+0x204>)
 8004a80:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004a82:	4820      	ldr	r0, [pc, #128]	@ (8004b04 <HAL_RCC_ClockConfig+0x208>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a84:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004a88:	5c89      	ldrb	r1, [r1, r2]
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b08 <HAL_RCC_ClockConfig+0x20c>)
 8004a8c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8004a8e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a90:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004a92:	f7fd fcd3 	bl	800243c <HAL_InitTick>
  return HAL_OK;
 8004a96:	2000      	movs	r0, #0
}
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a9c:	f240 3137 	movw	r1, #823	@ 0x337
 8004aa0:	4816      	ldr	r0, [pc, #88]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004aa2:	f7fd f81f 	bl	8001ae4 <assert_failed>
 8004aa6:	e737      	b.n	8004918 <HAL_RCC_ClockConfig+0x1c>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004aa8:	f240 3136 	movw	r1, #822	@ 0x336
 8004aac:	4813      	ldr	r0, [pc, #76]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004aae:	f7fd f819 	bl	8001ae4 <assert_failed>
 8004ab2:	e72e      	b.n	8004912 <HAL_RCC_ClockConfig+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	0190      	lsls	r0, r2, #6
 8004ab6:	f53f af7e 	bmi.w	80049b6 <HAL_RCC_ClockConfig+0xba>
 8004aba:	e73d      	b.n	8004938 <HAL_RCC_ClockConfig+0x3c>
 8004abc:	2ab0      	cmp	r2, #176	@ 0xb0
 8004abe:	f43f af64 	beq.w	800498a <HAL_RCC_ClockConfig+0x8e>
 8004ac2:	e75b      	b.n	800497c <HAL_RCC_ClockConfig+0x80>
 8004ac4:	2ae0      	cmp	r2, #224	@ 0xe0
 8004ac6:	f43f af60 	beq.w	800498a <HAL_RCC_ClockConfig+0x8e>
 8004aca:	f022 0120 	bic.w	r1, r2, #32
 8004ace:	29d0      	cmp	r1, #208	@ 0xd0
 8004ad0:	f47f af54 	bne.w	800497c <HAL_RCC_ClockConfig+0x80>
 8004ad4:	e759      	b.n	800498a <HAL_RCC_ClockConfig+0x8e>
    return HAL_ERROR;
 8004ad6:	2001      	movs	r0, #1
}
 8004ad8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	0396      	lsls	r6, r2, #14
 8004adc:	f53f af6b 	bmi.w	80049b6 <HAL_RCC_ClockConfig+0xba>
 8004ae0:	e72a      	b.n	8004938 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ae2:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8004ae6:	4805      	ldr	r0, [pc, #20]	@ (8004afc <HAL_RCC_ClockConfig+0x200>)
 8004ae8:	f7fc fffc 	bl	8001ae4 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	e758      	b.n	80049a2 <HAL_RCC_ClockConfig+0xa6>
        return HAL_TIMEOUT;
 8004af0:	2003      	movs	r0, #3
 8004af2:	e722      	b.n	800493a <HAL_RCC_ClockConfig+0x3e>
 8004af4:	40022000 	.word	0x40022000
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800acf0 	.word	0x0800acf0
 8004b00:	0800abc0 	.word	0x0800abc0
 8004b04:	20000008 	.word	0x20000008
 8004b08:	20000000 	.word	0x20000000

08004b0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b0c:	4b04      	ldr	r3, [pc, #16]	@ (8004b20 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004b0e:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4905      	ldr	r1, [pc, #20]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b14:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b18:	5ccb      	ldrb	r3, [r1, r3]
 8004b1a:	6810      	ldr	r0, [r2, #0]
}
 8004b1c:	40d8      	lsrs	r0, r3
 8004b1e:	4770      	bx	lr
 8004b20:	40021000 	.word	0x40021000
 8004b24:	20000000 	.word	0x20000000
 8004b28:	0800abb8 	.word	0x0800abb8

08004b2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004b2e:	4a05      	ldr	r2, [pc, #20]	@ (8004b44 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4905      	ldr	r1, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b34:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	6810      	ldr	r0, [r2, #0]
}
 8004b3c:	40d8      	lsrs	r0, r3
 8004b3e:	4770      	bx	lr
 8004b40:	40021000 	.word	0x40021000
 8004b44:	20000000 	.word	0x20000000
 8004b48:	0800abb8 	.word	0x0800abb8

08004b4c <HAL_RCC_GetClockConfig>:
{
 8004b4c:	b538      	push	{r3, r4, r5, lr}
  assert_param(RCC_ClkInitStruct != NULL);
 8004b4e:	4604      	mov	r4, r0
{
 8004b50:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != NULL);
 8004b52:	b1d0      	cbz	r0, 8004b8a <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != NULL);
 8004b54:	b305      	cbz	r5, 8004b98 <HAL_RCC_GetClockConfig+0x4c>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b56:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <HAL_RCC_GetClockConfig+0x58>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b5a:	6022      	str	r2, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b5c:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b5e:	4912      	ldr	r1, [pc, #72]	@ (8004ba8 <HAL_RCC_GetClockConfig+0x5c>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b60:	f002 0203 	and.w	r2, r2, #3
 8004b64:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004b6c:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004b74:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	08db      	lsrs	r3, r3, #3
 8004b7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b7e:	6123      	str	r3, [r4, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b80:	680b      	ldr	r3, [r1, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	602b      	str	r3, [r5, #0]
}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != NULL);
 8004b8a:	f240 5121 	movw	r1, #1313	@ 0x521
 8004b8e:	4807      	ldr	r0, [pc, #28]	@ (8004bac <HAL_RCC_GetClockConfig+0x60>)
 8004b90:	f7fc ffa8 	bl	8001ae4 <assert_failed>
  assert_param(pFLatency != NULL);
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	d1de      	bne.n	8004b56 <HAL_RCC_GetClockConfig+0xa>
 8004b98:	f240 5122 	movw	r1, #1314	@ 0x522
 8004b9c:	4803      	ldr	r0, [pc, #12]	@ (8004bac <HAL_RCC_GetClockConfig+0x60>)
 8004b9e:	f7fc ffa1 	bl	8001ae4 <assert_failed>
 8004ba2:	e7d8      	b.n	8004b56 <HAL_RCC_GetClockConfig+0xa>
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	40022000 	.word	0x40022000
 8004bac:	0800acf0 	.word	0x0800acf0

08004bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004bb4:	6803      	ldr	r3, [r0, #0]
{
 8004bb6:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004bb8:	06dd      	lsls	r5, r3, #27
{
 8004bba:	b082      	sub	sp, #8
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004bbc:	d063      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xd6>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bbe:	07d8      	lsls	r0, r3, #31
 8004bc0:	d539      	bpl.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    FlagStatus pwrclkchanged = RESET;

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
 8004bc8:	d17b      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x112>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bca:	4b47      	ldr	r3, [pc, #284]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	00d1      	lsls	r1, r2, #3
 8004bd0:	d45f      	bmi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4d45      	ldr	r5, [pc, #276]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bda:	61da      	str	r2, [r3, #28]
 8004bdc:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004bde:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	05da      	lsls	r2, r3, #23
 8004bec:	d556      	bpl.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xec>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bee:	4d3e      	ldr	r5, [pc, #248]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf0:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf2:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004bf8:	d011      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004bfa:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d00d      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c02:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c04:	2701      	movs	r7, #1
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c06:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c08:	4a39      	ldr	r2, [pc, #228]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c0e:	f8c2 7440 	str.w	r7, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c12:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c16:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 8004c18:	6229      	str	r1, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c1a:	d457      	bmi.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x11c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1c:	6861      	ldr	r1, [r4, #4]
 8004c1e:	4a32      	ldr	r2, [pc, #200]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004c20:	6a13      	ldr	r3, [r2, #32]
 8004c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c26:	430b      	orrs	r3, r1
 8004c28:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c2a:	b11e      	cbz	r6, 8004c34 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2c:	69d3      	ldr	r3, [r2, #28]
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	079a      	lsls	r2, r3, #30
 8004c38:	d50f      	bpl.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004c3a:	68a1      	ldr	r1, [r4, #8]
 8004c3c:	f431 4240 	bics.w	r2, r1, #49152	@ 0xc000
 8004c40:	d005      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004c42:	21b7      	movs	r1, #183	@ 0xb7
 8004c44:	482b      	ldr	r0, [pc, #172]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004c46:	f7fc ff4d 	bl	8001ae4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c4a:	68a1      	ldr	r1, [r4, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c4c:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c4e:	4826      	ldr	r0, [pc, #152]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004c50:	6842      	ldr	r2, [r0, #4]
 8004c52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004c56:	430a      	orrs	r2, r1
 8004c58:	6042      	str	r2, [r0, #4]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c5a:	06db      	lsls	r3, r3, #27
 8004c5c:	d50f      	bpl.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004c5e:	6962      	ldr	r2, [r4, #20]
 8004c60:	f432 0380 	bics.w	r3, r2, #4194304	@ 0x400000
 8004c64:	d005      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004c66:	f240 1113 	movw	r1, #275	@ 0x113
 8004c6a:	4822      	ldr	r0, [pc, #136]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004c6c:	f7fc ff3a 	bl	8001ae4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c70:	6962      	ldr	r2, [r4, #20]
 8004c72:	491d      	ldr	r1, [pc, #116]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004c74:	684b      	ldr	r3, [r1, #4]
 8004c76:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c7e:	2000      	movs	r0, #0
}
 8004c80:	b002      	add	sp, #8
 8004c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004c86:	216a      	movs	r1, #106	@ 0x6a
 8004c88:	481a      	ldr	r0, [pc, #104]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004c8a:	f7fc ff2b 	bl	8001ae4 <assert_failed>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	e795      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe>
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c92:	4d16      	ldr	r5, [pc, #88]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    FlagStatus pwrclkchanged = RESET;
 8004c94:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	05da      	lsls	r2, r3, #23
 8004c9a:	d4a8      	bmi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fe5e 	bl	8002964 <HAL_GetTick>
 8004ca8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	05db      	lsls	r3, r3, #23
 8004cae:	d49e      	bmi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb0:	f7fd fe58 	bl	8002964 <HAL_GetTick>
 8004cb4:	1bc0      	subs	r0, r0, r7
 8004cb6:	2864      	cmp	r0, #100	@ 0x64
 8004cb8:	d9f7      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004cc2:	2172      	movs	r1, #114	@ 0x72
 8004cc4:	480b      	ldr	r0, [pc, #44]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004cc6:	f7fc ff0d 	bl	8001ae4 <assert_failed>
 8004cca:	e77e      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1a>
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fe4a 	bl	8002964 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004cd4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	6a2b      	ldr	r3, [r5, #32]
 8004cd8:	0799      	lsls	r1, r3, #30
 8004cda:	d49f      	bmi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fe42 	bl	8002964 <HAL_GetTick>
 8004ce0:	1bc0      	subs	r0, r0, r7
 8004ce2:	4540      	cmp	r0, r8
 8004ce4:	d9f7      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8004ce6:	e7e8      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	42420000 	.word	0x42420000
 8004cf4:	0800ad3c 	.word	0x0800ad3c

08004cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfc:	461e      	mov	r6, r3
 8004cfe:	4614      	mov	r4, r2
 8004d00:	b082      	sub	sp, #8
 8004d02:	460d      	mov	r5, r1
 8004d04:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d06:	f7fd fe2d 	bl	8002964 <HAL_GetTick>
 8004d0a:	4426      	add	r6, r4
 8004d0c:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8004d0e:	f7fd fe29 	bl	8002964 <HAL_GetTick>
 8004d12:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d14:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004d1c:	fb06 f303 	mul.w	r3, r6, r3
 8004d20:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	e001      	b.n	8004d2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	1c63      	adds	r3, r4, #1
 8004d28:	d107      	bne.n	8004d3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2a:	6893      	ldr	r3, [r2, #8]
 8004d2c:	ea35 0303 	bics.w	r3, r5, r3
 8004d30:	d0f9      	beq.n	8004d26 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004d32:	2000      	movs	r0, #0
}
 8004d34:	b002      	add	sp, #8
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d3a:	f7fd fe13 	bl	8002964 <HAL_GetTick>
 8004d3e:	eba0 0008 	sub.w	r0, r0, r8
 8004d42:	42b0      	cmp	r0, r6
 8004d44:	d207      	bcs.n	8004d56 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
      if (count == 0U)
 8004d46:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004d48:	2b00      	cmp	r3, #0
      count--;
 8004d4a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004d4c:	bf08      	it	eq
 8004d4e:	2600      	moveq	r6, #0
      count--;
 8004d50:	3b01      	subs	r3, #1
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	e7e5      	b.n	8004d22 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d56:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d5a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d64:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d66:	d013      	beq.n	8004d90 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d6a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004d6e:	d107      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d7e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004d80:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004d82:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004d84:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	f887 2051 	strb.w	r2, [r7, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d8a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d8e:	e7d1      	b.n	8004d34 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004d96:	d002      	beq.n	8004d9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d98:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004d9c:	d1e4      	bne.n	8004d68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e7df      	b.n	8004d68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_SPI_Init>:
  if (hspi == NULL)
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f000 8104 	beq.w	8004fba <HAL_SPI_Init+0x20e>
{
 8004db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004db4:	4a91      	ldr	r2, [pc, #580]	@ (8004ffc <HAL_SPI_Init+0x250>)
 8004db6:	6803      	ldr	r3, [r0, #0]
 8004db8:	4604      	mov	r4, r0
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00c      	beq.n	8004dd8 <HAL_SPI_Init+0x2c>
 8004dbe:	f5a2 4278 	sub.w	r2, r2, #63488	@ 0xf800
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d008      	beq.n	8004dd8 <HAL_SPI_Init+0x2c>
 8004dc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_SPI_Init+0x2c>
 8004dce:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8004dd2:	488b      	ldr	r0, [pc, #556]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004dd4:	f7fc fe86 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	b13b      	cbz	r3, 8004dec <HAL_SPI_Init+0x40>
 8004ddc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004de0:	d004      	beq.n	8004dec <HAL_SPI_Init+0x40>
 8004de2:	f240 1157 	movw	r1, #343	@ 0x157
 8004de6:	4886      	ldr	r0, [pc, #536]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004de8:	f7fc fe7c 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004dec:	68a3      	ldr	r3, [r4, #8]
 8004dee:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 8004df2:	f040 8082 	bne.w	8004efa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
 8004dfc:	d004      	beq.n	8004e08 <HAL_SPI_Init+0x5c>
 8004dfe:	f240 1159 	movw	r1, #345	@ 0x159
 8004e02:	487f      	ldr	r0, [pc, #508]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004e04:	f7fc fe6e 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e08:	69a3      	ldr	r3, [r4, #24]
 8004e0a:	f433 7200 	bics.w	r2, r3, #512	@ 0x200
 8004e0e:	d003      	beq.n	8004e18 <HAL_SPI_Init+0x6c>
 8004e10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e14:	f040 80c7 	bne.w	8004fa6 <HAL_SPI_Init+0x1fa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004e18:	69e3      	ldr	r3, [r4, #28]
 8004e1a:	b183      	cbz	r3, 8004e3e <HAL_SPI_Init+0x92>
 8004e1c:	2b18      	cmp	r3, #24
 8004e1e:	f240 80a9 	bls.w	8004f74 <HAL_SPI_Init+0x1c8>
 8004e22:	3b20      	subs	r3, #32
 8004e24:	2b18      	cmp	r3, #24
 8004e26:	d805      	bhi.n	8004e34 <HAL_SPI_Init+0x88>
 8004e28:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	07de      	lsls	r6, r3, #31
 8004e32:	d404      	bmi.n	8004e3e <HAL_SPI_Init+0x92>
 8004e34:	f240 115b 	movw	r1, #347	@ 0x15b
 8004e38:	4871      	ldr	r0, [pc, #452]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004e3a:	f7fc fe53 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004e3e:	6a23      	ldr	r3, [r4, #32]
 8004e40:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 8004e44:	d163      	bne.n	8004f0e <HAL_SPI_Init+0x162>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004e46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d168      	bne.n	8004f1e <HAL_SPI_Init+0x172>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	f033 0302 	bics.w	r3, r3, #2
 8004e52:	f040 80a2 	bne.w	8004f9a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004e56:	6963      	ldr	r3, [r4, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d904      	bls.n	8004e66 <HAL_SPI_Init+0xba>
 8004e5c:	f240 1163 	movw	r1, #355	@ 0x163
 8004e60:	4867      	ldr	r0, [pc, #412]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004e62:	f7fc fe3f 	bl	8001ae4 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6c:	f000 80a7 	beq.w	8004fbe <HAL_SPI_Init+0x212>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e74:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e76:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e7c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8081 	beq.w	8004f88 <HAL_SPI_Init+0x1dc>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e86:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e8a:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e90:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e92:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8004e96:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e9e:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea2:	6926      	ldr	r6, [r4, #16]
 8004ea4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f006 0602 	and.w	r6, r6, #2
 8004eae:	4333      	orrs	r3, r6
 8004eb0:	6966      	ldr	r6, [r4, #20]
 8004eb2:	69a1      	ldr	r1, [r4, #24]
 8004eb4:	6a27      	ldr	r7, [r4, #32]
 8004eb6:	ea06 060c 	and.w	r6, r6, ip
 8004eba:	4333      	orrs	r3, r6
 8004ebc:	69e6      	ldr	r6, [r4, #28]
 8004ebe:	f007 0e80 	and.w	lr, r7, #128	@ 0x80
 8004ec2:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8004ec6:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004eca:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 8004ecc:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ece:	4333      	orrs	r3, r6
 8004ed0:	ea43 030e 	orr.w	r3, r3, lr
 8004ed4:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8004ed6:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ed8:	0c09      	lsrs	r1, r1, #16
 8004eda:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8004ede:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004ee2:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ee6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ee8:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 8004eea:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ef0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef2:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef4:	f884 c051 	strb.w	ip, [r4, #81]	@ 0x51
}
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004efe:	f43f af7a 	beq.w	8004df6 <HAL_SPI_Init+0x4a>
 8004f02:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8004f06:	483e      	ldr	r0, [pc, #248]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004f08:	f7fc fdec 	bl	8001ae4 <assert_failed>
 8004f0c:	e773      	b.n	8004df6 <HAL_SPI_Init+0x4a>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004f0e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004f12:	483b      	ldr	r0, [pc, #236]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004f14:	f7fc fde6 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004f18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d096      	beq.n	8004e4c <HAL_SPI_Init+0xa0>
 8004f1e:	f240 115f 	movw	r1, #351	@ 0x15f
 8004f22:	4837      	ldr	r0, [pc, #220]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004f24:	f7fc fdde 	bl	8001ae4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d08e      	beq.n	8004e4c <HAL_SPI_Init+0xa0>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f2e:	69e3      	ldr	r3, [r4, #28]
 8004f30:	b17b      	cbz	r3, 8004f52 <HAL_SPI_Init+0x1a6>
 8004f32:	2b18      	cmp	r3, #24
 8004f34:	d911      	bls.n	8004f5a <HAL_SPI_Init+0x1ae>
 8004f36:	3b20      	subs	r3, #32
 8004f38:	2b18      	cmp	r3, #24
 8004f3a:	d805      	bhi.n	8004f48 <HAL_SPI_Init+0x19c>
 8004f3c:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	07da      	lsls	r2, r3, #31
 8004f46:	d404      	bmi.n	8004f52 <HAL_SPI_Init+0x1a6>
 8004f48:	f240 1171 	movw	r1, #369	@ 0x171
 8004f4c:	482c      	ldr	r0, [pc, #176]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004f4e:	f7fc fdc9 	bl	8001ae4 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f52:	2300      	movs	r3, #0
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	6163      	str	r3, [r4, #20]
 8004f58:	e78c      	b.n	8004e74 <HAL_SPI_Init+0xc8>
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	d9f4      	bls.n	8004f48 <HAL_SPI_Init+0x19c>
 8004f5e:	4a29      	ldr	r2, [pc, #164]	@ (8005004 <HAL_SPI_Init+0x258>)
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	07db      	lsls	r3, r3, #31
 8004f66:	d4f4      	bmi.n	8004f52 <HAL_SPI_Init+0x1a6>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f68:	f240 1171 	movw	r1, #369	@ 0x171
 8004f6c:	4824      	ldr	r0, [pc, #144]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004f6e:	f7fc fdb9 	bl	8001ae4 <assert_failed>
 8004f72:	e7ee      	b.n	8004f52 <HAL_SPI_Init+0x1a6>
 8004f74:	2b07      	cmp	r3, #7
 8004f76:	f67f af5d 	bls.w	8004e34 <HAL_SPI_Init+0x88>
 8004f7a:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <HAL_SPI_Init+0x258>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	07dd      	lsls	r5, r3, #31
 8004f82:	f57f af57 	bpl.w	8004e34 <HAL_SPI_Init+0x88>
 8004f86:	e75a      	b.n	8004e3e <HAL_SPI_Init+0x92>
    HAL_SPI_MspInit(hspi);
 8004f88:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004f8a:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8004f8e:	f7fd f99d 	bl	80022cc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f92:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004f94:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8004f98:	e775      	b.n	8004e86 <HAL_SPI_Init+0xda>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004f9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f9e:	4818      	ldr	r0, [pc, #96]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004fa0:	f7fc fda0 	bl	8001ae4 <assert_failed>
 8004fa4:	e757      	b.n	8004e56 <HAL_SPI_Init+0xaa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004fa6:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8004faa:	4815      	ldr	r0, [pc, #84]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004fac:	f7fc fd9a 	bl	8001ae4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004fb0:	69e3      	ldr	r3, [r4, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f43f af43 	beq.w	8004e3e <HAL_SPI_Init+0x92>
 8004fb8:	e730      	b.n	8004e1c <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8004fba:	2001      	movs	r0, #1
}
 8004fbc:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004fbe:	69e3      	ldr	r3, [r4, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f43f af57 	beq.w	8004e74 <HAL_SPI_Init+0xc8>
 8004fc6:	2b18      	cmp	r3, #24
 8004fc8:	d90f      	bls.n	8004fea <HAL_SPI_Init+0x23e>
 8004fca:	3b20      	subs	r3, #32
 8004fcc:	2b18      	cmp	r3, #24
 8004fce:	d806      	bhi.n	8004fde <HAL_SPI_Init+0x232>
 8004fd0:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	07d8      	lsls	r0, r3, #31
 8004fda:	f53f af4b 	bmi.w	8004e74 <HAL_SPI_Init+0xc8>
 8004fde:	f240 1167 	movw	r1, #359	@ 0x167
 8004fe2:	4807      	ldr	r0, [pc, #28]	@ (8005000 <HAL_SPI_Init+0x254>)
 8004fe4:	f7fc fd7e 	bl	8001ae4 <assert_failed>
 8004fe8:	e744      	b.n	8004e74 <HAL_SPI_Init+0xc8>
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	d9f7      	bls.n	8004fde <HAL_SPI_Init+0x232>
 8004fee:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <HAL_SPI_Init+0x258>)
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	07d9      	lsls	r1, r3, #31
 8004ff6:	d5f2      	bpl.n	8004fde <HAL_SPI_Init+0x232>
 8004ff8:	e73c      	b.n	8004e74 <HAL_SPI_Init+0xc8>
 8004ffa:	bf00      	nop
 8004ffc:	40013000 	.word	0x40013000
 8005000:	0800ad78 	.word	0x0800ad78
 8005004:	01010100 	.word	0x01010100

08005008 <HAL_SPI_Transmit>:
{
 8005008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800500c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800500e:	6883      	ldr	r3, [r0, #8]
{
 8005010:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005012:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
{
 8005016:	4688      	mov	r8, r1
 8005018:	4691      	mov	r9, r2
 800501a:	b083      	sub	sp, #12
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800501c:	d004      	beq.n	8005028 <HAL_SPI_Transmit+0x20>
 800501e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8005022:	4865      	ldr	r0, [pc, #404]	@ (80051b8 <HAL_SPI_Transmit+0x1b0>)
 8005024:	f7fc fd5e 	bl	8001ae4 <assert_failed>
  __HAL_LOCK(hspi);
 8005028:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800502c:	2b01      	cmp	r3, #1
 800502e:	d060      	beq.n	80050f2 <HAL_SPI_Transmit+0xea>
 8005030:	2301      	movs	r3, #1
 8005032:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005036:	f7fd fc95 	bl	8002964 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800503a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 800503e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005040:	2b01      	cmp	r3, #1
 8005042:	b2df      	uxtb	r7, r3
 8005044:	d007      	beq.n	8005056 <HAL_SPI_Transmit+0x4e>
    errorcode = HAL_BUSY;
 8005046:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8005048:	2300      	movs	r3, #0
}
 800504a:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 800504c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005050:	b003      	add	sp, #12
 8005052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8005056:	f1b8 0f00 	cmp.w	r8, #0
 800505a:	d0f5      	beq.n	8005048 <HAL_SPI_Transmit+0x40>
 800505c:	f1b9 0f00 	cmp.w	r9, #0
 8005060:	d0f2      	beq.n	8005048 <HAL_SPI_Transmit+0x40>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005062:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005064:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005066:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506a:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506c:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005072:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005074:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005076:	f8a4 9036 	strh.w	r9, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800507a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferCount = 0U;
 800507c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800507e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005080:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
    __HAL_SPI_DISABLE(hspi);
 8005084:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8005086:	f8a4 9034 	strh.w	r9, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508a:	d05e      	beq.n	800514a <HAL_SPI_Transmit+0x142>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	0652      	lsls	r2, r2, #25
 8005090:	d403      	bmi.n	800509a <HAL_SPI_Transmit+0x92>
    __HAL_SPI_ENABLE(hspi);
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005098:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509a:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509c:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509e:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80050a2:	d02b      	beq.n	80050fc <HAL_SPI_Transmit+0xf4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a4:	2900      	cmp	r1, #0
 80050a6:	d059      	beq.n	800515c <HAL_SPI_Transmit+0x154>
 80050a8:	f1b9 0f01 	cmp.w	r9, #1
 80050ac:	d056      	beq.n	800515c <HAL_SPI_Transmit+0x154>
    while (hspi->TxXferCount > 0U)
 80050ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	b973      	cbnz	r3, 80050d2 <HAL_SPI_Transmit+0xca>
 80050b4:	e05d      	b.n	8005172 <HAL_SPI_Transmit+0x16a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80050bc:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80050c0:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c2:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 80050c4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80050c8:	86e1      	strh	r1, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80050ca:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80050cc:	b289      	uxth	r1, r1
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d04f      	beq.n	8005172 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	0792      	lsls	r2, r2, #30
 80050d8:	d4ed      	bmi.n	80050b6 <HAL_SPI_Transmit+0xae>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050da:	f7fd fc43 	bl	8002964 <HAL_GetTick>
 80050de:	1b80      	subs	r0, r0, r6
 80050e0:	42a8      	cmp	r0, r5
 80050e2:	d3f2      	bcc.n	80050ca <HAL_SPI_Transmit+0xc2>
 80050e4:	1c6b      	adds	r3, r5, #1
 80050e6:	d0f0      	beq.n	80050ca <HAL_SPI_Transmit+0xc2>
          hspi->State = HAL_SPI_STATE_READY;
 80050e8:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 80050ea:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80050ec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          goto error;
 80050f0:	e7aa      	b.n	8005048 <HAL_SPI_Transmit+0x40>
  __HAL_LOCK(hspi);
 80050f2:	2702      	movs	r7, #2
}
 80050f4:	4638      	mov	r0, r7
 80050f6:	b003      	add	sp, #12
 80050f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fc:	2900      	cmp	r1, #0
 80050fe:	d156      	bne.n	80051ae <HAL_SPI_Transmit+0x1a6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005100:	4642      	mov	r2, r8
 8005102:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005106:	60d9      	str	r1, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800510a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800510c:	3a01      	subs	r2, #1
 800510e:	b292      	uxth	r2, r2
 8005110:	86e2      	strh	r2, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005112:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005114:	b292      	uxth	r2, r2
 8005116:	b96a      	cbnz	r2, 8005134 <HAL_SPI_Transmit+0x12c>
 8005118:	e02b      	b.n	8005172 <HAL_SPI_Transmit+0x16a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800511c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005120:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005122:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005126:	3b01      	subs	r3, #1
 8005128:	b29b      	uxth	r3, r3
 800512a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800512c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	b1fb      	cbz	r3, 8005172 <HAL_SPI_Transmit+0x16a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	0790      	lsls	r0, r2, #30
 8005138:	d4ef      	bmi.n	800511a <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800513a:	f7fd fc13 	bl	8002964 <HAL_GetTick>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	42a8      	cmp	r0, r5
 8005142:	d3f3      	bcc.n	800512c <HAL_SPI_Transmit+0x124>
 8005144:	1c69      	adds	r1, r5, #1
 8005146:	d0f1      	beq.n	800512c <HAL_SPI_Transmit+0x124>
 8005148:	e7ce      	b.n	80050e8 <HAL_SPI_Transmit+0xe0>
    __HAL_SPI_DISABLE(hspi);
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e797      	b.n	800508c <HAL_SPI_Transmit+0x84>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515c:	f898 2000 	ldrb.w	r2, [r8]
 8005160:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005162:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005164:	3301      	adds	r3, #1
 8005166:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005168:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800516a:	3b01      	subs	r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005170:	e79d      	b.n	80050ae <HAL_SPI_Transmit+0xa6>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	4633      	mov	r3, r6
 8005174:	462a      	mov	r2, r5
 8005176:	2180      	movs	r1, #128	@ 0x80
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff fdbd 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800517e:	b120      	cbz	r0, 800518a <HAL_SPI_Transmit+0x182>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005180:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005182:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005184:	4313      	orrs	r3, r2
 8005186:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005188:	6562      	str	r2, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	b933      	cbnz	r3, 800519c <HAL_SPI_Transmit+0x194>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	68d3      	ldr	r3, [r2, #12]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	6893      	ldr	r3, [r2, #8]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800519c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f47f af52 	bne.w	8005048 <HAL_SPI_Transmit+0x40>
    hspi->State = HAL_SPI_STATE_READY;
 80051a4:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051a6:	461f      	mov	r7, r3
    hspi->State = HAL_SPI_STATE_READY;
 80051a8:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 80051ac:	e74c      	b.n	8005048 <HAL_SPI_Transmit+0x40>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ae:	f1b9 0f01 	cmp.w	r9, #1
 80051b2:	d1ae      	bne.n	8005112 <HAL_SPI_Transmit+0x10a>
 80051b4:	e7a4      	b.n	8005100 <HAL_SPI_Transmit+0xf8>
 80051b6:	bf00      	nop
 80051b8:	0800ad78 	.word	0x0800ad78

080051bc <HAL_SPI_Transmit_DMA>:
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80051bc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
{
 80051be:	b570      	push	{r4, r5, r6, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	460e      	mov	r6, r1
 80051c4:	4615      	mov	r5, r2
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d061      	beq.n	800528e <HAL_SPI_Transmit_DMA+0xd2>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
 80051d0:	d004      	beq.n	80051dc <HAL_SPI_Transmit_DMA+0x20>
 80051d2:	f240 61a5 	movw	r1, #1701	@ 0x6a5
 80051d6:	4832      	ldr	r0, [pc, #200]	@ (80052a0 <HAL_SPI_Transmit_DMA+0xe4>)
 80051d8:	f7fc fc84 	bl	8001ae4 <assert_failed>
  __HAL_LOCK(hspi);
 80051dc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d05a      	beq.n	800529a <HAL_SPI_Transmit_DMA+0xde>
 80051e4:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80051e6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  __HAL_LOCK(hspi);
 80051ea:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d139      	bne.n	8005266 <HAL_SPI_Transmit_DMA+0xaa>
  if ((pData == NULL) || (Size == 0U))
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	d040      	beq.n	8005278 <HAL_SPI_Transmit_DMA+0xbc>
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d03e      	beq.n	8005278 <HAL_SPI_Transmit_DMA+0xbc>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051fa:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051fc:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051fe:	68a1      	ldr	r1, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005200:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005208:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 800520a:	6822      	ldr	r2, [r4, #0]
  hspi->TxXferCount = Size;
 800520c:	86e5      	strh	r5, [r4, #54]	@ 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800520e:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005210:	86a5      	strh	r5, [r4, #52]	@ 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005212:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxISR       = NULL;
 8005214:	6423      	str	r3, [r4, #64]	@ 0x40
 8005216:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = 0U;
 8005218:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800521a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521c:	d02e      	beq.n	800527c <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferAbortCallback = NULL;
 800521e:	2500      	movs	r5, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005220:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005222:	4b20      	ldr	r3, [pc, #128]	@ (80052a4 <HAL_SPI_Transmit_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005224:	4631      	mov	r1, r6
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005226:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005228:	4b1f      	ldr	r3, [pc, #124]	@ (80052a8 <HAL_SPI_Transmit_DMA+0xec>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800522a:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800522c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800522e:	4b1f      	ldr	r3, [pc, #124]	@ (80052ac <HAL_SPI_Transmit_DMA+0xf0>)
 8005230:	6303      	str	r3, [r0, #48]	@ 0x30
                                 hspi->TxXferCount))
 8005232:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  hspi->hdmatx->XferAbortCallback = NULL;
 8005234:	6345      	str	r5, [r0, #52]	@ 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005236:	b29b      	uxth	r3, r3
 8005238:	f7fd feee 	bl	8003018 <HAL_DMA_Start_IT>
 800523c:	b9c0      	cbnz	r0, 8005270 <HAL_SPI_Transmit_DMA+0xb4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	0652      	lsls	r2, r2, #25
 8005244:	d403      	bmi.n	800524e <HAL_SPI_Transmit_DMA+0x92>
    __HAL_SPI_ENABLE(hspi);
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	f042 0220 	orr.w	r2, r2, #32
 8005254:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	f042 0202 	orr.w	r2, r2, #2
 800525c:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hspi);
 800525e:	2300      	movs	r3, #0
 8005260:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005264:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 8005266:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005268:	2300      	movs	r3, #0
 800526a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800526e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005270:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005272:	f043 0310 	orr.w	r3, r3, #16
 8005276:	6563      	str	r3, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8005278:	2001      	movs	r0, #1
 800527a:	e7f5      	b.n	8005268 <HAL_SPI_Transmit_DMA+0xac>
    __HAL_SPI_DISABLE(hspi);
 800527c:	6813      	ldr	r3, [r2, #0]
 800527e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005282:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e7c7      	b.n	800521e <HAL_SPI_Transmit_DMA+0x62>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800528e:	f240 61a2 	movw	r1, #1698	@ 0x6a2
 8005292:	4803      	ldr	r0, [pc, #12]	@ (80052a0 <HAL_SPI_Transmit_DMA+0xe4>)
 8005294:	f7fc fc26 	bl	8001ae4 <assert_failed>
 8005298:	e797      	b.n	80051ca <HAL_SPI_Transmit_DMA+0xe>
  __HAL_LOCK(hspi);
 800529a:	2002      	movs	r0, #2
}
 800529c:	bd70      	pop	{r4, r5, r6, pc}
 800529e:	bf00      	nop
 80052a0:	0800ad78 	.word	0x0800ad78
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052c5 	.word	0x080052c5

080052b0 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop

080052b4 <SPI_DMAHalfTransmitCplt>:
{
 80052b4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80052b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80052b8:	f7ff fffa 	bl	80052b0 <HAL_SPI_TxHalfCpltCallback>
}
 80052bc:	bd08      	pop	{r3, pc}
 80052be:	bf00      	nop

080052c0 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop

080052c4 <SPI_DMAError>:
  hspi->State = HAL_SPI_STATE_READY;
 80052c4:	2101      	movs	r1, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052c6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80052c8:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052ca:	6802      	ldr	r2, [r0, #0]
 80052cc:	6853      	ldr	r3, [r2, #4]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80052d6:	f043 0310 	orr.w	r3, r3, #16
 80052da:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80052dc:	f880 1051 	strb.w	r1, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 80052e0:	f7ff ffee 	bl	80052c0 <HAL_SPI_ErrorCallback>
}
 80052e4:	bd08      	pop	{r3, pc}
 80052e6:	bf00      	nop

080052e8 <SPI_DMATransmitCplt>:
{
 80052e8:	b530      	push	{r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ee:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  tickstart = HAL_GetTick();
 80052f0:	f7fd fb38 	bl	8002964 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	0693      	lsls	r3, r2, #26
 80052fa:	d41f      	bmi.n	800533c <SPI_DMATransmitCplt+0x54>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052fc:	6821      	ldr	r1, [r4, #0]
 80052fe:	4603      	mov	r3, r0
 8005300:	6848      	ldr	r0, [r1, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005302:	2264      	movs	r2, #100	@ 0x64
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005304:	f020 0020 	bic.w	r0, r0, #32
 8005308:	6048      	str	r0, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800530a:	6848      	ldr	r0, [r1, #4]
 800530c:	f020 0002 	bic.w	r0, r0, #2
 8005310:	6048      	str	r0, [r1, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	4620      	mov	r0, r4
 8005316:	f7ff fcef 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800531a:	b9a0      	cbnz	r0, 8005346 <SPI_DMATransmitCplt+0x5e>
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	b933      	cbnz	r3, 800532e <SPI_DMATransmitCplt+0x46>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	68d3      	ldr	r3, [r2, #12]
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6893      	ldr	r3, [r2, #8]
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800532e:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 8005330:	2200      	movs	r2, #0
 8005332:	86e2      	strh	r2, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005334:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005338:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800533a:	b983      	cbnz	r3, 800535e <SPI_DMATransmitCplt+0x76>
  HAL_SPI_TxCpltCallback(hspi);
 800533c:	4620      	mov	r0, r4
 800533e:	f7fb ffb1 	bl	80012a4 <HAL_SPI_TxCpltCallback>
}
 8005342:	b003      	add	sp, #12
 8005344:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005346:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005356:	68a3      	ldr	r3, [r4, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e8      	bne.n	800532e <SPI_DMATransmitCplt+0x46>
 800535c:	e7e0      	b.n	8005320 <SPI_DMATransmitCplt+0x38>
      HAL_SPI_ErrorCallback(hspi);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ffae 	bl	80052c0 <HAL_SPI_ErrorCallback>
}
 8005364:	b003      	add	sp, #12
 8005366:	bd30      	pop	{r4, r5, pc}

08005368 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8005368:	6802      	ldr	r2, [r0, #0]
{
 800536a:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800536c:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800536e:	6893      	ldr	r3, [r2, #8]
{
 8005370:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005372:	f003 0c41 	and.w	ip, r3, #65	@ 0x41
 8005376:	f1bc 0f01 	cmp.w	ip, #1
{
 800537a:	b084      	sub	sp, #16
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800537c:	d04f      	beq.n	800541e <HAL_SPI_IRQHandler+0xb6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800537e:	0798      	lsls	r0, r3, #30
 8005380:	d501      	bpl.n	8005386 <HAL_SPI_IRQHandler+0x1e>
 8005382:	0608      	lsls	r0, r1, #24
 8005384:	d453      	bmi.n	800542e <HAL_SPI_IRQHandler+0xc6>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005386:	f013 0f60 	tst.w	r3, #96	@ 0x60
 800538a:	d046      	beq.n	800541a <HAL_SPI_IRQHandler+0xb2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800538c:	0688      	lsls	r0, r1, #26
 800538e:	d544      	bpl.n	800541a <HAL_SPI_IRQHandler+0xb2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005390:	0658      	lsls	r0, r3, #25
 8005392:	d50e      	bpl.n	80053b2 <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005394:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
 8005398:	2803      	cmp	r0, #3
 800539a:	d052      	beq.n	8005442 <HAL_SPI_IRQHandler+0xda>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800539c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800539e:	f040 0004 	orr.w	r0, r0, #4
 80053a2:	6560      	str	r0, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a4:	2000      	movs	r0, #0
 80053a6:	9001      	str	r0, [sp, #4]
 80053a8:	68d0      	ldr	r0, [r2, #12]
 80053aa:	9001      	str	r0, [sp, #4]
 80053ac:	6890      	ldr	r0, [r2, #8]
 80053ae:	9001      	str	r0, [sp, #4]
 80053b0:	9801      	ldr	r0, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053b2:	0698      	lsls	r0, r3, #26
 80053b4:	d50c      	bpl.n	80053d0 <HAL_SPI_IRQHandler+0x68>
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053b6:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053c0:	9003      	str	r0, [sp, #12]
 80053c2:	6893      	ldr	r3, [r2, #8]
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053d2:	b313      	cbz	r3, 800541a <HAL_SPI_IRQHandler+0xb2>
      hspi->State = HAL_SPI_STATE_READY;
 80053d4:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053d6:	6853      	ldr	r3, [r2, #4]
 80053d8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80053dc:	6053      	str	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053de:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 80053e0:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053e4:	d029      	beq.n	800543a <HAL_SPI_IRQHandler+0xd2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053e6:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80053e8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80053f0:	b140      	cbz	r0, 8005404 <HAL_SPI_IRQHandler+0x9c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053f2:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <HAL_SPI_IRQHandler+0xec>)
 80053f4:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053f6:	f7fd fe87 	bl	8003108 <HAL_DMA_Abort_IT>
 80053fa:	b118      	cbz	r0, 8005404 <HAL_SPI_IRQHandler+0x9c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005402:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005404:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005406:	b140      	cbz	r0, 800541a <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005408:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <HAL_SPI_IRQHandler+0xec>)
 800540a:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800540c:	f7fd fe7c 	bl	8003108 <HAL_DMA_Abort_IT>
 8005410:	b118      	cbz	r0, 800541a <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005412:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005418:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800541a:	b004      	add	sp, #16
 800541c:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800541e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8005422:	d0ac      	beq.n	800537e <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 8005424:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 8005426:	b004      	add	sp, #16
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800542c:	4718      	bx	r3
 800542e:	4620      	mov	r0, r4
 8005430:	6c63      	ldr	r3, [r4, #68]	@ 0x44
}
 8005432:	b004      	add	sp, #16
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 8005438:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 800543a:	4620      	mov	r0, r4
 800543c:	f7ff ff40 	bl	80052c0 <HAL_SPI_ErrorCallback>
 8005440:	e7eb      	b.n	800541a <HAL_SPI_IRQHandler+0xb2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005442:	2300      	movs	r3, #0
 8005444:	9302      	str	r3, [sp, #8]
 8005446:	68d3      	ldr	r3, [r2, #12]
 8005448:	9302      	str	r3, [sp, #8]
 800544a:	6893      	ldr	r3, [r2, #8]
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	9b02      	ldr	r3, [sp, #8]
        return;
 8005450:	e7e3      	b.n	800541a <HAL_SPI_IRQHandler+0xb2>
 8005452:	bf00      	nop
 8005454:	08005459 	.word	0x08005459

08005458 <SPI_DMAAbortOnError>:
{
 8005458:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800545a:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800545c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 800545e:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005460:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 8005462:	f7ff ff2d 	bl	80052c0 <HAL_SPI_ErrorCallback>
}
 8005466:	bd08      	pop	{r3, pc}

08005468 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop

0800546c <HAL_TIM_Base_Start_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800546c:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <HAL_TIM_Base_Start_IT+0xa8>)
 800546e:	6803      	ldr	r3, [r0, #0]
{
 8005470:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005472:	4293      	cmp	r3, r2
{
 8005474:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005476:	d01f      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 8005478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547c:	4293      	cmp	r3, r2
 800547e:	d01b      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005484:	d018      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 8005486:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800548a:	4293      	cmp	r3, r2
 800548c:	d014      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 800548e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005492:	4293      	cmp	r3, r2
 8005494:	d010      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 8005496:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800549a:	4293      	cmp	r3, r2
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 800549e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d008      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 80054a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x4c>
 80054ae:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80054b2:	4819      	ldr	r0, [pc, #100]	@ (8005518 <HAL_TIM_Base_Start_IT+0xac>)
 80054b4:	f7fc fb16 	bl	8001ae4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d127      	bne.n	8005510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c2:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c8:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	4912      	ldr	r1, [pc, #72]	@ (8005514 <HAL_TIM_Base_Start_IT+0xa8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	d011      	beq.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
 80054d6:	4a11      	ldr	r2, [pc, #68]	@ (800551c <HAL_TIM_Base_Start_IT+0xb0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e0:	d00b      	beq.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
 80054e2:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
 80054ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_Base_Start_IT+0x8e>
 80054f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d104      	bne.n	8005504 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	2a06      	cmp	r2, #6
 8005502:	d003      	beq.n	800550c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800550c:	2000      	movs	r0, #0
}
 800550e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005510:	2001      	movs	r0, #1
}
 8005512:	bd10      	pop	{r4, pc}
 8005514:	40012c00 	.word	0x40012c00
 8005518:	0800adb0 	.word	0x0800adb0
 800551c:	40013400 	.word	0x40013400

08005520 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005530:	6803      	ldr	r3, [r0, #0]
{
 8005532:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005534:	691a      	ldr	r2, [r3, #16]
{
 8005536:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005538:	0791      	lsls	r1, r2, #30
 800553a:	d502      	bpl.n	8005542 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	0792      	lsls	r2, r2, #30
 8005540:	d45f      	bmi.n	8005602 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	0750      	lsls	r0, r2, #29
 8005546:	d502      	bpl.n	800554e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	0751      	lsls	r1, r2, #29
 800554c:	d446      	bmi.n	80055dc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	0712      	lsls	r2, r2, #28
 8005552:	d502      	bpl.n	800555a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	0710      	lsls	r0, r2, #28
 8005558:	d42e      	bmi.n	80055b8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	06d2      	lsls	r2, r2, #27
 800555e:	d502      	bpl.n	8005566 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	06d0      	lsls	r0, r2, #27
 8005564:	d418      	bmi.n	8005598 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	07d1      	lsls	r1, r2, #31
 800556a:	d502      	bpl.n	8005572 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	07d2      	lsls	r2, r2, #31
 8005570:	d45d      	bmi.n	800562e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	0610      	lsls	r0, r2, #24
 8005576:	d502      	bpl.n	800557e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	0611      	lsls	r1, r2, #24
 800557c:	d45f      	bmi.n	800563e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	0652      	lsls	r2, r2, #25
 8005582:	d502      	bpl.n	800558a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	0650      	lsls	r0, r2, #25
 8005588:	d461      	bmi.n	800564e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	0691      	lsls	r1, r2, #26
 800558e:	d502      	bpl.n	8005596 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	0692      	lsls	r2, r2, #26
 8005594:	d443      	bmi.n	800561e <HAL_TIM_IRQHandler+0xee>
}
 8005596:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005598:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800559e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80055a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80055aa:	d064      	beq.n	8005676 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80055ac:	f7ff ffba 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055b2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	7722      	strb	r2, [r4, #28]
 80055b6:	e7d6      	b.n	8005566 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055bc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055be:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80055c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c6:	0799      	lsls	r1, r3, #30
 80055c8:	d152      	bne.n	8005670 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	f7ff ffa9 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7ff ffaa 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d8:	7722      	strb	r2, [r4, #28]
 80055da:	e7be      	b.n	800555a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055dc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e6:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ea:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80055ee:	d13c      	bne.n	800566a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f0:	f7ff ff96 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7ff ff97 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055fc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	7722      	strb	r2, [r4, #28]
 8005600:	e7a5      	b.n	800554e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005602:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005606:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	079b      	lsls	r3, r3, #30
 8005610:	d025      	beq.n	800565e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005612:	f7ff ff87 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005618:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	7722      	strb	r2, [r4, #28]
 800561c:	e791      	b.n	8005542 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800561e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005622:	4620      	mov	r0, r4
}
 8005624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005628:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800562a:	f000 b919 	b.w	8005860 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800562e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005634:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005636:	f7fc fa49 	bl	8001acc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	e799      	b.n	8005572 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800563e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005642:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005644:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005646:	f000 f90d 	bl	8005864 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	e797      	b.n	800557e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800564e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005652:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005654:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005656:	f7ff ff69 	bl	800552c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	e795      	b.n	800558a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	f7ff ff5f 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff ff60 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
 8005668:	e7d5      	b.n	8005616 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	f7ff ff5b 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 800566e:	e7c4      	b.n	80055fa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005670:	f7ff ff58 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 8005674:	e7ae      	b.n	80055d4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	f7ff ff53 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff ff54 	bl	8005528 <HAL_TIM_PWM_PulseFinishedCallback>
 8005680:	e796      	b.n	80055b0 <HAL_TIM_IRQHandler+0x80>
 8005682:	bf00      	nop

08005684 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005684:	4a28      	ldr	r2, [pc, #160]	@ (8005728 <TIM_Base_SetConfig+0xa4>)
{
 8005686:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005688:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800568a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	d01f      	beq.n	80056ce <TIM_Base_SetConfig+0x4a>
 800568e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005692:	4290      	cmp	r0, r2
 8005694:	d01b      	beq.n	80056ce <TIM_Base_SetConfig+0x4a>
 8005696:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800569a:	d02f      	beq.n	80056fc <TIM_Base_SetConfig+0x78>
 800569c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80056a0:	4290      	cmp	r0, r2
 80056a2:	d02b      	beq.n	80056fc <TIM_Base_SetConfig+0x78>
 80056a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056a8:	4290      	cmp	r0, r2
 80056aa:	d027      	beq.n	80056fc <TIM_Base_SetConfig+0x78>
 80056ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056b0:	4290      	cmp	r0, r2
 80056b2:	d023      	beq.n	80056fc <TIM_Base_SetConfig+0x78>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b4:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b6:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	6949      	ldr	r1, [r1, #20]
 80056ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056be:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80056c0:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c2:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c4:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056c6:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80056c8:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 80056ca:	6143      	str	r3, [r0, #20]
}
 80056cc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80056ce:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056de:	694a      	ldr	r2, [r1, #20]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	688b      	ldr	r3, [r1, #8]
}
 80056ea:	bc10      	pop	{r4}
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ee:	680b      	ldr	r3, [r1, #0]
 80056f0:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80056f2:	690b      	ldr	r3, [r1, #16]
 80056f4:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80056f6:	2301      	movs	r3, #1
 80056f8:	6143      	str	r3, [r0, #20]
}
 80056fa:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80056fc:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8005704:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005716:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8005718:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800571a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800571e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8005720:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 8005722:	6143      	str	r3, [r0, #20]
}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00

0800572c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800572c:	2800      	cmp	r0, #0
 800572e:	f000 8090 	beq.w	8005852 <HAL_TIM_Base_Init+0x126>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005732:	6803      	ldr	r3, [r0, #0]
 8005734:	4a48      	ldr	r2, [pc, #288]	@ (8005858 <HAL_TIM_Base_Init+0x12c>)
{
 8005736:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005738:	4293      	cmp	r3, r2
 800573a:	4604      	mov	r4, r0
 800573c:	d01f      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 800573e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005742:	4293      	cmp	r3, r2
 8005744:	d01b      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574a:	d018      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 800574c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005750:	4293      	cmp	r3, r2
 8005752:	d014      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 8005754:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005758:	4293      	cmp	r3, r2
 800575a:	d010      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 800575c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005760:	4293      	cmp	r3, r2
 8005762:	d00c      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 8005764:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005768:	4293      	cmp	r3, r2
 800576a:	d008      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 800576c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIM_Base_Init+0x52>
 8005774:	f240 1113 	movw	r1, #275	@ 0x113
 8005778:	4838      	ldr	r0, [pc, #224]	@ (800585c <HAL_TIM_Base_Init+0x130>)
 800577a:	f7fc f9b3 	bl	8001ae4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	f033 0210 	bics.w	r2, r3, #16
 8005784:	d00a      	beq.n	800579c <HAL_TIM_Base_Init+0x70>
 8005786:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800578a:	2a20      	cmp	r2, #32
 800578c:	d006      	beq.n	800579c <HAL_TIM_Base_Init+0x70>
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d004      	beq.n	800579c <HAL_TIM_Base_Init+0x70>
 8005792:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005796:	4831      	ldr	r0, [pc, #196]	@ (800585c <HAL_TIM_Base_Init+0x130>)
 8005798:	f7fc f9a4 	bl	8001ae4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
 80057a2:	d12e      	bne.n	8005802 <HAL_TIM_Base_Init+0xd6>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80057a4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80057a8:	68e3      	ldr	r3, [r4, #12]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d836      	bhi.n	800581e <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 80057b6:	d13b      	bne.n	8005830 <HAL_TIM_Base_Init+0x104>
  if (htim->State == HAL_TIM_STATE_RESET)
 80057b8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80057bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d040      	beq.n	8005846 <HAL_TIM_Base_Init+0x11a>
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c6:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80057d0:	f7ff ff58 	bl	8005684 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80057de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80057e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80057e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80057f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80057fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80057fe:	2000      	movs	r0, #0
}
 8005800:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005806:	d0cd      	beq.n	80057a4 <HAL_TIM_Base_Init+0x78>
 8005808:	f240 1115 	movw	r1, #277	@ 0x115
 800580c:	4813      	ldr	r0, [pc, #76]	@ (800585c <HAL_TIM_Base_Init+0x130>)
 800580e:	f7fc f969 	bl	8001ae4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005812:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005816:	68e3      	ldr	r3, [r4, #12]
 8005818:	3b01      	subs	r3, #1
 800581a:	4293      	cmp	r3, r2
 800581c:	d9c8      	bls.n	80057b0 <HAL_TIM_Base_Init+0x84>
 800581e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005822:	480e      	ldr	r0, [pc, #56]	@ (800585c <HAL_TIM_Base_Init+0x130>)
 8005824:	f7fc f95e 	bl	8001ae4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005828:	69a3      	ldr	r3, [r4, #24]
 800582a:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
 800582e:	d0c3      	beq.n	80057b8 <HAL_TIM_Base_Init+0x8c>
 8005830:	f240 1117 	movw	r1, #279	@ 0x117
 8005834:	4809      	ldr	r0, [pc, #36]	@ (800585c <HAL_TIM_Base_Init+0x130>)
 8005836:	f7fc f955 	bl	8001ae4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800583e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1be      	bne.n	80057c4 <HAL_TIM_Base_Init+0x98>
    HAL_TIM_Base_MspInit(htim);
 8005846:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8005848:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800584c:	f7ff fe0c 	bl	8005468 <HAL_TIM_Base_MspInit>
 8005850:	e7b8      	b.n	80057c4 <HAL_TIM_Base_Init+0x98>
    return HAL_ERROR;
 8005852:	2001      	movs	r0, #1
}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	0800adb0 	.word	0x0800adb0

08005860 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop

08005868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005868:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	f102 030c 	add.w	r3, r2, #12
 800586e:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f102 0c0c 	add.w	ip, r2, #12
 800587a:	e84c 3100 	strex	r1, r3, [ip]
 800587e:	2900      	cmp	r1, #0
 8005880:	d1f3      	bne.n	800586a <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	f102 0314 	add.w	r3, r2, #20
 8005886:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	f102 0c14 	add.w	ip, r2, #20
 8005892:	e84c 3100 	strex	r1, r3, [ip]
 8005896:	2900      	cmp	r1, #0
 8005898:	d1f3      	bne.n	8005882 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d005      	beq.n	80058ac <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a0:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80058a4:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80058aa:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	f102 030c 	add.w	r3, r2, #12
 80058b0:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	f102 0c0c 	add.w	ip, r2, #12
 80058bc:	e84c 3100 	strex	r1, r3, [ip]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d1f3      	bne.n	80058ac <UART_EndRxTransfer+0x44>
 80058c4:	e7ec      	b.n	80058a0 <UART_EndRxTransfer+0x38>
 80058c6:	bf00      	nop

080058c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80058ca:	6842      	ldr	r2, [r0, #4]
 80058cc:	4b34      	ldr	r3, [pc, #208]	@ (80059a0 <UART_SetConfig+0xd8>)
{
 80058ce:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d855      	bhi.n	8005980 <UART_SetConfig+0xb8>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80058d4:	68e3      	ldr	r3, [r4, #12]
 80058d6:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
 80058da:	d004      	beq.n	80058e6 <UART_SetConfig+0x1e>
 80058dc:	f640 6167 	movw	r1, #3687	@ 0xe67
 80058e0:	4830      	ldr	r0, [pc, #192]	@ (80059a4 <UART_SetConfig+0xdc>)
 80058e2:	f7fc f8ff 	bl	8001ae4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
 80058ec:	d002      	beq.n	80058f4 <UART_SetConfig+0x2c>
 80058ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058f2:	d14f      	bne.n	8005994 <UART_SetConfig+0xcc>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80058f4:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 80058f8:	6960      	ldr	r0, [r4, #20]
 80058fa:	4218      	tst	r0, r3
 80058fc:	d139      	bne.n	8005972 <UART_SetConfig+0xaa>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d037      	beq.n	8005972 <UART_SetConfig+0xaa>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	68e1      	ldr	r1, [r4, #12]
 8005906:	691a      	ldr	r2, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8005908:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800590e:	430a      	orrs	r2, r1
 8005910:	611a      	str	r2, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005912:	68d9      	ldr	r1, [r3, #12]
 8005914:	68a2      	ldr	r2, [r4, #8]
 8005916:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800591a:	f021 010c 	bic.w	r1, r1, #12
 800591e:	432a      	orrs	r2, r5
 8005920:	430a      	orrs	r2, r1
 8005922:	4302      	orrs	r2, r0
 8005924:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 800592a:	491f      	ldr	r1, [pc, #124]	@ (80059a8 <UART_SetConfig+0xe0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800592c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005930:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8005932:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005934:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8005936:	d029      	beq.n	800598c <UART_SetConfig+0xc4>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005938:	f7ff f8e8 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 800593c:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800593e:	6862      	ldr	r2, [r4, #4]
 8005940:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005944:	0092      	lsls	r2, r2, #2
 8005946:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800594a:	fbb3 f3f2 	udiv	r3, r3, r2
 800594e:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8005952:	4916      	ldr	r1, [pc, #88]	@ (80059ac <UART_SetConfig+0xe4>)
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	fba1 4203 	umull	r4, r2, r1, r3
 800595a:	0952      	lsrs	r2, r2, #5
 800595c:	fb0c 3312 	mls	r3, ip, r2, r3
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	3332      	adds	r3, #50	@ 0x32
 8005964:	fba1 1303 	umull	r1, r3, r1, r3
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800596e:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8005970:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005972:	480c      	ldr	r0, [pc, #48]	@ (80059a4 <UART_SetConfig+0xdc>)
 8005974:	f640 6169 	movw	r1, #3689	@ 0xe69
 8005978:	f7fc f8b4 	bl	8001ae4 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800597c:	6960      	ldr	r0, [r4, #20]
 800597e:	e7c0      	b.n	8005902 <UART_SetConfig+0x3a>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005980:	f640 6166 	movw	r1, #3686	@ 0xe66
 8005984:	4807      	ldr	r0, [pc, #28]	@ (80059a4 <UART_SetConfig+0xdc>)
 8005986:	f7fc f8ad 	bl	8001ae4 <assert_failed>
 800598a:	e7a3      	b.n	80058d4 <UART_SetConfig+0xc>
    pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7ff f8ce 	bl	8004b2c <HAL_RCC_GetPCLK2Freq>
 8005990:	4603      	mov	r3, r0
 8005992:	e7d4      	b.n	800593e <UART_SetConfig+0x76>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005994:	f640 6168 	movw	r1, #3688	@ 0xe68
 8005998:	4802      	ldr	r0, [pc, #8]	@ (80059a4 <UART_SetConfig+0xdc>)
 800599a:	f7fc f8a3 	bl	8001ae4 <assert_failed>
 800599e:	e7a9      	b.n	80058f4 <UART_SetConfig+0x2c>
 80059a0:	0044aa20 	.word	0x0044aa20
 80059a4:	0800ade8 	.word	0x0800ade8
 80059a8:	40013800 	.word	0x40013800
 80059ac:	51eb851f 	.word	0x51eb851f

080059b0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80059b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	4680      	mov	r8, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	4691      	mov	r9, r2
 80059ba:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059bc:	f8d8 5000 	ldr.w	r5, [r8]
 80059c0:	e001      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x16>
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	1c73      	adds	r3, r6, #1
 80059c4:	d106      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c6:	682c      	ldr	r4, [r5, #0]
 80059c8:	ea37 0404 	bics.w	r4, r7, r4
 80059cc:	d1f9      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 80059ce:	2000      	movs	r0, #0
}
 80059d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d4:	b13e      	cbz	r6, 80059e6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
 80059d6:	f7fc ffc5 	bl	8002964 <HAL_GetTick>
 80059da:	eba0 0009 	sub.w	r0, r0, r9
 80059de:	4286      	cmp	r6, r0
 80059e0:	d2ec      	bcs.n	80059bc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	f8d8 5000 	ldr.w	r5, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	f105 030c 	add.w	r3, r5, #12
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f105 010c 	add.w	r1, r5, #12
 80059f6:	e841 3200 	strex	r2, r3, [r1]
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d1f3      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	f105 0314 	add.w	r3, r5, #20
 8005a02:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	f105 0114 	add.w	r1, r5, #20
 8005a0e:	e841 3200 	strex	r2, r3, [r1]
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d1f3      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout.constprop.0+0x4e>
        huart->gState  = HAL_UART_STATE_READY;
 8005a16:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8005a18:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8005a1a:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        __HAL_UNLOCK(huart);
 8005a1e:	f888 2040 	strb.w	r2, [r8, #64]	@ 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8005a22:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        return HAL_TIMEOUT;
 8005a26:	e7d3      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x20>

08005a28 <HAL_UART_Init>:
  if (huart == NULL)
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d077      	beq.n	8005b1c <HAL_UART_Init+0xf4>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a2c:	6982      	ldr	r2, [r0, #24]
{
 8005a2e:	b510      	push	{r4, lr}
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a30:	6803      	ldr	r3, [r0, #0]
 8005a32:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	d044      	beq.n	8005ac2 <HAL_UART_Init+0x9a>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a38:	4939      	ldr	r1, [pc, #228]	@ (8005b20 <HAL_UART_Init+0xf8>)
 8005a3a:	428b      	cmp	r3, r1
 8005a3c:	d05a      	beq.n	8005af4 <HAL_UART_Init+0xcc>
 8005a3e:	f5a1 4174 	sub.w	r1, r1, #62464	@ 0xf400
 8005a42:	428b      	cmp	r3, r1
 8005a44:	d056      	beq.n	8005af4 <HAL_UART_Init+0xcc>
 8005a46:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	d052      	beq.n	8005af4 <HAL_UART_Init+0xcc>
 8005a4e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8005a52:	4834      	ldr	r0, [pc, #208]	@ (8005b24 <HAL_UART_Init+0xfc>)
 8005a54:	f7fc f846 	bl	8001ae4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005a58:	69a2      	ldr	r2, [r4, #24]
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d14a      	bne.n	8005af4 <HAL_UART_Init+0xcc>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
 8005a64:	d004      	beq.n	8005a70 <HAL_UART_Init+0x48>
 8005a66:	f240 1175 	movw	r1, #373	@ 0x175
 8005a6a:	482e      	ldr	r0, [pc, #184]	@ (8005b24 <HAL_UART_Init+0xfc>)
 8005a6c:	f7fc f83a 	bl	8001ae4 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a70:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005a74:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d049      	beq.n	8005b10 <HAL_UART_Init+0xe8>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005a7e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005a84:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a86:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a8e:	f7ff ff1b 	bl	80058c8 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005a9a:	4610      	mov	r0, r2
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	6919      	ldr	r1, [r3, #16]
 8005a9e:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8005aa2:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8005aaa:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005aac:	68d9      	ldr	r1, [r3, #12]
 8005aae:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8005ab2:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	6462      	str	r2, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ab6:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abe:	6362      	str	r2, [r4, #52]	@ 0x34
}
 8005ac0:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005ac2:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_UART_Init+0xf8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d0ca      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005ac8:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d0c6      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005ad0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d0c2      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005ad8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d0be      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005ae0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d0ba      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005ae8:	f240 1173 	movw	r1, #371	@ 0x173
 8005aec:	480d      	ldr	r0, [pc, #52]	@ (8005b24 <HAL_UART_Init+0xfc>)
 8005aee:	f7fb fff9 	bl	8001ae4 <assert_failed>
 8005af2:	e7b4      	b.n	8005a5e <HAL_UART_Init+0x36>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005af4:	f422 7300 	bic.w	r3, r2, #512	@ 0x200
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	d0af      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005afe:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005b02:	d0ac      	beq.n	8005a5e <HAL_UART_Init+0x36>
 8005b04:	f240 116f 	movw	r1, #367	@ 0x16f
 8005b08:	4806      	ldr	r0, [pc, #24]	@ (8005b24 <HAL_UART_Init+0xfc>)
 8005b0a:	f7fb ffeb 	bl	8001ae4 <assert_failed>
 8005b0e:	e7a6      	b.n	8005a5e <HAL_UART_Init+0x36>
    HAL_UART_MspInit(huart);
 8005b10:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8005b12:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005b16:	f7fc fdf5 	bl	8002704 <HAL_UART_MspInit>
 8005b1a:	e7af      	b.n	8005a7c <HAL_UART_Init+0x54>
    return HAL_ERROR;
 8005b1c:	2001      	movs	r0, #1
}
 8005b1e:	4770      	bx	lr
 8005b20:	40013800 	.word	0x40013800
 8005b24:	0800ade8 	.word	0x0800ade8

08005b28 <HAL_UART_Transmit>:
{
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d13a      	bne.n	8005bac <HAL_UART_Transmit+0x84>
    if ((pData == NULL) || (Size == 0U))
 8005b36:	460d      	mov	r5, r1
 8005b38:	b109      	cbz	r1, 8005b3e <HAL_UART_Transmit+0x16>
 8005b3a:	4617      	mov	r7, r2
 8005b3c:	b912      	cbnz	r2, 8005b44 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8005b3e:	2001      	movs	r0, #1
}
 8005b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b44:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	f8c0 8044 	str.w	r8, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b50:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8005b54:	f7fc ff06 	bl	8002964 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8005b5a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8005b60:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 8005b62:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	d10f      	bne.n	8005b86 <HAL_UART_Transmit+0x5e>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b96b      	cbnz	r3, 8005b86 <HAL_UART_Transmit+0x5e>
 8005b6a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005b6c:	461d      	mov	r5, r3
 8005b6e:	e00a      	b.n	8005b86 <HAL_UART_Transmit+0x5e>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b70:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005b74:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8005b76:	f8b4 c026 	ldrh.w	ip, [r4, #38]	@ 0x26
 8005b7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b7e:	fa1f fc8c 	uxth.w	ip, ip
 8005b82:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b86:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	b1ab      	cbz	r3, 8005bb8 <HAL_UART_Transmit+0x90>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8c:	4633      	mov	r3, r6
 8005b8e:	463a      	mov	r2, r7
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff ff0c 	bl	80059b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005b98:	b958      	cbnz	r0, 8005bb2 <HAL_UART_Transmit+0x8a>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d1e7      	bne.n	8005b70 <HAL_UART_Transmit+0x48>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba0:	f838 2b02 	ldrh.w	r2, [r8], #2
 8005ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005baa:	e7e4      	b.n	8005b76 <HAL_UART_Transmit+0x4e>
    return HAL_BUSY;
 8005bac:	2002      	movs	r0, #2
}
 8005bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 8005bb2:	2003      	movs	r0, #3
}
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb8:	4633      	mov	r3, r6
 8005bba:	463a      	mov	r2, r7
 8005bbc:	2140      	movs	r1, #64	@ 0x40
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7ff fef6 	bl	80059b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1f4      	bne.n	8005bb2 <HAL_UART_Transmit+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8005bce:	e7b7      	b.n	8005b40 <HAL_UART_Transmit+0x18>

08005bd0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop

08005bd8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <UART_DMAAbortOnError>:
{
 8005bdc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005bde:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8005be2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005be4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8005be6:	f7ff fff7 	bl	8005bd8 <HAL_UART_ErrorCallback>
}
 8005bea:	bd08      	pop	{r3, pc}

08005bec <HAL_UARTEx_RxEventCallback>:
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005bf4:	2b22      	cmp	r3, #34	@ 0x22
 8005bf6:	d157      	bne.n	8005ca8 <UART_Receive_IT.isra.0+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bfa:	6801      	ldr	r1, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c00:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c02:	d044      	beq.n	8005c8e <UART_Receive_IT.isra.0+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d14b      	bne.n	8005ca0 <UART_Receive_IT.isra.0+0xb0>
 8005c08:	6903      	ldr	r3, [r0, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d148      	bne.n	8005ca0 <UART_Receive_IT.isra.0+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0e:	684b      	ldr	r3, [r1, #4]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005c14:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005c16:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8005c18:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8005c1a:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d140      	bne.n	8005ca8 <UART_Receive_IT.isra.0+0xb8>
      huart->RxState = HAL_UART_STATE_READY;
 8005c26:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c2a:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005c2c:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c2e:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005c30:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c32:	f021 0120 	bic.w	r1, r1, #32
 8005c36:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c38:	68d1      	ldr	r1, [r2, #12]
 8005c3a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005c3e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c40:	6951      	ldr	r1, [r2, #20]
 8005c42:	f021 0101 	bic.w	r1, r1, #1
 8005c46:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005c48:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c4c:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8005c50:	2901      	cmp	r1, #1
 8005c52:	d12a      	bne.n	8005caa <UART_Receive_IT.isra.0+0xba>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c54:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	f102 030c 	add.w	r3, r2, #12
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	f102 0c0c 	add.w	ip, r2, #12
 8005c66:	e84c 3100 	strex	r1, r3, [ip]
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	d1f3      	bne.n	8005c56 <UART_Receive_IT.isra.0+0x66>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	06db      	lsls	r3, r3, #27
 8005c72:	d506      	bpl.n	8005c82 <UART_Receive_IT.isra.0+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c74:	2300      	movs	r3, #0
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	6853      	ldr	r3, [r2, #4]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c82:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8005c84:	f7ff ffb2 	bl	8005bec <HAL_UARTEx_RxEventCallback>
}
 8005c88:	b003      	add	sp, #12
 8005c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8e:	6903      	ldr	r3, [r0, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1bc      	bne.n	8005c0e <UART_Receive_IT.isra.0+0x1e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8005c9e:	e7bb      	b.n	8005c18 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca0:	684b      	ldr	r3, [r1, #4]
 8005ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca6:	e7b4      	b.n	8005c12 <UART_Receive_IT.isra.0+0x22>
 8005ca8:	4770      	bx	lr
        HAL_UART_RxCpltCallback(huart);
 8005caa:	f7ff ff93 	bl	8005bd4 <HAL_UART_RxCpltCallback>
}
 8005cae:	b003      	add	sp, #12
 8005cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08005cb4 <HAL_UART_IRQHandler>:
{
 8005cb4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cb6:	6805      	ldr	r5, [r0, #0]
{
 8005cb8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	462a      	mov	r2, r5
  if (errorflags == RESET)
 8005cbe:	f013 0f0f 	tst.w	r3, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc2:	68ee      	ldr	r6, [r5, #12]
{
 8005cc4:	b082      	sub	sp, #8
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cc6:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8005cc8:	d16f      	bne.n	8005daa <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cca:	0699      	lsls	r1, r3, #26
 8005ccc:	d502      	bpl.n	8005cd4 <HAL_UART_IRQHandler+0x20>
 8005cce:	06b5      	lsls	r5, r6, #26
 8005cd0:	f100 80c3 	bmi.w	8005e5a <HAL_UART_IRQHandler+0x1a6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005cd6:	2901      	cmp	r1, #1
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cda:	0618      	lsls	r0, r3, #24
 8005cdc:	d502      	bpl.n	8005ce4 <HAL_UART_IRQHandler+0x30>
 8005cde:	0631      	lsls	r1, r6, #24
 8005ce0:	f100 8091 	bmi.w	8005e06 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ce4:	065b      	lsls	r3, r3, #25
 8005ce6:	d502      	bpl.n	8005cee <HAL_UART_IRQHandler+0x3a>
 8005ce8:	0675      	lsls	r5, r6, #25
 8005cea:	f100 80ab 	bmi.w	8005e44 <HAL_UART_IRQHandler+0x190>
}
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cf2:	06d8      	lsls	r0, r3, #27
 8005cf4:	d5f1      	bpl.n	8005cda <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cf6:	06f1      	lsls	r1, r6, #27
 8005cf8:	d5ef      	bpl.n	8005cda <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	6853      	ldr	r3, [r2, #4]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	6953      	ldr	r3, [r2, #20]
 8005d0a:	065d      	lsls	r5, r3, #25
 8005d0c:	f140 8106 	bpl.w	8005f1c <HAL_UART_IRQHandler+0x268>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d10:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005d12:	6803      	ldr	r3, [r0, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0e8      	beq.n	8005cee <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d1c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	d9e5      	bls.n	8005cee <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 8005d22:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d24:	6983      	ldr	r3, [r0, #24]
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d036      	beq.n	8005d98 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	f102 030c 	add.w	r3, r2, #12
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	f102 050c 	add.w	r5, r2, #12
 8005d3a:	e845 3100 	strex	r1, r3, [r5]
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d1f3      	bne.n	8005d2a <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	f102 0314 	add.w	r3, r2, #20
 8005d46:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f102 0514 	add.w	r5, r2, #20
 8005d52:	e845 3100 	strex	r1, r3, [r5]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d1f3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	f102 0314 	add.w	r3, r2, #20
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f102 0514 	add.w	r5, r2, #20
 8005d6a:	e845 3100 	strex	r1, r3, [r5]
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	d1f3      	bne.n	8005d5a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8005d72:	2320      	movs	r3, #32
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	f102 030c 	add.w	r3, r2, #12
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	f102 050c 	add.w	r5, r2, #12
 8005d8a:	e845 3100 	strex	r1, r3, [r5]
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d1f3      	bne.n	8005d7a <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d92:	f7fd f995 	bl	80030c0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d96:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d9c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005d9e:	4620      	mov	r0, r4
 8005da0:	1ac9      	subs	r1, r1, r3
 8005da2:	b289      	uxth	r1, r1
 8005da4:	f7ff ff22 	bl	8005bec <HAL_UARTEx_RxEventCallback>
 8005da8:	e7a1      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005daa:	f011 0101 	ands.w	r1, r1, #1
 8005dae:	d16c      	bne.n	8005e8a <HAL_UART_IRQHandler+0x1d6>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005db0:	f416 7f90 	tst.w	r6, #288	@ 0x120
 8005db4:	d08e      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005db6:	07da      	lsls	r2, r3, #31
 8005db8:	d50a      	bpl.n	8005dd0 <HAL_UART_IRQHandler+0x11c>
 8005dba:	05f0      	lsls	r0, r6, #23
 8005dbc:	f140 80e9 	bpl.w	8005f92 <HAL_UART_IRQHandler+0x2de>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc2:	0758      	lsls	r0, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dca:	d54f      	bpl.n	8005e6c <HAL_UART_IRQHandler+0x1b8>
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d160      	bne.n	8005e92 <HAL_UART_IRQHandler+0x1de>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd0:	0798      	lsls	r0, r3, #30
 8005dd2:	d564      	bpl.n	8005e9e <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dd4:	0719      	lsls	r1, r3, #28
 8005dd6:	f100 809e 	bmi.w	8005f16 <HAL_UART_IRQHandler+0x262>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dda:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d086      	beq.n	8005cee <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de0:	069a      	lsls	r2, r3, #26
 8005de2:	d502      	bpl.n	8005dea <HAL_UART_IRQHandler+0x136>
 8005de4:	06b3      	lsls	r3, r6, #26
 8005de6:	f100 80d8 	bmi.w	8005f9a <HAL_UART_IRQHandler+0x2e6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005df2:	f002 0208 	and.w	r2, r2, #8
 8005df6:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 8005dfa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dfc:	d156      	bne.n	8005eac <HAL_UART_IRQHandler+0x1f8>
        HAL_UART_ErrorCallback(huart);
 8005dfe:	f7ff feeb 	bl	8005bd8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e02:	6466      	str	r6, [r4, #68]	@ 0x44
 8005e04:	e773      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e06:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005e0a:	2b21      	cmp	r3, #33	@ 0x21
 8005e0c:	f47f af6f 	bne.w	8005cee <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e10:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e12:	6a23      	ldr	r3, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e14:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8005e18:	f000 80c4 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x2f0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	6221      	str	r1, [r4, #32]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8005e24:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f af5e 	bne.w	8005cee <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e32:	68d3      	ldr	r3, [r2, #12]
 8005e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e38:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e3a:	68d3      	ldr	r3, [r2, #12]
 8005e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e40:	60d3      	str	r3, [r2, #12]
 8005e42:	e754      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 8005e44:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e46:	68d3      	ldr	r3, [r2, #12]
  HAL_UART_TxCpltCallback(huart);
 8005e48:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e4e:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8005e54:	f7ff febc 	bl	8005bd0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005e58:	e749      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
}
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005e60:	f7ff bec6 	b.w	8005bf0 <UART_Receive_IT.isra.0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e64:	05f0      	lsls	r0, r6, #23
 8005e66:	d4ab      	bmi.n	8005dc0 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e68:	075a      	lsls	r2, r3, #29
 8005e6a:	d412      	bmi.n	8005e92 <HAL_UART_IRQHandler+0x1de>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e6c:	0798      	lsls	r0, r3, #30
 8005e6e:	d516      	bpl.n	8005e9e <HAL_UART_IRQHandler+0x1ea>
 8005e70:	2900      	cmp	r1, #0
 8005e72:	d0af      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e74:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005e76:	f042 0204 	orr.w	r2, r2, #4
 8005e7a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e7c:	071a      	lsls	r2, r3, #28
 8005e7e:	d5ac      	bpl.n	8005dda <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e80:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005e82:	f042 0208 	orr.w	r2, r2, #8
 8005e86:	6462      	str	r2, [r4, #68]	@ 0x44
 8005e88:	e7a7      	b.n	8005dda <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e8a:	07d8      	lsls	r0, r3, #31
 8005e8c:	d4ea      	bmi.n	8005e64 <HAL_UART_IRQHandler+0x1b0>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e8e:	075a      	lsls	r2, r3, #29
 8005e90:	d53c      	bpl.n	8005f0c <HAL_UART_IRQHandler+0x258>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e94:	0798      	lsls	r0, r3, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e96:	f042 0202 	orr.w	r2, r2, #2
 8005e9a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9c:	d4ea      	bmi.n	8005e74 <HAL_UART_IRQHandler+0x1c0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e9e:	0718      	lsls	r0, r3, #28
 8005ea0:	d59b      	bpl.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005ea2:	f006 0220 	and.w	r2, r6, #32
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	d097      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005eaa:	e7e9      	b.n	8005e80 <HAL_UART_IRQHandler+0x1cc>
        UART_EndRxTransfer(huart);
 8005eac:	f7ff fcdc 	bl	8005868 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	696b      	ldr	r3, [r5, #20]
 8005eb2:	065e      	lsls	r6, r3, #25
 8005eb4:	d526      	bpl.n	8005f04 <HAL_UART_IRQHandler+0x250>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	f105 0314 	add.w	r3, r5, #20
 8005eba:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	f105 0114 	add.w	r1, r5, #20
 8005ec6:	e841 3200 	strex	r2, r3, [r1]
 8005eca:	b162      	cbz	r2, 8005ee6 <HAL_UART_IRQHandler+0x232>
 8005ecc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	f102 0314 	add.w	r3, r2, #20
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	f102 0014 	add.w	r0, r2, #20
 8005ede:	e840 3100 	strex	r1, r3, [r0]
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	d1f3      	bne.n	8005ece <HAL_UART_IRQHandler+0x21a>
          if (huart->hdmarx != NULL)
 8005ee6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005ee8:	b160      	cbz	r0, 8005f04 <HAL_UART_IRQHandler+0x250>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eea:	4b34      	ldr	r3, [pc, #208]	@ (8005fbc <HAL_UART_IRQHandler+0x308>)
 8005eec:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eee:	f7fd f90b 	bl	8003108 <HAL_DMA_Abort_IT>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f43f aefb 	beq.w	8005cee <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005efa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8005efc:	b002      	add	sp, #8
 8005efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f02:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff fe67 	bl	8005bd8 <HAL_UART_ErrorCallback>
 8005f0a:	e6f0      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f0c:	0799      	lsls	r1, r3, #30
 8005f0e:	d4b1      	bmi.n	8005e74 <HAL_UART_IRQHandler+0x1c0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f10:	071a      	lsls	r2, r3, #28
 8005f12:	d4b5      	bmi.n	8005e80 <HAL_UART_IRQHandler+0x1cc>
 8005f14:	e761      	b.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005f16:	06b2      	lsls	r2, r6, #26
 8005f18:	d4b2      	bmi.n	8005e80 <HAL_UART_IRQHandler+0x1cc>
 8005f1a:	e75e      	b.n	8005dda <HAL_UART_IRQHandler+0x126>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f1c:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8005f1e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8005f22:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f24:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f43f aee1 	beq.w	8005cee <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f2c:	1a41      	subs	r1, r0, r1
 8005f2e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005f30:	2900      	cmp	r1, #0
 8005f32:	f43f aedc 	beq.w	8005cee <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	f102 030c 	add.w	r3, r2, #12
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f102 050c 	add.w	r5, r2, #12
 8005f46:	e845 3000 	strex	r0, r3, [r5]
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d1f3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x282>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	f102 0314 	add.w	r3, r2, #20
 8005f52:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	f102 0514 	add.w	r5, r2, #20
 8005f5e:	e845 3000 	strex	r0, r3, [r5]
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1f3      	bne.n	8005f4e <HAL_UART_IRQHandler+0x29a>
        huart->RxState = HAL_UART_STATE_READY;
 8005f66:	2320      	movs	r3, #32
 8005f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6c:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	f102 030c 	add.w	r3, r2, #12
 8005f72:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	f102 050c 	add.w	r5, r2, #12
 8005f7e:	e845 3000 	strex	r0, r3, [r5]
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d1f3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x2ba>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f86:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f88:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f8a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f8c:	f7ff fe2e 	bl	8005bec <HAL_UARTEx_RxEventCallback>
 8005f90:	e6ad      	b.n	8005cee <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f92:	075a      	lsls	r2, r3, #29
 8005f94:	f53f af1c 	bmi.w	8005dd0 <HAL_UART_IRQHandler+0x11c>
 8005f98:	e768      	b.n	8005e6c <HAL_UART_IRQHandler+0x1b8>
        UART_Receive_IT(huart);
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7ff fe28 	bl	8005bf0 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa0:	6825      	ldr	r5, [r4, #0]
 8005fa2:	e722      	b.n	8005dea <HAL_UART_IRQHandler+0x136>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa4:	6921      	ldr	r1, [r4, #16]
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	f47f af38 	bne.w	8005e1c <HAL_UART_IRQHandler+0x168>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fac:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005fb0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005fb4:	6051      	str	r1, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	e734      	b.n	8005e24 <HAL_UART_IRQHandler+0x170>
 8005fba:	bf00      	nop
 8005fbc:	08005bdd 	.word	0x08005bdd

08005fc0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc4:	b983      	cbnz	r3, 8005fe8 <osKernelInitialize+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fca:	b96b      	cbnz	r3, 8005fe8 <osKernelInitialize+0x28>
 8005fcc:	4b08      	ldr	r3, [pc, #32]	@ (8005ff0 <osKernelInitialize+0x30>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	2802      	cmp	r0, #2
 8005fd2:	d003      	beq.n	8005fdc <osKernelInitialize+0x1c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fd4:	b928      	cbnz	r0, 8005fe2 <osKernelInitialize+0x22>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fda:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fdc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005fe0:	b913      	cbnz	r3, 8005fe8 <osKernelInitialize+0x28>
    } else {
      stat = osError;
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005fe6:	4770      	bx	lr
    stat = osErrorISR;
 8005fe8:	f06f 0005 	mvn.w	r0, #5
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000d04 	.word	0x20000d04

08005ff4 <osKernelStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ff8:	b9c3      	cbnz	r3, 800602c <osKernelStart+0x38>
osStatus_t osKernelStart (void) {
 8005ffa:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffc:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8006000:	b98c      	cbnz	r4, 8006026 <osKernelStart+0x32>
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <osKernelStart+0x40>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	2a02      	cmp	r2, #2
 8006008:	d007      	beq.n	800601a <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800600a:	2a01      	cmp	r2, #1
 800600c:	d108      	bne.n	8006020 <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 800600e:	2202      	movs	r2, #2
 8006010:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006012:	f000 ffab 	bl	8006f6c <vTaskStartScheduler>
      stat = osOK;
 8006016:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006018:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800601a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800601e:	b913      	cbnz	r3, 8006026 <osKernelStart+0x32>
      stat = osError;
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006024:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006026:	f06f 0005 	mvn.w	r0, #5
}
 800602a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800602c:	f06f 0005 	mvn.w	r0, #5
}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000d04 	.word	0x20000d04

08006038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800603a:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800603c:	b087      	sub	sp, #28
  hTask = NULL;
 800603e:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006040:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006044:	2c00      	cmp	r4, #0
 8006046:	d13a      	bne.n	80060be <osThreadNew+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006048:	f3ef 8310 	mrs	r3, PRIMASK
 800604c:	2b00      	cmp	r3, #0
 800604e:	d13d      	bne.n	80060cc <osThreadNew+0x94>
 8006050:	4b28      	ldr	r3, [pc, #160]	@ (80060f4 <osThreadNew+0xbc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d035      	beq.n	80060c4 <osThreadNew+0x8c>
 8006058:	2800      	cmp	r0, #0
 800605a:	d037      	beq.n	80060cc <osThreadNew+0x94>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800605c:	2300      	movs	r3, #0
 800605e:	f88d 3013 	strb.w	r3, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8006062:	b1fa      	cbz	r2, 80060a4 <osThreadNew+0x6c>
      if (attr->name != NULL) {
 8006064:	6814      	ldr	r4, [r2, #0]
 8006066:	2c00      	cmp	r4, #0
 8006068:	d038      	beq.n	80060dc <osThreadNew+0xa4>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800606a:	6995      	ldr	r5, [r2, #24]
 800606c:	b38d      	cbz	r5, 80060d2 <osThreadNew+0x9a>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800606e:	1e6e      	subs	r6, r5, #1
 8006070:	2e37      	cmp	r6, #55	@ 0x37
 8006072:	d824      	bhi.n	80060be <osThreadNew+0x86>
 8006074:	6853      	ldr	r3, [r2, #4]
 8006076:	07db      	lsls	r3, r3, #31
 8006078:	d421      	bmi.n	80060be <osThreadNew+0x86>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800607a:	6953      	ldr	r3, [r2, #20]
 800607c:	bb5b      	cbnz	r3, 80060d6 <osThreadNew+0x9e>
    stack = configMINIMAL_STACK_SIZE;
 800607e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006082:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8006086:	b366      	cbz	r6, 80060e2 <osThreadNew+0xaa>
 8006088:	2f5b      	cmp	r7, #91	@ 0x5b
 800608a:	d91f      	bls.n	80060cc <osThreadNew+0x94>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800608c:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800608e:	b1ea      	cbz	r2, 80060cc <osThreadNew+0x94>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006090:	b1e3      	cbz	r3, 80060cc <osThreadNew+0x94>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006092:	460b      	mov	r3, r1
 8006094:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8006098:	4621      	mov	r1, r4
 800609a:	4662      	mov	r2, ip
 800609c:	9500      	str	r5, [sp, #0]
 800609e:	f000 fefb 	bl	8006e98 <xTaskCreateStatic>
 80060a2:	e00d      	b.n	80060c0 <osThreadNew+0x88>
 80060a4:	2280      	movs	r2, #128	@ 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 80060a6:	2518      	movs	r5, #24
    name  = &empty;
 80060a8:	f10d 0413 	add.w	r4, sp, #19
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060ac:	460b      	mov	r3, r1
 80060ae:	4621      	mov	r1, r4
 80060b0:	ac05      	add	r4, sp, #20
 80060b2:	9500      	str	r5, [sp, #0]
 80060b4:	9401      	str	r4, [sp, #4]
 80060b6:	f000 ff29 	bl	8006f0c <xTaskCreate>
 80060ba:	2801      	cmp	r0, #1
 80060bc:	d006      	beq.n	80060cc <osThreadNew+0x94>
        return (NULL);
 80060be:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80060c0:	b007      	add	sp, #28
 80060c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060c4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0c5      	beq.n	8006058 <osThreadNew+0x20>
  return ((osThreadId_t)hTask);
 80060cc:	9805      	ldr	r0, [sp, #20]
}
 80060ce:	b007      	add	sp, #28
 80060d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d2:	2518      	movs	r5, #24
 80060d4:	e7ce      	b.n	8006074 <osThreadNew+0x3c>
        stack = attr->stack_size / sizeof(StackType_t);
 80060d6:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80060da:	e7d2      	b.n	8006082 <osThreadNew+0x4a>
    name  = &empty;
 80060dc:	f10d 0413 	add.w	r4, sp, #19
 80060e0:	e7c3      	b.n	800606a <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	d1f2      	bne.n	80060cc <osThreadNew+0x94>
 80060e6:	6913      	ldr	r3, [r2, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ef      	bne.n	80060cc <osThreadNew+0x94>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060ec:	fa1f f28c 	uxth.w	r2, ip
 80060f0:	e7dc      	b.n	80060ac <osThreadNew+0x74>
 80060f2:	bf00      	nop
 80060f4:	20000d04 	.word	0x20000d04

080060f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80060f8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80060fe:	b96b      	cbnz	r3, 800611c <osDelay+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006100:	f3ef 8310 	mrs	r3, PRIMASK
 8006104:	b953      	cbnz	r3, 800611c <osDelay+0x24>
 8006106:	4b08      	ldr	r3, [pc, #32]	@ (8006128 <osDelay+0x30>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d002      	beq.n	8006114 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800610e:	b940      	cbnz	r0, 8006122 <osDelay+0x2a>
    stat = osOK;
 8006110:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006112:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006114:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f8      	beq.n	800610e <osDelay+0x16>
    stat = osErrorISR;
 800611c:	f06f 0005 	mvn.w	r0, #5
}
 8006120:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8006122:	f001 f8c1 	bl	80072a8 <vTaskDelay>
 8006126:	e7f3      	b.n	8006110 <osDelay+0x18>
 8006128:	20000d04 	.word	0x20000d04

0800612c <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612c:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8006130:	b963      	cbnz	r3, 800614c <osEventFlagsNew+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	b94b      	cbnz	r3, 800614c <osEventFlagsNew+0x20>
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <osEventFlagsNew+0x3c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d00b      	beq.n	8006158 <osEventFlagsNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8006140:	b140      	cbz	r0, 8006154 <osEventFlagsNew+0x28>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006142:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006146:	b11b      	cbz	r3, 8006150 <osEventFlagsNew+0x24>
 8006148:	2a1f      	cmp	r2, #31
 800614a:	d80a      	bhi.n	8006162 <osEventFlagsNew+0x36>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800614c:	2000      	movs	r0, #0
 800614e:	4770      	bx	lr
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006150:	2a00      	cmp	r2, #0
 8006152:	d1fb      	bne.n	800614c <osEventFlagsNew+0x20>
        hEventGroup = xEventGroupCreate();
 8006154:	f000 b8c6 	b.w	80062e4 <xEventGroupCreate>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006158:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ef      	beq.n	8006140 <osEventFlagsNew+0x14>
 8006160:	e7f4      	b.n	800614c <osEventFlagsNew+0x20>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006162:	4618      	mov	r0, r3
 8006164:	f000 b898 	b.w	8006298 <xEventGroupCreateStatic>
 8006168:	20000d04 	.word	0x20000d04

0800616c <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800616c:	b398      	cbz	r0, 80061d6 <osEventFlagsSet+0x6a>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800616e:	b510      	push	{r4, lr}
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006170:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8006174:	460c      	mov	r4, r1
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006176:	b082      	sub	sp, #8
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006178:	d21b      	bcs.n	80061b2 <osEventFlagsSet+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800617a:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 800617e:	b913      	cbnz	r3, 8006186 <osEventFlagsSet+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006180:	f3ef 8310 	mrs	r3, PRIMASK
 8006184:	b1cb      	cbz	r3, 80061ba <osEventFlagsSet+0x4e>
    yield = pdFALSE;
 8006186:	2300      	movs	r3, #0

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006188:	4621      	mov	r1, r4
 800618a:	aa01      	add	r2, sp, #4
    yield = pdFALSE;
 800618c:	9301      	str	r3, [sp, #4]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800618e:	f000 f999 	bl	80064c4 <xEventGroupSetBitsFromISR>
 8006192:	bb18      	cbnz	r0, 80061dc <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	b14b      	cbz	r3, 80061ac <osEventFlagsSet+0x40>
 8006198:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800619c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
    rflags = (uint32_t)osErrorParameter;
 80061ac:	4620      	mov	r0, r4
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
  }

  return (rflags);
}
 80061ae:	b002      	add	sp, #8
 80061b0:	bd10      	pop	{r4, pc}
    rflags = (uint32_t)osErrorParameter;
 80061b2:	f06f 0003 	mvn.w	r0, #3
}
 80061b6:	b002      	add	sp, #8
 80061b8:	bd10      	pop	{r4, pc}
  else if (IS_IRQ()) {
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <osEventFlagsSet+0x78>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d103      	bne.n	80061ca <osEventFlagsSet+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1dd      	bne.n	8006186 <osEventFlagsSet+0x1a>
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80061ca:	4621      	mov	r1, r4
}
 80061cc:	b002      	add	sp, #8
 80061ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80061d2:	f000 b92b 	b.w	800642c <xEventGroupSetBits>
    rflags = (uint32_t)osErrorParameter;
 80061d6:	f06f 0003 	mvn.w	r0, #3
}
 80061da:	4770      	bx	lr
      rflags = (uint32_t)osErrorResource;
 80061dc:	f06f 0002 	mvn.w	r0, #2
}
 80061e0:	b002      	add	sp, #8
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	20000d04 	.word	0x20000d04

080061e8 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80061e8:	b390      	cbz	r0, 8006250 <osEventFlagsWait+0x68>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80061ea:	b570      	push	{r4, r5, r6, lr}
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80061ec:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80061f0:	460c      	mov	r4, r1
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80061f2:	b082      	sub	sp, #8
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80061f4:	d228      	bcs.n	8006248 <osEventFlagsWait+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f6:	461d      	mov	r5, r3
 80061f8:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80061fc:	bb03      	cbnz	r3, 8006240 <osEventFlagsWait+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	b9eb      	cbnz	r3, 8006240 <osEventFlagsWait+0x58>
 8006204:	4b15      	ldr	r3, [pc, #84]	@ (800625c <osEventFlagsWait+0x74>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d015      	beq.n	8006238 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 800620c:	f002 0601 	and.w	r6, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8006210:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006214:	4633      	mov	r3, r6
 8006216:	4621      	mov	r1, r4
 8006218:	9500      	str	r5, [sp, #0]
 800621a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800621e:	f000 f86f 	bl	8006300 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8006222:	b1c6      	cbz	r6, 8006256 <osEventFlagsWait+0x6e>
      if (flags != rflags) {
 8006224:	4284      	cmp	r4, r0
 8006226:	d00d      	beq.n	8006244 <osEventFlagsWait+0x5c>
    else {
      if ((flags & rflags) == 0U) {
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 8006228:	2d00      	cmp	r5, #0
 800622a:	bf14      	ite	ne
 800622c:	f06f 0001 	mvnne.w	r0, #1
 8006230:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (rflags);
}
 8006234:	b002      	add	sp, #8
 8006236:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006238:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0e5      	beq.n	800620c <osEventFlagsWait+0x24>
    rflags = (uint32_t)osErrorISR;
 8006240:	f06f 0005 	mvn.w	r0, #5
}
 8006244:	b002      	add	sp, #8
 8006246:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorParameter;
 8006248:	f06f 0003 	mvn.w	r0, #3
}
 800624c:	b002      	add	sp, #8
 800624e:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorParameter;
 8006250:	f06f 0003 	mvn.w	r0, #3
}
 8006254:	4770      	bx	lr
      if ((flags & rflags) == 0U) {
 8006256:	4204      	tst	r4, r0
 8006258:	d0e6      	beq.n	8006228 <osEventFlagsWait+0x40>
 800625a:	e7f3      	b.n	8006244 <osEventFlagsWait+0x5c>
 800625c:	20000d04 	.word	0x20000d04

08006260 <vApplicationGetIdleTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006260:	2380      	movs	r3, #128	@ 0x80
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006262:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006264:	4d03      	ldr	r5, [pc, #12]	@ (8006274 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006266:	4c04      	ldr	r4, [pc, #16]	@ (8006278 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006268:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800626a:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800626c:	6013      	str	r3, [r2, #0]
}
 800626e:	bc30      	pop	{r4, r5}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000ca8 	.word	0x20000ca8
 8006278:	20000aa8 	.word	0x20000aa8

0800627c <vApplicationGetTimerTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800627c:	f44f 7380 	mov.w	r3, #256	@ 0x100
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006280:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006282:	4d03      	ldr	r5, [pc, #12]	@ (8006290 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006284:	4c03      	ldr	r4, [pc, #12]	@ (8006294 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006286:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006288:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bc30      	pop	{r4, r5}
 800628e:	4770      	bx	lr
 8006290:	20000a4c 	.word	0x20000a4c
 8006294:	2000064c 	.word	0x2000064c

08006298 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006298:	b178      	cbz	r0, 80062ba <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800629a:	2320      	movs	r3, #32
	{
 800629c:	b510      	push	{r4, lr}
 800629e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80062a0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80062a2:	9b01      	ldr	r3, [sp, #4]
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d011      	beq.n	80062cc <xEventGroupCreateStatic+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	e7fe      	b.n	80062b8 <xEventGroupCreateStatic+0x20>
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 80062ca:	e7fe      	b.n	80062ca <xEventGroupCreateStatic+0x32>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	4604      	mov	r4, r0
 80062d0:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80062d4:	f000 f904 	bl	80064e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80062d8:	2301      	movs	r3, #1
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80062da:	4620      	mov	r0, r4
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80062dc:	7723      	strb	r3, [r4, #28]
	}
 80062de:	b002      	add	sp, #8
 80062e0:	bd10      	pop	{r4, pc}
 80062e2:	bf00      	nop

080062e4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80062e4:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80062e6:	2020      	movs	r0, #32
 80062e8:	f001 fda0 	bl	8007e2c <pvPortMalloc>

		if( pxEventBits != NULL )
 80062ec:	4604      	mov	r4, r0
 80062ee:	b128      	cbz	r0, 80062fc <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80062f0:	2500      	movs	r5, #0
 80062f2:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80062f6:	f000 f8f3 	bl	80064e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80062fa:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd38      	pop	{r3, r4, r5, pc}

08006300 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006300:	b1c0      	cbz	r0, 8006334 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006302:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
{
 8006306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	460c      	mov	r4, r1
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800630c:	d209      	bcs.n	8006322 <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 800630e:	b9d1      	cbnz	r1, 8006346 <xEventGroupWaitBits+0x46>
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	e7fe      	b.n	8006320 <xEventGroupWaitBits+0x20>
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006332:	e7fe      	b.n	8006332 <xEventGroupWaitBits+0x32>
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8006344:	e7fe      	b.n	8006344 <xEventGroupWaitBits+0x44>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006346:	4607      	mov	r7, r0
 8006348:	4616      	mov	r6, r2
 800634a:	461d      	mov	r5, r3
 800634c:	f001 f964 	bl	8007618 <xTaskGetSchedulerState>
 8006350:	bb08      	cbnz	r0, 8006396 <xEventGroupWaitBits+0x96>
 8006352:	9b06      	ldr	r3, [sp, #24]
 8006354:	b973      	cbnz	r3, 8006374 <xEventGroupWaitBits+0x74>
	}
	#endif

	vTaskSuspendAll();
 8006356:	f000 fe4f 	bl	8006ff8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800635a:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800635e:	b995      	cbnz	r5, 8006386 <xEventGroupWaitBits+0x86>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006360:	ea14 0f08 	tst.w	r4, r8
 8006364:	d012      	beq.n	800638c <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 8006366:	b18e      	cbz	r6, 800638c <xEventGroupWaitBits+0x8c>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006368:	ea28 0404 	bic.w	r4, r8, r4
 800636c:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 800636e:	f000 ff8b 	bl	8007288 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8006372:	e00d      	b.n	8006390 <xEventGroupWaitBits+0x90>
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006384:	e7fe      	b.n	8006384 <xEventGroupWaitBits+0x84>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006386:	ea34 0308 	bics.w	r3, r4, r8
 800638a:	d0ec      	beq.n	8006366 <xEventGroupWaitBits+0x66>
	xAlreadyYielded = xTaskResumeAll();
 800638c:	f000 ff7c 	bl	8007288 <xTaskResumeAll>
}
 8006390:	4640      	mov	r0, r8
 8006392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	vTaskSuspendAll();
 8006396:	f000 fe2f 	bl	8006ff8 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800639a:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 800639e:	bb25      	cbnz	r5, 80063ea <xEventGroupWaitBits+0xea>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80063a0:	ea14 0f08 	tst.w	r4, r8
 80063a4:	d1df      	bne.n	8006366 <xEventGroupWaitBits+0x66>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ef      	beq.n	800638c <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 80063ac:	1e31      	subs	r1, r6, #0
 80063ae:	bf18      	it	ne
 80063b0:	2101      	movne	r1, #1
 80063b2:	0609      	lsls	r1, r1, #24
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80063b4:	9a06      	ldr	r2, [sp, #24]
 80063b6:	4321      	orrs	r1, r4
 80063b8:	1d38      	adds	r0, r7, #4
 80063ba:	f001 f805 	bl	80073c8 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80063be:	f000 ff63 	bl	8007288 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80063c2:	b948      	cbnz	r0, 80063d8 <xEventGroupWaitBits+0xd8>
			portYIELD_WITHIN_API();
 80063c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80063c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80063d8:	f001 f972 	bl	80076c0 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80063dc:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 80063e0:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80063e2:	d00f      	beq.n	8006404 <xEventGroupWaitBits+0x104>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80063e4:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
	return uxReturn;
 80063e8:	e7d2      	b.n	8006390 <xEventGroupWaitBits+0x90>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80063ea:	ea34 0308 	bics.w	r3, r4, r8
 80063ee:	d0ba      	beq.n	8006366 <xEventGroupWaitBits+0x66>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ca      	beq.n	800638c <xEventGroupWaitBits+0x8c>
			if( xClearOnExit != pdFALSE )
 80063f6:	1e31      	subs	r1, r6, #0
 80063f8:	bf18      	it	ne
 80063fa:	2101      	movne	r1, #1
 80063fc:	0609      	lsls	r1, r1, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80063fe:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8006402:	e7d7      	b.n	80063b4 <xEventGroupWaitBits+0xb4>
			taskENTER_CRITICAL();
 8006404:	f001 fbd6 	bl	8007bb4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8006408:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 800640c:	b94d      	cbnz	r5, 8006422 <xEventGroupWaitBits+0x122>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800640e:	ea14 0f08 	tst.w	r4, r8
 8006412:	d003      	beq.n	800641c <xEventGroupWaitBits+0x11c>
					if( xClearOnExit != pdFALSE )
 8006414:	b116      	cbz	r6, 800641c <xEventGroupWaitBits+0x11c>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006416:	ea28 0404 	bic.w	r4, r8, r4
 800641a:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 800641c:	f001 fbec 	bl	8007bf8 <vPortExitCritical>
 8006420:	e7e0      	b.n	80063e4 <xEventGroupWaitBits+0xe4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006422:	ea34 0308 	bics.w	r3, r4, r8
 8006426:	d1f9      	bne.n	800641c <xEventGroupWaitBits+0x11c>
 8006428:	e7f4      	b.n	8006414 <xEventGroupWaitBits+0x114>
 800642a:	bf00      	nop

0800642c <xEventGroupSetBits>:
{
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8006430:	2800      	cmp	r0, #0
 8006432:	d03c      	beq.n	80064ae <xEventGroupSetBits+0x82>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006434:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8006438:	460c      	mov	r4, r1
 800643a:	d308      	bcc.n	800644e <xEventGroupSetBits+0x22>
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	e7fe      	b.n	800644c <xEventGroupSetBits+0x20>
 800644e:	4606      	mov	r6, r0
	vTaskSuspendAll();
 8006450:	f000 fdd2 	bl	8006ff8 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006454:	6833      	ldr	r3, [r6, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006456:	6935      	ldr	r5, [r6, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006458:	f106 090c 	add.w	r9, r6, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 800645c:	4323      	orrs	r3, r4
		while( pxListItem != pxListEnd )
 800645e:	45a9      	cmp	r9, r5
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006460:	6033      	str	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 8006462:	d01e      	beq.n	80064a2 <xEventGroupSetBits+0x76>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006464:	f04f 0800 	mov.w	r8, #0
 8006468:	e009      	b.n	800647e <xEventGroupSetBits+0x52>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800646a:	b137      	cbz	r7, 800647a <xEventGroupSetBits+0x4e>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800646c:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 800646e:	bf48      	it	mi
 8006470:	ea48 0804 	orrmi.w	r8, r8, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006474:	f001 f83a 	bl	80074ec <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006478:	6833      	ldr	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 800647a:	45a9      	cmp	r9, r5
 800647c:	d00f      	beq.n	800649e <xEventGroupSetBits+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800647e:	4628      	mov	r0, r5
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006480:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8006482:	686d      	ldr	r5, [r5, #4]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006484:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006488:	f012 6f80 	tst.w	r2, #67108864	@ 0x4000000
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800648c:	f043 7100 	orr.w	r1, r3, #33554432	@ 0x2000000
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006490:	ea04 0703 	and.w	r7, r4, r3
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006494:	d0e9      	beq.n	800646a <xEventGroupSetBits+0x3e>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006496:	42bc      	cmp	r4, r7
 8006498:	d0e8      	beq.n	800646c <xEventGroupSetBits+0x40>
		while( pxListItem != pxListEnd )
 800649a:	45a9      	cmp	r9, r5
 800649c:	d1ef      	bne.n	800647e <xEventGroupSetBits+0x52>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800649e:	ea23 0308 	bic.w	r3, r3, r8
 80064a2:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 80064a4:	f000 fef0 	bl	8007288 <xTaskResumeAll>
}
 80064a8:	6830      	ldr	r0, [r6, #0]
 80064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80064be:	e7fe      	b.n	80064be <xEventGroupSetBits+0x92>

080064c0 <vEventGroupSetBitsCallback>:
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80064c0:	f7ff bfb4 	b.w	800642c <xEventGroupSetBits>

080064c4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80064c4:	468c      	mov	ip, r1
 80064c6:	b500      	push	{lr}
 80064c8:	4686      	mov	lr, r0
 80064ca:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80064cc:	4671      	mov	r1, lr
 80064ce:	4662      	mov	r2, ip
 80064d0:	4802      	ldr	r0, [pc, #8]	@ (80064dc <xEventGroupSetBitsFromISR+0x18>)

		return xReturn;
	}
 80064d2:	f85d eb04 	ldr.w	lr, [sp], #4
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80064d6:	f001 baff 	b.w	8007ad8 <xTimerPendFunctionCallFromISR>
 80064da:	bf00      	nop
 80064dc:	080064c1 	.word	0x080064c1

080064e0 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064e0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064e4:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e6:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064ea:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ee:	60c3      	str	r3, [r0, #12]
 80064f0:	6103      	str	r3, [r0, #16]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f2:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop

080064f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006500:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006502:	6803      	ldr	r3, [r0, #0]
{
 8006504:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006506:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8006508:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800650a:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800650e:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006510:	6091      	str	r1, [r2, #8]
}
 8006512:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006514:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006516:	6003      	str	r3, [r0, #0]
}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop

0800651c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800651e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006520:	1c6b      	adds	r3, r5, #1
 8006522:	d010      	beq.n	8006546 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006524:	f100 0308 	add.w	r3, r0, #8
 8006528:	461c      	mov	r4, r3
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	42aa      	cmp	r2, r5
 8006530:	d9fa      	bls.n	8006528 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006532:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006534:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006536:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006538:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800653a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800653c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800653e:	6108      	str	r0, [r1, #16]
}
 8006540:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8006542:	6002      	str	r2, [r0, #0]
}
 8006544:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006546:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	e7f2      	b.n	8006532 <vListInsert+0x16>

0800654c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800654c:	6903      	ldr	r3, [r0, #16]
{
 800654e:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006550:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006554:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006556:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006558:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800655a:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 800655c:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800655e:	bf08      	it	eq
 8006560:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006562:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8006564:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006566:	3a01      	subs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800656a:	6818      	ldr	r0, [r3, #0]
}
 800656c:	bc10      	pop	{r4}
 800656e:	4770      	bx	lr

08006570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006574:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8006576:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006578:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800657a:	b92a      	cbnz	r2, 8006588 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800657c:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800657e:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006580:	b346      	cbz	r6, 80065d4 <prvCopyDataToQueue+0x64>
BaseType_t xReturn = pdFALSE;
 8006582:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006584:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8006586:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006588:	b97e      	cbnz	r6, 80065aa <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800658a:	6880      	ldr	r0, [r0, #8]
 800658c:	f002 fcf3 	bl	8008f76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006590:	68a3      	ldr	r3, [r4, #8]
 8006592:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006594:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006596:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006598:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800659a:	60a3      	str	r3, [r4, #8]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800659c:	bf24      	itt	cs
 800659e:	6823      	ldrcs	r3, [r4, #0]
 80065a0:	60a3      	strcs	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a2:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80065a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a6:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065aa:	68c0      	ldr	r0, [r0, #12]
 80065ac:	f002 fce3 	bl	8008f76 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80065b2:	68e3      	ldr	r3, [r4, #12]
 80065b4:	4251      	negs	r1, r2
 80065b6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065b8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065ba:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065bc:	4293      	cmp	r3, r2
 80065be:	d202      	bcs.n	80065c6 <prvCopyDataToQueue+0x56>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	440b      	add	r3, r1
 80065c4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80065c6:	2e02      	cmp	r6, #2
 80065c8:	d1eb      	bne.n	80065a2 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065ca:	2d01      	cmp	r5, #1
 80065cc:	bf38      	it	cc
 80065ce:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 80065d0:	2000      	movs	r0, #0
 80065d2:	e7d7      	b.n	8006584 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80065d4:	6840      	ldr	r0, [r0, #4]
 80065d6:	f001 f82f 	bl	8007638 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80065da:	6066      	str	r6, [r4, #4]
 80065dc:	e7d2      	b.n	8006584 <prvCopyDataToQueue+0x14>
 80065de:	bf00      	nop

080065e0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065e4:	f001 fae6 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e8:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80065ec:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	dd14      	ble.n	800661c <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f2:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80065f6:	e003      	b.n	8006600 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065f8:	1e63      	subs	r3, r4, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065fe:	b16a      	cbz	r2, 800661c <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006600:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006602:	b15b      	cbz	r3, 800661c <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006604:	4630      	mov	r0, r6
 8006606:	f000 ff2b 	bl	8007460 <xTaskRemoveFromEventList>
 800660a:	2800      	cmp	r0, #0
 800660c:	d0f4      	beq.n	80065f8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800660e:	f000 fffd 	bl	800760c <vTaskMissedYield>
			--cTxLock;
 8006612:	1e63      	subs	r3, r4, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006618:	2a00      	cmp	r2, #0
 800661a:	d1f1      	bne.n	8006600 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800661c:	23ff      	movs	r3, #255	@ 0xff
 800661e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006622:	f001 fae9 	bl	8007bf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006626:	f001 fac5 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800662a:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 800662e:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006630:	2c00      	cmp	r4, #0
 8006632:	dd14      	ble.n	800665e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006634:	f105 0610 	add.w	r6, r5, #16
 8006638:	e003      	b.n	8006642 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800663a:	1e63      	subs	r3, r4, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006640:	b16a      	cbz	r2, 800665e <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006642:	692b      	ldr	r3, [r5, #16]
 8006644:	b15b      	cbz	r3, 800665e <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006646:	4630      	mov	r0, r6
 8006648:	f000 ff0a 	bl	8007460 <xTaskRemoveFromEventList>
 800664c:	2800      	cmp	r0, #0
 800664e:	d0f4      	beq.n	800663a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8006650:	f000 ffdc 	bl	800760c <vTaskMissedYield>
				--cRxLock;
 8006654:	1e63      	subs	r3, r4, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1f1      	bne.n	8006642 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800665e:	23ff      	movs	r3, #255	@ 0xff
 8006660:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8006664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006668:	f001 bac6 	b.w	8007bf8 <vPortExitCritical>

0800666c <xQueueGenericReset>:
{
 800666c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800666e:	b1e0      	cbz	r0, 80066aa <xQueueGenericReset+0x3e>
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8006674:	f001 fa9e 	bl	8007bb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006678:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006682:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006684:	4413      	add	r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006686:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006688:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800668a:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800668c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800668e:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006690:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006692:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8006694:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006698:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800669c:	b975      	cbnz	r5, 80066bc <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	b9c3      	cbnz	r3, 80066d4 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 80066a2:	f001 faa9 	bl	8007bf8 <vPortExitCritical>
}
 80066a6:	2001      	movs	r0, #1
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80066ba:	e7fe      	b.n	80066ba <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066bc:	f104 0010 	add.w	r0, r4, #16
 80066c0:	f7ff ff0e 	bl	80064e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80066c8:	f7ff ff0a 	bl	80064e0 <vListInitialise>
	taskEXIT_CRITICAL();
 80066cc:	f001 fa94 	bl	8007bf8 <vPortExitCritical>
}
 80066d0:	2001      	movs	r0, #1
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d4:	f104 0010 	add.w	r0, r4, #16
 80066d8:	f000 fec2 	bl	8007460 <xTaskRemoveFromEventList>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0e0      	beq.n	80066a2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80066e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	e7d5      	b.n	80066a2 <xQueueGenericReset+0x36>
 80066f6:	bf00      	nop

080066f8 <xQueueGenericCreateStatic>:
	{
 80066f8:	b530      	push	{r4, r5, lr}
 80066fa:	b083      	sub	sp, #12
 80066fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006700:	b940      	cbnz	r0, 8006714 <xQueueGenericCreateStatic+0x1c>
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	e7fe      	b.n	8006712 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8006714:	461c      	mov	r4, r3
 8006716:	b183      	cbz	r3, 800673a <xQueueGenericCreateStatic+0x42>
 8006718:	4603      	mov	r3, r0
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800671a:	b302      	cbz	r2, 800675e <xQueueGenericCreateStatic+0x66>
 800671c:	b1b1      	cbz	r1, 800674c <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800671e:	2050      	movs	r0, #80	@ 0x50
 8006720:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006722:	9801      	ldr	r0, [sp, #4]
 8006724:	2850      	cmp	r0, #80	@ 0x50
 8006726:	d021      	beq.n	800676c <xQueueGenericCreateStatic+0x74>
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	e7fe      	b.n	8006738 <xQueueGenericCreateStatic+0x40>
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800674a:	e7fe      	b.n	800674a <xQueueGenericCreateStatic+0x52>
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800675e:	b999      	cbnz	r1, 8006788 <xQueueGenericCreateStatic+0x90>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006760:	2250      	movs	r2, #80	@ 0x50
 8006762:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006764:	9a01      	ldr	r2, [sp, #4]
 8006766:	2a50      	cmp	r2, #80	@ 0x50
 8006768:	d1de      	bne.n	8006728 <xQueueGenericCreateStatic+0x30>
 800676a:	4622      	mov	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800676c:	e9c4 310f 	strd	r3, r1, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006770:	2101      	movs	r1, #1
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006772:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006774:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006776:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800677a:	f7ff ff77 	bl	800666c <xQueueGenericReset>
	}
 800677e:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006780:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
	}
 8006784:	b003      	add	sp, #12
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006798:	e7fe      	b.n	8006798 <xQueueGenericCreateStatic+0xa0>
 800679a:	bf00      	nop

0800679c <xQueueGenericSend>:
{
 800679c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d042      	beq.n	800682c <xQueueGenericSend+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a6:	4604      	mov	r4, r0
 80067a8:	460e      	mov	r6, r1
 80067aa:	461d      	mov	r5, r3
 80067ac:	b391      	cbz	r1, 8006814 <xQueueGenericSend+0x78>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067ae:	2d02      	cmp	r5, #2
 80067b0:	d10b      	bne.n	80067ca <xQueueGenericSend+0x2e>
 80067b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d008      	beq.n	80067ca <xQueueGenericSend+0x2e>
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericSend+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ca:	f000 ff25 	bl	8007618 <xTaskGetSchedulerState>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d035      	beq.n	800683e <xQueueGenericSend+0xa2>
		taskENTER_CRITICAL();
 80067d2:	f001 f9ef 	bl	8007bb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80067d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80067da:	429a      	cmp	r2, r3
 80067dc:	d301      	bcc.n	80067e2 <xQueueGenericSend+0x46>
 80067de:	2d02      	cmp	r5, #2
 80067e0:	d139      	bne.n	8006856 <xQueueGenericSend+0xba>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067e2:	462a      	mov	r2, r5
 80067e4:	4631      	mov	r1, r6
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7ff fec2 	bl	8006570 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 8092 	bne.w	8006918 <xQueueGenericSend+0x17c>
					else if( xYieldRequired != pdFALSE )
 80067f4:	b148      	cbz	r0, 800680a <xQueueGenericSend+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
 80067f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800680a:	f001 f9f5 	bl	8007bf8 <vPortExitCritical>
				return pdPASS;
 800680e:	2001      	movs	r0, #1
}
 8006810:	b005      	add	sp, #20
 8006812:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006814:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0c9      	beq.n	80067ae <xQueueGenericSend+0x12>
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	e7fe      	b.n	800682a <xQueueGenericSend+0x8e>
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800683c:	e7fe      	b.n	800683c <xQueueGenericSend+0xa0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0c6      	beq.n	80067d2 <xQueueGenericSend+0x36>
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	e7fe      	b.n	8006854 <xQueueGenericSend+0xb8>
 8006856:	2000      	movs	r0, #0
		prvLockQueue( pxQueue );
 8006858:	4607      	mov	r7, r0
 800685a:	e00d      	b.n	8006878 <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800685c:	f001 f9cc 	bl	8007bf8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff febd 	bl	80065e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006866:	f000 fd0f 	bl	8007288 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800686a:	f001 f9a3 	bl	8007bb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800686e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006870:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006872:	429a      	cmp	r2, r3
 8006874:	d3b5      	bcc.n	80067e2 <xQueueGenericSend+0x46>
{
 8006876:	2001      	movs	r0, #1
				if( xTicksToWait == ( TickType_t ) 0 )
 8006878:	9a01      	ldr	r2, [sp, #4]
 800687a:	2a00      	cmp	r2, #0
 800687c:	d042      	beq.n	8006904 <xQueueGenericSend+0x168>
				else if( xEntryTimeSet == pdFALSE )
 800687e:	b3b0      	cbz	r0, 80068ee <xQueueGenericSend+0x152>
		taskEXIT_CRITICAL();
 8006880:	f001 f9ba 	bl	8007bf8 <vPortExitCritical>
		vTaskSuspendAll();
 8006884:	f000 fbb8 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006888:	f001 f994 	bl	8007bb4 <vPortEnterCritical>
 800688c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006890:	2bff      	cmp	r3, #255	@ 0xff
 8006892:	bf08      	it	eq
 8006894:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8006898:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800689c:	2aff      	cmp	r2, #255	@ 0xff
 800689e:	bf08      	it	eq
 80068a0:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80068a4:	f001 f9a8 	bl	8007bf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a8:	a901      	add	r1, sp, #4
 80068aa:	a802      	add	r0, sp, #8
 80068ac:	f000 fe6e 	bl	800758c <xTaskCheckForTimeOut>
 80068b0:	bb60      	cbnz	r0, 800690c <xQueueGenericSend+0x170>
	taskENTER_CRITICAL();
 80068b2:	f001 f97f 	bl	8007bb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80068b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d1ce      	bne.n	800685c <xQueueGenericSend+0xc0>
	taskEXIT_CRITICAL();
 80068be:	f001 f99b 	bl	8007bf8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068c2:	9901      	ldr	r1, [sp, #4]
 80068c4:	f104 0010 	add.w	r0, r4, #16
 80068c8:	f000 fd64 	bl	8007394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff fe87 	bl	80065e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068d2:	f000 fcd9 	bl	8007288 <xTaskResumeAll>
 80068d6:	b970      	cbnz	r0, 80068f6 <xQueueGenericSend+0x15a>
					portYIELD_WITHIN_API();
 80068d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80068dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	e7bd      	b.n	800686a <xQueueGenericSend+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068ee:	a802      	add	r0, sp, #8
 80068f0:	f000 fe40 	bl	8007574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068f4:	e7c4      	b.n	8006880 <xQueueGenericSend+0xe4>
		taskENTER_CRITICAL();
 80068f6:	f001 f95d 	bl	8007bb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068fc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d9b9      	bls.n	8006876 <xQueueGenericSend+0xda>
 8006902:	e76e      	b.n	80067e2 <xQueueGenericSend+0x46>
					taskEXIT_CRITICAL();
 8006904:	f001 f978 	bl	8007bf8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006908:	2000      	movs	r0, #0
 800690a:	e781      	b.n	8006810 <xQueueGenericSend+0x74>
			prvUnlockQueue( pxQueue );
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff fe67 	bl	80065e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006912:	f000 fcb9 	bl	8007288 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006916:	e7f7      	b.n	8006908 <xQueueGenericSend+0x16c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006918:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800691c:	f000 fda0 	bl	8007460 <xTaskRemoveFromEventList>
 8006920:	2800      	cmp	r0, #0
 8006922:	f43f af72 	beq.w	800680a <xQueueGenericSend+0x6e>
 8006926:	e766      	b.n	80067f6 <xQueueGenericSend+0x5a>

08006928 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8006928:	2800      	cmp	r0, #0
 800692a:	d047      	beq.n	80069bc <xQueueGenericSendFromISR+0x94>
{
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	4604      	mov	r4, r0
 8006932:	460e      	mov	r6, r1
 8006934:	4617      	mov	r7, r2
 8006936:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006938:	b321      	cbz	r1, 8006984 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800693a:	2d02      	cmp	r5, #2
 800693c:	d10b      	bne.n	8006956 <xQueueGenericSendFromISR+0x2e>
 800693e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d008      	beq.n	8006956 <xQueueGenericSendFromISR+0x2e>
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006956:	f001 fa11 	bl	8007d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800695a:	f3ef 8811 	mrs	r8, BASEPRI
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800696e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006970:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006972:	429a      	cmp	r2, r3
 8006974:	d312      	bcc.n	800699c <xQueueGenericSendFromISR+0x74>
 8006976:	2d02      	cmp	r5, #2
 8006978:	d010      	beq.n	800699c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 800697a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800697c:	f388 8811 	msr	BASEPRI, r8
}
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006984:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0d7      	beq.n	800693a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	e7fe      	b.n	800699a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800699c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800699e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069a2:	4631      	mov	r1, r6
 80069a4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80069a6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069a8:	f7ff fde2 	bl	8006570 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80069ac:	1c6b      	adds	r3, r5, #1
 80069ae:	d00e      	beq.n	80069ce <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069b0:	1c6b      	adds	r3, r5, #1
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7df      	b.n	800697c <xQueueGenericSendFromISR+0x54>
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f1      	beq.n	80069b8 <xQueueGenericSendFromISR+0x90>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80069d8:	f000 fd42 	bl	8007460 <xTaskRemoveFromEventList>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d0eb      	beq.n	80069b8 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80069e0:	2f00      	cmp	r7, #0
 80069e2:	d0e9      	beq.n	80069b8 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	e7e6      	b.n	80069b8 <xQueueGenericSendFromISR+0x90>
 80069ea:	bf00      	nop

080069ec <xQueueReceive>:
{
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	b085      	sub	sp, #20
 80069f0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f000 809e 	beq.w	8006b34 <xQueueReceive+0x148>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f8:	4604      	mov	r4, r0
 80069fa:	460e      	mov	r6, r1
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d041      	beq.n	8006a84 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a00:	f000 fe0a 	bl	8007618 <xTaskGetSchedulerState>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d049      	beq.n	8006a9c <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 8006a08:	f001 f8d4 	bl	8007bb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	d161      	bne.n	8006ad6 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	b38b      	cbz	r3, 8006a7a <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a16:	a802      	add	r0, sp, #8
 8006a18:	f000 fdac 	bl	8007574 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8006a1c:	462f      	mov	r7, r5
		taskEXIT_CRITICAL();
 8006a1e:	f001 f8eb 	bl	8007bf8 <vPortExitCritical>
		vTaskSuspendAll();
 8006a22:	f000 fae9 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a26:	f001 f8c5 	bl	8007bb4 <vPortEnterCritical>
 8006a2a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a2e:	2bff      	cmp	r3, #255	@ 0xff
 8006a30:	bf08      	it	eq
 8006a32:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8006a36:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a3a:	2bff      	cmp	r3, #255	@ 0xff
 8006a3c:	bf08      	it	eq
 8006a3e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8006a42:	f001 f8d9 	bl	8007bf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a46:	a901      	add	r1, sp, #4
 8006a48:	a802      	add	r0, sp, #8
 8006a4a:	f000 fd9f 	bl	800758c <xTaskCheckForTimeOut>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d130      	bne.n	8006ab4 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 8006a52:	f001 f8af 	bl	8007bb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a56:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d052      	beq.n	8006b02 <xQueueReceive+0x116>
	taskEXIT_CRITICAL();
 8006a5c:	f001 f8cc 	bl	8007bf8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7ff fdbd 	bl	80065e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a66:	f000 fc0f 	bl	8007288 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006a6a:	f001 f8a3 	bl	8007bb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a6e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	d130      	bne.n	8006ad6 <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1d1      	bne.n	8006a1e <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 8006a7a:	f001 f8bd 	bl	8007bf8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a7e:	2000      	movs	r0, #0
}
 8006a80:	b005      	add	sp, #20
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a84:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0ba      	beq.n	8006a00 <xQueueReceive+0x14>
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	e7fe      	b.n	8006a9a <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0b2      	beq.n	8006a08 <xQueueReceive+0x1c>
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	e7fe      	b.n	8006ab2 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7ff fd93 	bl	80065e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aba:	f000 fbe5 	bl	8007288 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006abe:	f001 f879 	bl	8007bb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ac2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0d8      	beq.n	8006a7a <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8006ac8:	f001 f896 	bl	8007bf8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006acc:	f001 f872 	bl	8007bb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	d0ce      	beq.n	8006a74 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ad6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006ad8:	b15a      	cbz	r2, 8006af2 <xQueueReceive+0x106>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006ada:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006adc:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006ade:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ae0:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006ae2:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006ae4:	bf28      	it	cs
 8006ae6:	6821      	ldrcs	r1, [r4, #0]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006ae8:	4630      	mov	r0, r6
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006aea:	bf28      	it	cs
 8006aec:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006aee:	f002 fa42 	bl	8008f76 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006af2:	3d01      	subs	r5, #1
 8006af4:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	bb2b      	cbnz	r3, 8006b46 <xQueueReceive+0x15a>
				taskEXIT_CRITICAL();
 8006afa:	f001 f87d 	bl	8007bf8 <vPortExitCritical>
				return pdPASS;
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7be      	b.n	8006a80 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8006b02:	f001 f879 	bl	8007bf8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b06:	9901      	ldr	r1, [sp, #4]
 8006b08:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006b0c:	f000 fc42 	bl	8007394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff fd65 	bl	80065e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b16:	f000 fbb7 	bl	8007288 <xTaskResumeAll>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d1d6      	bne.n	8006acc <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 8006b1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006b32:	e7cb      	b.n	8006acc <xQueueReceive+0xe0>
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006b44:	e7fe      	b.n	8006b44 <xQueueReceive+0x158>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b46:	f104 0010 	add.w	r0, r4, #16
 8006b4a:	f000 fc89 	bl	8007460 <xTaskRemoveFromEventList>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d0d3      	beq.n	8006afa <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8006b52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	e7c8      	b.n	8006afa <xQueueReceive+0x10e>

08006b68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b68:	2300      	movs	r3, #0
	{
 8006b6a:	b410      	push	{r4}
 8006b6c:	4a08      	ldr	r2, [pc, #32]	@ (8006b90 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b6e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8006b72:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8006b76:	b124      	cbz	r4, 8006b82 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b78:	3301      	adds	r3, #1
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d1f7      	bne.n	8006b6e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b7e:	bc10      	pop	{r4}
 8006b80:	4770      	bx	lr
 8006b82:	bc10      	pop	{r4}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b88:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000d08 	.word	0x20000d08

08006b94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4604      	mov	r4, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b9c:	f001 f80a 	bl	8007bb4 <vPortEnterCritical>
 8006ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006ba4:	2bff      	cmp	r3, #255	@ 0xff
 8006ba6:	bf04      	itt	eq
 8006ba8:	2300      	moveq	r3, #0
 8006baa:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8006bae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006bb2:	2bff      	cmp	r3, #255	@ 0xff
 8006bb4:	bf04      	itt	eq
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8006bbc:	f001 f81c 	bl	8007bf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006bc2:	b123      	cbz	r3, 8006bce <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bc4:	4620      	mov	r0, r4
	}
 8006bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006bca:	f7ff bd09 	b.w	80065e0 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bce:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	f000 fc23 	bl	8007420 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8006bda:	4620      	mov	r0, r4
	}
 8006bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006be0:	f7ff bcfe 	b.w	80065e0 <prvUnlockQueue>

08006be4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be8:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bea:	f000 ffe3 	bl	8007bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bee:	4a34      	ldr	r2, [pc, #208]	@ (8006cc0 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8006bf0:	4e34      	ldr	r6, [pc, #208]	@ (8006cc4 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d031      	beq.n	8006c62 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bfe:	4c32      	ldr	r4, [pc, #200]	@ (8006cc8 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c00:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	b333      	cbz	r3, 8006c54 <prvAddNewTaskToReadyList+0x70>
 8006c06:	4f31      	ldr	r7, [pc, #196]	@ (8006ccc <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c08:	4a31      	ldr	r2, [pc, #196]	@ (8006cd0 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c0a:	4932      	ldr	r1, [pc, #200]	@ (8006cd4 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006c0c:	6813      	ldr	r3, [r2, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c12:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006c14:	680b      	ldr	r3, [r1, #0]
 8006c16:	4283      	cmp	r3, r0
 8006c18:	bf38      	it	cc
 8006c1a:	6008      	strcc	r0, [r1, #0]
 8006c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c20:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006c24:	1d29      	adds	r1, r5, #4
 8006c26:	f7ff fc6b 	bl	8006500 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c2a:	f000 ffe5 	bl	8007bf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	b173      	cbz	r3, 8006c50 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c32:	6832      	ldr	r2, [r6, #0]
 8006c34:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006c36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d209      	bcs.n	8006c50 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	4f1d      	ldr	r7, [pc, #116]	@ (8006ccc <prvAddNewTaskToReadyList+0xe8>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5a:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8006c5c:	bf98      	it	ls
 8006c5e:	6035      	strls	r5, [r6, #0]
 8006c60:	e7d2      	b.n	8006c08 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006c62:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d003      	beq.n	8006c72 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006c6c:	4f17      	ldr	r7, [pc, #92]	@ (8006ccc <prvAddNewTaskToReadyList+0xe8>)
 8006c6e:	4c16      	ldr	r4, [pc, #88]	@ (8006cc8 <prvAddNewTaskToReadyList+0xe4>)
 8006c70:	e7ca      	b.n	8006c08 <prvAddNewTaskToReadyList+0x24>
 8006c72:	4f16      	ldr	r7, [pc, #88]	@ (8006ccc <prvAddNewTaskToReadyList+0xe8>)
 8006c74:	463c      	mov	r4, r7
 8006c76:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c7a:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c7c:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c7e:	f7ff fc2f 	bl	80064e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c82:	45a0      	cmp	r8, r4
 8006c84:	d1f9      	bne.n	8006c7a <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c86:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8006cd8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8006c8a:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8006cdc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList1 );
 8006c8e:	4648      	mov	r0, r9
 8006c90:	f7ff fc26 	bl	80064e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c94:	4640      	mov	r0, r8
 8006c96:	f7ff fc23 	bl	80064e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c9a:	4811      	ldr	r0, [pc, #68]	@ (8006ce0 <prvAddNewTaskToReadyList+0xfc>)
 8006c9c:	f7ff fc20 	bl	80064e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ca0:	4810      	ldr	r0, [pc, #64]	@ (8006ce4 <prvAddNewTaskToReadyList+0x100>)
 8006ca2:	f7ff fc1d 	bl	80064e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca6:	4810      	ldr	r0, [pc, #64]	@ (8006ce8 <prvAddNewTaskToReadyList+0x104>)
 8006ca8:	f7ff fc1a 	bl	80064e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cac:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <prvAddNewTaskToReadyList+0x108>)
 8006cae:	4c06      	ldr	r4, [pc, #24]	@ (8006cc8 <prvAddNewTaskToReadyList+0xe4>)
 8006cb0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <prvAddNewTaskToReadyList+0x10c>)
		prvAddTaskToReadyList( pxNewTCB );
 8006cb6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cb8:	f8c3 8000 	str.w	r8, [r3]
}
 8006cbc:	e7a4      	b.n	8006c08 <prvAddNewTaskToReadyList+0x24>
 8006cbe:	bf00      	nop
 8006cc0:	20000d6c 	.word	0x20000d6c
 8006cc4:	20001240 	.word	0x20001240
 8006cc8:	20000d60 	.word	0x20000d60
 8006ccc:	20000de0 	.word	0x20000de0
 8006cd0:	20000d50 	.word	0x20000d50
 8006cd4:	20000d64 	.word	0x20000d64
 8006cd8:	20000dcc 	.word	0x20000dcc
 8006cdc:	20000db8 	.word	0x20000db8
 8006ce0:	20000d9c 	.word	0x20000d9c
 8006ce4:	20000d88 	.word	0x20000d88
 8006ce8:	20000d70 	.word	0x20000d70
 8006cec:	20000db4 	.word	0x20000db4
 8006cf0:	20000db0 	.word	0x20000db0

08006cf4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cf8:	4b15      	ldr	r3, [pc, #84]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cfa:	4e16      	ldr	r6, [pc, #88]	@ (8006d54 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8006cfc:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cfe:	6830      	ldr	r0, [r6, #0]
{
 8006d00:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d02:	3004      	adds	r0, #4
 8006d04:	f7ff fc22 	bl	800654c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d08:	1c6b      	adds	r3, r5, #1
 8006d0a:	d017      	beq.n	8006d3c <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	1964      	adds	r4, r4, r5
 8006d10:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006d12:	d307      	bcc.n	8006d24 <prvAddCurrentTaskToDelayedList+0x30>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d14:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <prvAddCurrentTaskToDelayedList+0x64>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d1e:	3104      	adds	r1, #4
 8006d20:	f7ff bbfc 	b.w	800651c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d24:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0x68>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	6831      	ldr	r1, [r6, #0]
 8006d2a:	3104      	adds	r1, #4
 8006d2c:	f7ff fbf6 	bl	800651c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d30:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006d36:	bf88      	it	hi
 8006d38:	601c      	strhi	r4, [r3, #0]
}
 8006d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d3c:	2f00      	cmp	r7, #0
 8006d3e:	d0e5      	beq.n	8006d0c <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d40:	6831      	ldr	r1, [r6, #0]
 8006d42:	4808      	ldr	r0, [pc, #32]	@ (8006d64 <prvAddCurrentTaskToDelayedList+0x70>)
 8006d44:	3104      	adds	r1, #4
}
 8006d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d4a:	f7ff bbd9 	b.w	8006500 <vListInsertEnd>
 8006d4e:	bf00      	nop
 8006d50:	20000d68 	.word	0x20000d68
 8006d54:	20001240 	.word	0x20001240
 8006d58:	20000db0 	.word	0x20000db0
 8006d5c:	20000db4 	.word	0x20000db4
 8006d60:	20000d4c 	.word	0x20000d4c
 8006d64:	20000d70 	.word	0x20000d70

08006d68 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d70:	0095      	lsls	r5, r2, #2
 8006d72:	21a5      	movs	r1, #165	@ 0xa5
 8006d74:	462a      	mov	r2, r5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d76:	4606      	mov	r6, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d78:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d7a:	461f      	mov	r7, r3
 8006d7c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d80:	f002 f85c 	bl	8008e3c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006d86:	3d04      	subs	r5, #4
 8006d88:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d8a:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d8e:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8006d92:	f109 3cff 	add.w	ip, r9, #4294967295
 8006d96:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d9a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8006d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
		if( pcName[ x ] == 0x00 )
 8006da2:	b10a      	cbz	r2, 8006da8 <prvInitialiseNewTask.constprop.0+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006da4:	458c      	cmp	ip, r1
 8006da6:	d1f8      	bne.n	8006d9a <prvInitialiseNewTask.constprop.0+0x32>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dac:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006db0:	f1b9 0f37 	cmp.w	r9, #55	@ 0x37
 8006db4:	bf28      	it	cs
 8006db6:	f04f 0937 	movcs.w	r9, #55	@ 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dba:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006dbc:	e9c4 9a13 	strd	r9, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8006dc0:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dc4:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dc8:	f7ff fb96 	bl	80064f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dcc:	f104 0018 	add.w	r0, r4, #24
 8006dd0:	f7ff fb92 	bl	80064f8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd4:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		pxNewTCB->ulNotifiedValue = 0;
 8006dd8:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ddc:	463a      	mov	r2, r7
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de2:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006de4:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006de8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dea:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dec:	f000 febc 	bl	8007b68 <pxPortInitialiseStack>
 8006df0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006df2:	f1b8 0f00 	cmp.w	r8, #0
 8006df6:	d001      	beq.n	8006dfc <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006df8:	f8c8 4000 	str.w	r4, [r8]
}
 8006dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e00 <prvIdleTask>:
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	4c21      	ldr	r4, [pc, #132]	@ (8006e88 <prvIdleTask+0x88>)
 8006e04:	4e21      	ldr	r6, [pc, #132]	@ (8006e8c <prvIdleTask+0x8c>)
 8006e06:	4d22      	ldr	r5, [pc, #136]	@ (8006e90 <prvIdleTask+0x90>)
 8006e08:	4f22      	ldr	r7, [pc, #136]	@ (8006e94 <prvIdleTask+0x94>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	b353      	cbz	r3, 8006e64 <prvIdleTask+0x64>
			taskENTER_CRITICAL();
 8006e0e:	f000 fed1 	bl	8007bb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e12:	68f3      	ldr	r3, [r6, #12]
 8006e14:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e18:	f108 0004 	add.w	r0, r8, #4
 8006e1c:	f7ff fb96 	bl	800654c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006e2c:	f000 fee4 	bl	8007bf8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e30:	f898 3059 	ldrb.w	r3, [r8, #89]	@ 0x59
 8006e34:	b163      	cbz	r3, 8006e50 <prvIdleTask+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d022      	beq.n	8006e80 <prvIdleTask+0x80>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d0e5      	beq.n	8006e0a <prvIdleTask+0xa>
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	e7fe      	b.n	8006e4e <prvIdleTask+0x4e>
				vPortFree( pxTCB->pxStack );
 8006e50:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 8006e54:	f001 f87a 	bl	8007f4c <vPortFree>
				vPortFree( pxTCB );
 8006e58:	4640      	mov	r0, r8
 8006e5a:	f001 f877 	bl	8007f4c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1d4      	bne.n	8006e0e <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d9cf      	bls.n	8006e0a <prvIdleTask+0xa>
				taskYIELD();
 8006e6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	e7c4      	b.n	8006e0a <prvIdleTask+0xa>
				vPortFree( pxTCB );
 8006e80:	4640      	mov	r0, r8
 8006e82:	f001 f863 	bl	8007f4c <vPortFree>
 8006e86:	e7c0      	b.n	8006e0a <prvIdleTask+0xa>
 8006e88:	20000d84 	.word	0x20000d84
 8006e8c:	20000d88 	.word	0x20000d88
 8006e90:	20000d6c 	.word	0x20000d6c
 8006e94:	20000de0 	.word	0x20000de0

08006e98 <xTaskCreateStatic>:
	{
 8006e98:	b530      	push	{r4, r5, lr}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006e9e:	b1c4      	cbz	r4, 8006ed2 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8006ea0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006ea2:	b16d      	cbz	r5, 8006ec0 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ea4:	255c      	movs	r5, #92	@ 0x5c
 8006ea6:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ea8:	9d05      	ldr	r5, [sp, #20]
 8006eaa:	2d5c      	cmp	r5, #92	@ 0x5c
 8006eac:	d01a      	beq.n	8006ee4 <xTaskCreateStatic+0x4c>
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	e7fe      	b.n	8006ebe <xTaskCreateStatic+0x26>
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006ed0:	e7fe      	b.n	8006ed0 <xTaskCreateStatic+0x38>
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006ee2:	e7fe      	b.n	8006ee2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ee4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006ee6:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eea:	9502      	str	r5, [sp, #8]
 8006eec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006eee:	9500      	str	r5, [sp, #0]
 8006ef0:	ad04      	add	r5, sp, #16
 8006ef2:	9501      	str	r5, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006ef6:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006efa:	f7ff ff35 	bl	8006d68 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006efe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006f00:	f7ff fe70 	bl	8006be4 <prvAddNewTaskToReadyList>
	}
 8006f04:	9804      	ldr	r0, [sp, #16]
 8006f06:	b007      	add	sp, #28
 8006f08:	bd30      	pop	{r4, r5, pc}
 8006f0a:	bf00      	nop

08006f0c <xTaskCreate>:
	{
 8006f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f10:	4607      	mov	r7, r0
 8006f12:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f14:	0090      	lsls	r0, r2, #2
	{
 8006f16:	4615      	mov	r5, r2
 8006f18:	4688      	mov	r8, r1
 8006f1a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1c:	f000 ff86 	bl	8007e2c <pvPortMalloc>
			if( pxStack != NULL )
 8006f20:	b1f0      	cbz	r0, 8006f60 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f22:	4604      	mov	r4, r0
 8006f24:	205c      	movs	r0, #92	@ 0x5c
 8006f26:	f000 ff81 	bl	8007e2c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	b1a8      	cbz	r0, 8006f5a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006f2e:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f30:	2400      	movs	r4, #0
 8006f32:	f886 4059 	strb.w	r4, [r6, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f36:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8006f38:	464b      	mov	r3, r9
 8006f3a:	9401      	str	r4, [sp, #4]
 8006f3c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4641      	mov	r1, r8
 8006f42:	4638      	mov	r0, r7
 8006f44:	9602      	str	r6, [sp, #8]
 8006f46:	9400      	str	r4, [sp, #0]
 8006f48:	f7ff ff0e 	bl	8006d68 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fe49 	bl	8006be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f52:	2001      	movs	r0, #1
	}
 8006f54:	b005      	add	sp, #20
 8006f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fff6 	bl	8007f4c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f64:	b005      	add	sp, #20
 8006f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	bf00      	nop

08006f6c <vTaskStartScheduler>:
{
 8006f6c:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6e:	2400      	movs	r4, #0
{
 8006f70:	b089      	sub	sp, #36	@ 0x24
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f72:	aa07      	add	r2, sp, #28
 8006f74:	a906      	add	r1, sp, #24
 8006f76:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f78:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f7c:	f7ff f970 	bl	8006260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f80:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006f84:	4623      	mov	r3, r4
 8006f86:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006f8a:	9a07      	ldr	r2, [sp, #28]
 8006f8c:	4915      	ldr	r1, [pc, #84]	@ (8006fe4 <vTaskStartScheduler+0x78>)
 8006f8e:	4816      	ldr	r0, [pc, #88]	@ (8006fe8 <vTaskStartScheduler+0x7c>)
 8006f90:	9400      	str	r4, [sp, #0]
 8006f92:	f7ff ff81 	bl	8006e98 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006f96:	b170      	cbz	r0, 8006fb6 <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 8006f98:	f000 fbd4 	bl	8007744 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006f9c:	2801      	cmp	r0, #1
 8006f9e:	d00c      	beq.n	8006fba <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d108      	bne.n	8006fb6 <vTaskStartScheduler+0x4a>
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	e7fe      	b.n	8006fb4 <vTaskStartScheduler+0x48>
}
 8006fb6:	b009      	add	sp, #36	@ 0x24
 8006fb8:	bd30      	pop	{r4, r5, pc}
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fca:	f04f 35ff 	mov.w	r5, #4294967295
 8006fce:	4907      	ldr	r1, [pc, #28]	@ (8006fec <vTaskStartScheduler+0x80>)
		xSchedulerRunning = pdTRUE;
 8006fd0:	4a07      	ldr	r2, [pc, #28]	@ (8006ff0 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
 8006fd2:	4b08      	ldr	r3, [pc, #32]	@ (8006ff4 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fd4:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006fd6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006fd8:	601c      	str	r4, [r3, #0]
}
 8006fda:	b009      	add	sp, #36	@ 0x24
 8006fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006fe0:	f000 be6c 	b.w	8007cbc <xPortStartScheduler>
 8006fe4:	0800ae24 	.word	0x0800ae24
 8006fe8:	08006e01 	.word	0x08006e01
 8006fec:	20000d4c 	.word	0x20000d4c
 8006ff0:	20000d60 	.word	0x20000d60
 8006ff4:	20000d68 	.word	0x20000d68

08006ff8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006ff8:	4a02      	ldr	r2, [pc, #8]	@ (8007004 <vTaskSuspendAll+0xc>)
 8006ffa:	6813      	ldr	r3, [r2, #0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	6013      	str	r3, [r2, #0]
}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000d48 	.word	0x20000d48

08007008 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007008:	4b01      	ldr	r3, [pc, #4]	@ (8007010 <xTaskGetTickCount+0x8>)
 800700a:	6818      	ldr	r0, [r3, #0]
}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000d68 	.word	0x20000d68

08007014 <xTaskIncrementTick>:
{
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007018:	4b4c      	ldr	r3, [pc, #304]	@ (800714c <xTaskIncrementTick+0x138>)
{
 800701a:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d145      	bne.n	80070ae <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007022:	4b4b      	ldr	r3, [pc, #300]	@ (8007150 <xTaskIncrementTick+0x13c>)
 8007024:	681e      	ldr	r6, [r3, #0]
 8007026:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007028:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800702a:	2e00      	cmp	r6, #0
 800702c:	d04d      	beq.n	80070ca <xTaskIncrementTick+0xb6>
 800702e:	4b49      	ldr	r3, [pc, #292]	@ (8007154 <xTaskIncrementTick+0x140>)
 8007030:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	42b3      	cmp	r3, r6
 8007038:	d854      	bhi.n	80070e4 <xTaskIncrementTick+0xd0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4f47      	ldr	r7, [pc, #284]	@ (8007158 <xTaskIncrementTick+0x144>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681d      	ldr	r5, [r3, #0]
 8007040:	2d00      	cmp	r5, #0
 8007042:	d072      	beq.n	800712a <xTaskIncrementTick+0x116>
BaseType_t xSwitchRequired = pdFALSE;
 8007044:	2500      	movs	r5, #0
 8007046:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800715c <xTaskIncrementTick+0x148>
 800704a:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8007160 <xTaskIncrementTick+0x14c>
					prvAddTaskToReadyList( pxTCB );
 800704e:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8007164 <xTaskIncrementTick+0x150>
 8007052:	e021      	b.n	8007098 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007054:	4658      	mov	r0, fp
 8007056:	f7ff fa79 	bl	800654c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800705a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800705c:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007060:	b10b      	cbz	r3, 8007066 <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007062:	f7ff fa73 	bl	800654c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007066:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007068:	f8d8 3000 	ldr.w	r3, [r8]
 800706c:	4659      	mov	r1, fp
 800706e:	4298      	cmp	r0, r3
 8007070:	bf88      	it	hi
 8007072:	f8c8 0000 	strhi.w	r0, [r8]
 8007076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800707a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800707e:	f7ff fa3f 	bl	8006500 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007082:	f8da 3000 	ldr.w	r3, [sl]
 8007086:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800708a:	429a      	cmp	r2, r3
 800708c:	bf28      	it	cs
 800708e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d04c      	beq.n	8007132 <xTaskIncrementTick+0x11e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800709e:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a0:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 80070a4:	429e      	cmp	r6, r3
 80070a6:	d2d5      	bcs.n	8007054 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	6013      	str	r3, [r2, #0]
						break;
 80070ac:	e01f      	b.n	80070ee <xTaskIncrementTick+0xda>
BaseType_t xSwitchRequired = pdFALSE;
 80070ae:	2500      	movs	r5, #0
		++uxPendedTicks;
 80070b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007168 <xTaskIncrementTick+0x154>)
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80070b8:	4b2c      	ldr	r3, [pc, #176]	@ (800716c <xTaskIncrementTick+0x158>)
 80070ba:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80070bc:	2b00      	cmp	r3, #0
}
 80070be:	bf0c      	ite	eq
 80070c0:	4628      	moveq	r0, r5
 80070c2:	2001      	movne	r0, #1
 80070c4:	b003      	add	sp, #12
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80070ca:	4b23      	ldr	r3, [pc, #140]	@ (8007158 <xTaskIncrementTick+0x144>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	b1ca      	cbz	r2, 8007106 <xTaskIncrementTick+0xf2>
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	e7fe      	b.n	80070e2 <xTaskIncrementTick+0xce>
BaseType_t xSwitchRequired = pdFALSE;
 80070e4:	2500      	movs	r5, #0
 80070e6:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 800715c <xTaskIncrementTick+0x148>
 80070ea:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8007160 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070ee:	f8da 3000 	ldr.w	r3, [sl]
 80070f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f859 3003 	ldr.w	r3, [r9, r3]
				xSwitchRequired = pdTRUE;
 80070fe:	2b02      	cmp	r3, #2
 8007100:	bf28      	it	cs
 8007102:	2501      	movcs	r5, #1
 8007104:	e7d8      	b.n	80070b8 <xTaskIncrementTick+0xa4>
			taskSWITCH_DELAYED_LISTS();
 8007106:	4a1a      	ldr	r2, [pc, #104]	@ (8007170 <xTaskIncrementTick+0x15c>)
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	6811      	ldr	r1, [r2, #0]
 800710c:	6019      	str	r1, [r3, #0]
 800710e:	4919      	ldr	r1, [pc, #100]	@ (8007174 <xTaskIncrementTick+0x160>)
 8007110:	6010      	str	r0, [r2, #0]
 8007112:	680a      	ldr	r2, [r1, #0]
 8007114:	3201      	adds	r2, #1
 8007116:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	6812      	ldr	r2, [r2, #0]
 800711c:	b972      	cbnz	r2, 800713c <xTaskIncrementTick+0x128>
		xNextTaskUnblockTime = portMAX_DELAY;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	4a0c      	ldr	r2, [pc, #48]	@ (8007154 <xTaskIncrementTick+0x140>)
 8007124:	9201      	str	r2, [sp, #4]
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	e783      	b.n	8007032 <xTaskIncrementTick+0x1e>
 800712a:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 800715c <xTaskIncrementTick+0x148>
 800712e:	f8df a030 	ldr.w	sl, [pc, #48]	@ 8007160 <xTaskIncrementTick+0x14c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	6013      	str	r3, [r2, #0]
					break;
 800713a:	e7d8      	b.n	80070ee <xTaskIncrementTick+0xda>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800713c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800713e:	4a05      	ldr	r2, [pc, #20]	@ (8007154 <xTaskIncrementTick+0x140>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007140:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	6013      	str	r3, [r2, #0]
}
 800714a:	e772      	b.n	8007032 <xTaskIncrementTick+0x1e>
 800714c:	20000d48 	.word	0x20000d48
 8007150:	20000d68 	.word	0x20000d68
 8007154:	20000d4c 	.word	0x20000d4c
 8007158:	20000db4 	.word	0x20000db4
 800715c:	20000de0 	.word	0x20000de0
 8007160:	20001240 	.word	0x20001240
 8007164:	20000d64 	.word	0x20000d64
 8007168:	20000d5c 	.word	0x20000d5c
 800716c:	20000d58 	.word	0x20000d58
 8007170:	20000db0 	.word	0x20000db0
 8007174:	20000d54 	.word	0x20000d54

08007178 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800717c:	f000 fd1a 	bl	8007bb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007180:	4b37      	ldr	r3, [pc, #220]	@ (8007260 <xTaskResumeAll.part.0+0xe8>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	3a01      	subs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d159      	bne.n	8007242 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800718e:	4b35      	ldr	r3, [pc, #212]	@ (8007264 <xTaskResumeAll.part.0+0xec>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d055      	beq.n	8007242 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007196:	4d34      	ldr	r5, [pc, #208]	@ (8007268 <xTaskResumeAll.part.0+0xf0>)
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d05c      	beq.n	8007258 <xTaskResumeAll.part.0+0xe0>
						xYieldPending = pdTRUE;
 800719e:	f04f 0a01 	mov.w	sl, #1
 80071a2:	4e32      	ldr	r6, [pc, #200]	@ (800726c <xTaskResumeAll.part.0+0xf4>)
 80071a4:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8007270 <xTaskResumeAll.part.0+0xf8>
 80071a8:	4f32      	ldr	r7, [pc, #200]	@ (8007274 <xTaskResumeAll.part.0+0xfc>)
 80071aa:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 8007278 <xTaskResumeAll.part.0+0x100>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80071ae:	68eb      	ldr	r3, [r5, #12]
 80071b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071b6:	f104 0018 	add.w	r0, r4, #24
 80071ba:	f7ff f9c7 	bl	800654c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071be:	4658      	mov	r0, fp
 80071c0:	f7ff f9c4 	bl	800654c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80071c6:	6832      	ldr	r2, [r6, #0]
 80071c8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80071cc:	4293      	cmp	r3, r2
 80071ce:	4659      	mov	r1, fp
 80071d0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80071d4:	bf88      	it	hi
 80071d6:	6033      	strhi	r3, [r6, #0]
 80071d8:	f7ff f992 	bl	8006500 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80071e4:	bf28      	it	cs
 80071e6:	f8c9 a000 	strcs.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ea:	682b      	ldr	r3, [r5, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1de      	bne.n	80071ae <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f0:	4b22      	ldr	r3, [pc, #136]	@ (800727c <xTaskResumeAll.part.0+0x104>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	6812      	ldr	r2, [r2, #0]
 80071f6:	b352      	cbz	r2, 800724e <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071f8:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071fc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071fe:	68d2      	ldr	r2, [r2, #12]
 8007200:	6852      	ldr	r2, [r2, #4]
 8007202:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007204:	4e1f      	ldr	r6, [pc, #124]	@ (8007284 <xTaskResumeAll.part.0+0x10c>)
 8007206:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007208:	b144      	cbz	r4, 800721c <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 800720a:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800720c:	f7ff ff02 	bl	8007014 <xTaskIncrementTick>
 8007210:	b108      	cbz	r0, 8007216 <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8007212:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007216:	3c01      	subs	r4, #1
 8007218:	d1f8      	bne.n	800720c <xTaskResumeAll.part.0+0x94>
						uxPendedTicks = 0;
 800721a:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800721c:	f8d9 3000 	ldr.w	r3, [r9]
 8007220:	b17b      	cbz	r3, 8007242 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8007222:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800722a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007236:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007238:	f000 fcde 	bl	8007bf8 <vPortExitCritical>
}
 800723c:	4620      	mov	r0, r4
 800723e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8007242:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007244:	f000 fcd8 	bl	8007bf8 <vPortExitCritical>
}
 8007248:	4620      	mov	r0, r4
 800724a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <xTaskResumeAll.part.0+0x108>)
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e7d5      	b.n	8007204 <xTaskResumeAll.part.0+0x8c>
 8007258:	f8df 901c 	ldr.w	r9, [pc, #28]	@ 8007278 <xTaskResumeAll.part.0+0x100>
 800725c:	e7d2      	b.n	8007204 <xTaskResumeAll.part.0+0x8c>
 800725e:	bf00      	nop
 8007260:	20000d48 	.word	0x20000d48
 8007264:	20000d6c 	.word	0x20000d6c
 8007268:	20000d9c 	.word	0x20000d9c
 800726c:	20000d64 	.word	0x20000d64
 8007270:	20000de0 	.word	0x20000de0
 8007274:	20001240 	.word	0x20001240
 8007278:	20000d58 	.word	0x20000d58
 800727c:	20000db4 	.word	0x20000db4
 8007280:	20000d4c 	.word	0x20000d4c
 8007284:	20000d5c 	.word	0x20000d5c

08007288 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007288:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <xTaskResumeAll+0x1c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	b943      	cbnz	r3, 80072a0 <xTaskResumeAll+0x18>
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	e7fe      	b.n	800729e <xTaskResumeAll+0x16>
 80072a0:	f7ff bf6a 	b.w	8007178 <xTaskResumeAll.part.0>
 80072a4:	20000d48 	.word	0x20000d48

080072a8 <vTaskDelay>:
	{
 80072a8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072aa:	b950      	cbnz	r0, 80072c2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80072ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
	}
 80072c0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80072c2:	4c10      	ldr	r4, [pc, #64]	@ (8007304 <vTaskDelay+0x5c>)
 80072c4:	6821      	ldr	r1, [r4, #0]
 80072c6:	b141      	cbz	r1, 80072da <vTaskDelay+0x32>
 80072c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	e7fe      	b.n	80072d8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072e0:	f7ff fd08 	bl	8006cf4 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b943      	cbnz	r3, 80072fa <vTaskDelay+0x52>
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	e7fe      	b.n	80072f8 <vTaskDelay+0x50>
 80072fa:	f7ff ff3d 	bl	8007178 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80072fe:	2800      	cmp	r0, #0
 8007300:	d0d4      	beq.n	80072ac <vTaskDelay+0x4>
	}
 8007302:	bd10      	pop	{r4, pc}
 8007304:	20000d48 	.word	0x20000d48

08007308 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007308:	4b1d      	ldr	r3, [pc, #116]	@ (8007380 <vTaskSwitchContext+0x78>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	b11b      	cbz	r3, 8007316 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800730e:	2201      	movs	r2, #1
 8007310:	4b1c      	ldr	r3, [pc, #112]	@ (8007384 <vTaskSwitchContext+0x7c>)
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007316:	4a1b      	ldr	r2, [pc, #108]	@ (8007384 <vTaskSwitchContext+0x7c>)
{
 8007318:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800731a:	4c1b      	ldr	r4, [pc, #108]	@ (8007388 <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 800731c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	491a      	ldr	r1, [pc, #104]	@ (800738c <vTaskSwitchContext+0x84>)
 8007322:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007326:	0092      	lsls	r2, r2, #2
 8007328:	588a      	ldr	r2, [r1, r2]
 800732a:	0098      	lsls	r0, r3, #2
 800732c:	b942      	cbnz	r2, 8007340 <vTaskSwitchContext+0x38>
 800732e:	b1eb      	cbz	r3, 800736c <vTaskSwitchContext+0x64>
 8007330:	3b01      	subs	r3, #1
 8007332:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800733a:	0098      	lsls	r0, r3, #2
 800733c:	2a00      	cmp	r2, #0
 800733e:	d0f6      	beq.n	800732e <vTaskSwitchContext+0x26>
 8007340:	4418      	add	r0, r3
 8007342:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8007346:	4662      	mov	r2, ip
 8007348:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800734c:	3208      	adds	r2, #8
 800734e:	6849      	ldr	r1, [r1, #4]
 8007350:	4291      	cmp	r1, r2
 8007352:	f8cc 1004 	str.w	r1, [ip, #4]
 8007356:	bf08      	it	eq
 8007358:	6849      	ldreq	r1, [r1, #4]
 800735a:	4a0d      	ldr	r2, [pc, #52]	@ (8007390 <vTaskSwitchContext+0x88>)
 800735c:	bf08      	it	eq
 800735e:	f8cc 1004 	streq.w	r1, [ip, #4]
 8007362:	68c9      	ldr	r1, [r1, #12]
 8007364:	6011      	str	r1, [r2, #0]
 8007366:	6023      	str	r3, [r4, #0]
}
 8007368:	bc10      	pop	{r4}
 800736a:	4770      	bx	lr
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800737c:	e7fe      	b.n	800737c <vTaskSwitchContext+0x74>
 800737e:	bf00      	nop
 8007380:	20000d48 	.word	0x20000d48
 8007384:	20000d58 	.word	0x20000d58
 8007388:	20000d64 	.word	0x20000d64
 800738c:	20000de0 	.word	0x20000de0
 8007390:	20001240 	.word	0x20001240

08007394 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007394:	b160      	cbz	r0, 80073b0 <vTaskPlaceOnEventList+0x1c>
{
 8007396:	b510      	push	{r4, lr}
 8007398:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <vTaskPlaceOnEventList+0x30>)
 800739c:	6819      	ldr	r1, [r3, #0]
 800739e:	3118      	adds	r1, #24
 80073a0:	f7ff f8bc 	bl	800651c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073a4:	4620      	mov	r0, r4
}
 80073a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073aa:	2101      	movs	r1, #1
 80073ac:	f7ff bca2 	b.w	8006cf4 <prvAddCurrentTaskToDelayedList>
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80073c0:	e7fe      	b.n	80073c0 <vTaskPlaceOnEventList+0x2c>
 80073c2:	bf00      	nop
 80073c4:	20001240 	.word	0x20001240

080073c8 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80073c8:	b1e8      	cbz	r0, 8007406 <vTaskPlaceOnUnorderedEventList+0x3e>
	configASSERT( uxSchedulerSuspended != 0 );
 80073ca:	4b13      	ldr	r3, [pc, #76]	@ (8007418 <vTaskPlaceOnUnorderedEventList+0x50>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	b943      	cbnz	r3, 80073e2 <vTaskPlaceOnUnorderedEventList+0x1a>
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	e7fe      	b.n	80073e0 <vTaskPlaceOnUnorderedEventList+0x18>
{
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4614      	mov	r4, r2
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <vTaskPlaceOnUnorderedEventList+0x54>)
 80073e8:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80073ec:	681a      	ldr	r2, [r3, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ee:	681b      	ldr	r3, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80073f0:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073f2:	f103 0118 	add.w	r1, r3, #24
 80073f6:	f7ff f883 	bl	8006500 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073fa:	4620      	mov	r0, r4
}
 80073fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007400:	2101      	movs	r1, #1
 8007402:	f7ff bc77 	b.w	8006cf4 <prvAddCurrentTaskToDelayedList>
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007416:	e7fe      	b.n	8007416 <vTaskPlaceOnUnorderedEventList+0x4e>
 8007418:	20000d48 	.word	0x20000d48
 800741c:	20001240 	.word	0x20001240

08007420 <vTaskPlaceOnEventListRestricted>:
	{
 8007420:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8007422:	b188      	cbz	r0, 8007448 <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007424:	4614      	mov	r4, r2
 8007426:	460d      	mov	r5, r1
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <vTaskPlaceOnEventListRestricted+0x3c>)
 800742a:	6819      	ldr	r1, [r3, #0]
 800742c:	3118      	adds	r1, #24
 800742e:	f7ff f867 	bl	8006500 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007432:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007434:	4621      	mov	r1, r4
 8007436:	bf08      	it	eq
 8007438:	4628      	moveq	r0, r5
	}
 800743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800743e:	bf18      	it	ne
 8007440:	f04f 30ff 	movne.w	r0, #4294967295
 8007444:	f7ff bc56 	b.w	8006cf4 <prvAddCurrentTaskToDelayedList>
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007458:	e7fe      	b.n	8007458 <vTaskPlaceOnEventListRestricted+0x38>
 800745a:	bf00      	nop
 800745c:	20001240 	.word	0x20001240

08007460 <xTaskRemoveFromEventList>:
{
 8007460:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007462:	68c3      	ldr	r3, [r0, #12]
 8007464:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007466:	b34c      	cbz	r4, 80074bc <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007468:	f104 0518 	add.w	r5, r4, #24
 800746c:	4628      	mov	r0, r5
 800746e:	f7ff f86d 	bl	800654c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007472:	4b18      	ldr	r3, [pc, #96]	@ (80074d4 <xTaskRemoveFromEventList+0x74>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	b173      	cbz	r3, 8007496 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007478:	4629      	mov	r1, r5
 800747a:	4817      	ldr	r0, [pc, #92]	@ (80074d8 <xTaskRemoveFromEventList+0x78>)
 800747c:	f7ff f840 	bl	8006500 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007480:	4b16      	ldr	r3, [pc, #88]	@ (80074dc <xTaskRemoveFromEventList+0x7c>)
 8007482:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	429a      	cmp	r2, r3
 800748a:	d920      	bls.n	80074ce <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	4a14      	ldr	r2, [pc, #80]	@ (80074e0 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8007490:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8007492:	6013      	str	r3, [r2, #0]
}
 8007494:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007496:	1d25      	adds	r5, r4, #4
 8007498:	4628      	mov	r0, r5
 800749a:	f7ff f857 	bl	800654c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800749e:	4a11      	ldr	r2, [pc, #68]	@ (80074e4 <xTaskRemoveFromEventList+0x84>)
 80074a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80074a2:	6811      	ldr	r1, [r2, #0]
 80074a4:	4810      	ldr	r0, [pc, #64]	@ (80074e8 <xTaskRemoveFromEventList+0x88>)
 80074a6:	428b      	cmp	r3, r1
 80074a8:	bf88      	it	hi
 80074aa:	6013      	strhi	r3, [r2, #0]
 80074ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074b0:	4629      	mov	r1, r5
 80074b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80074b6:	f7ff f823 	bl	8006500 <vListInsertEnd>
 80074ba:	e7e1      	b.n	8007480 <xTaskRemoveFromEventList+0x20>
 80074bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80074cc:	e7fe      	b.n	80074cc <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 80074ce:	2000      	movs	r0, #0
}
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	20000d48 	.word	0x20000d48
 80074d8:	20000d9c 	.word	0x20000d9c
 80074dc:	20001240 	.word	0x20001240
 80074e0:	20000d58 	.word	0x20000d58
 80074e4:	20000d64 	.word	0x20000d64
 80074e8:	20000de0 	.word	0x20000de0

080074ec <vTaskRemoveFromUnorderedEventList>:
{
 80074ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80074ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007560 <vTaskRemoveFromUnorderedEventList+0x74>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	b942      	cbnz	r2, 8007506 <vTaskRemoveFromUnorderedEventList+0x1a>
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	e7fe      	b.n	8007504 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007506:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007508:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800750c:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 800750e:	b1ec      	cbz	r4, 800754c <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007510:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 8007512:	f7ff f81b 	bl	800654c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007516:	4628      	mov	r0, r5
 8007518:	f7ff f818 	bl	800654c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800751c:	4a11      	ldr	r2, [pc, #68]	@ (8007564 <vTaskRemoveFromUnorderedEventList+0x78>)
 800751e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007520:	6811      	ldr	r1, [r2, #0]
 8007522:	4811      	ldr	r0, [pc, #68]	@ (8007568 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8007524:	428b      	cmp	r3, r1
 8007526:	bf88      	it	hi
 8007528:	6013      	strhi	r3, [r2, #0]
 800752a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800752e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007532:	4629      	mov	r1, r5
 8007534:	f7fe ffe4 	bl	8006500 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007538:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <vTaskRemoveFromUnorderedEventList+0x80>)
 800753a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d902      	bls.n	800754a <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 8007544:	2201      	movs	r2, #1
 8007546:	4b0a      	ldr	r3, [pc, #40]	@ (8007570 <vTaskRemoveFromUnorderedEventList+0x84>)
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800755c:	e7fe      	b.n	800755c <vTaskRemoveFromUnorderedEventList+0x70>
 800755e:	bf00      	nop
 8007560:	20000d48 	.word	0x20000d48
 8007564:	20000d64 	.word	0x20000d64
 8007568:	20000de0 	.word	0x20000de0
 800756c:	20001240 	.word	0x20001240
 8007570:	20000d58 	.word	0x20000d58

08007574 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007574:	4a03      	ldr	r2, [pc, #12]	@ (8007584 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007576:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007578:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000d54 	.word	0x20000d54
 8007588:	20000d68 	.word	0x20000d68

0800758c <xTaskCheckForTimeOut>:
{
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800758e:	b1f8      	cbz	r0, 80075d0 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
 8007590:	460d      	mov	r5, r1
 8007592:	b1a1      	cbz	r1, 80075be <xTaskCheckForTimeOut+0x32>
 8007594:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007596:	f000 fb0d 	bl	8007bb4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800759a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <xTaskCheckForTimeOut+0x78>)
			if( *pxTicksToWait == portMAX_DELAY )
 800759e:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80075a0:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80075a2:	d029      	beq.n	80075f8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075a4:	e9d4 c000 	ldrd	ip, r0, [r4]
 80075a8:	4e17      	ldr	r6, [pc, #92]	@ (8007608 <xTaskCheckForTimeOut+0x7c>)
 80075aa:	6837      	ldr	r7, [r6, #0]
 80075ac:	45bc      	cmp	ip, r7
 80075ae:	d018      	beq.n	80075e2 <xTaskCheckForTimeOut+0x56>
 80075b0:	4288      	cmp	r0, r1
 80075b2:	d816      	bhi.n	80075e2 <xTaskCheckForTimeOut+0x56>
			xReturn = pdTRUE;
 80075b4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80075b6:	f000 fb1f 	bl	8007bf8 <vPortExitCritical>
}
 80075ba:	4620      	mov	r0, r4
 80075bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80075ce:	e7fe      	b.n	80075ce <xTaskCheckForTimeOut+0x42>
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80075e0:	e7fe      	b.n	80075e0 <xTaskCheckForTimeOut+0x54>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075e2:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075e6:	4573      	cmp	r3, lr
 80075e8:	d908      	bls.n	80075fc <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 80075ea:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075ec:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075ee:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80075f0:	4403      	add	r3, r0
 80075f2:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075f4:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 80075f8:	2400      	movs	r4, #0
 80075fa:	e7dc      	b.n	80075b6 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007600:	e7d8      	b.n	80075b4 <xTaskCheckForTimeOut+0x28>
 8007602:	bf00      	nop
 8007604:	20000d68 	.word	0x20000d68
 8007608:	20000d54 	.word	0x20000d54

0800760c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800760c:	2201      	movs	r2, #1
 800760e:	4b01      	ldr	r3, [pc, #4]	@ (8007614 <vTaskMissedYield+0x8>)
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	4770      	bx	lr
 8007614:	20000d58 	.word	0x20000d58

08007618 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007618:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <xTaskGetSchedulerState+0x18>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	b133      	cbz	r3, 800762c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800761e:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <xTaskGetSchedulerState+0x1c>)
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	fab0 f080 	clz	r0, r0
 8007626:	0940      	lsrs	r0, r0, #5
 8007628:	0040      	lsls	r0, r0, #1
 800762a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800762c:	2001      	movs	r0, #1
	}
 800762e:	4770      	bx	lr
 8007630:	20000d60 	.word	0x20000d60
 8007634:	20000d48 	.word	0x20000d48

08007638 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007638:	b308      	cbz	r0, 800767e <xTaskPriorityDisinherit+0x46>
	{
 800763a:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800763c:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <xTaskPriorityDisinherit+0x7c>)
 800763e:	681c      	ldr	r4, [r3, #0]
 8007640:	4284      	cmp	r4, r0
 8007642:	d008      	beq.n	8007656 <xTaskPriorityDisinherit+0x1e>
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	e7fe      	b.n	8007654 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8007656:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007658:	b143      	cbz	r3, 800766c <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800765a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800765c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800765e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007660:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007662:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007664:	d000      	beq.n	8007668 <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007666:	b163      	cbz	r3, 8007682 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007668:	2000      	movs	r0, #0
	}
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800767c:	e7fe      	b.n	800767c <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 800767e:	2000      	movs	r0, #0
	}
 8007680:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007682:	1d25      	adds	r5, r4, #4
 8007684:	4628      	mov	r0, r5
 8007686:	f7fe ff61 	bl	800654c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800768a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 800768c:	4a0a      	ldr	r2, [pc, #40]	@ (80076b8 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800768e:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 8007692:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007694:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007696:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007698:	4283      	cmp	r3, r0
 800769a:	4808      	ldr	r0, [pc, #32]	@ (80076bc <xTaskPriorityDisinherit+0x84>)
 800769c:	bf88      	it	hi
 800769e:	6013      	strhi	r3, [r2, #0]
 80076a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80076a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7fe ff29 	bl	8006500 <vListInsertEnd>
					xReturn = pdTRUE;
 80076ae:	2001      	movs	r0, #1
	}
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	20001240 	.word	0x20001240
 80076b8:	20000d64 	.word	0x20000d64
 80076bc:	20000de0 	.word	0x20000de0

080076c0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80076c0:	4a04      	ldr	r2, [pc, #16]	@ (80076d4 <uxTaskResetEventItemValue+0x14>)
 80076c2:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c4:	6813      	ldr	r3, [r2, #0]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80076ca:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076cc:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80076d0:	6193      	str	r3, [r2, #24]
}
 80076d2:	4770      	bx	lr
 80076d4:	20001240 	.word	0x20001240

080076d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80076da:	4c12      	ldr	r4, [pc, #72]	@ (8007724 <prvCheckForValidListAndQueue+0x4c>)
{
 80076dc:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80076de:	f000 fa69 	bl	8007bb4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80076e2:	6825      	ldr	r5, [r4, #0]
 80076e4:	b125      	cbz	r5, 80076f0 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80076ec:	f000 ba84 	b.w	8007bf8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80076f0:	4f0d      	ldr	r7, [pc, #52]	@ (8007728 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80076f2:	4e0e      	ldr	r6, [pc, #56]	@ (800772c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7fe fef3 	bl	80064e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7fe fef0 	bl	80064e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007700:	4a0b      	ldr	r2, [pc, #44]	@ (8007730 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007702:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8007704:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007706:	4a0b      	ldr	r2, [pc, #44]	@ (8007734 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007708:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 800770a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770c:	200a      	movs	r0, #10
 800770e:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <prvCheckForValidListAndQueue+0x60>)
 8007710:	4a0a      	ldr	r2, [pc, #40]	@ (800773c <prvCheckForValidListAndQueue+0x64>)
 8007712:	f7fe fff1 	bl	80066f8 <xQueueGenericCreateStatic>
 8007716:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8007718:	2800      	cmp	r0, #0
 800771a:	d0e4      	beq.n	80076e6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800771c:	4908      	ldr	r1, [pc, #32]	@ (8007740 <prvCheckForValidListAndQueue+0x68>)
 800771e:	f7ff fa23 	bl	8006b68 <vQueueAddToRegistry>
 8007722:	e7e0      	b.n	80076e6 <prvCheckForValidListAndQueue+0xe>
 8007724:	2000133c 	.word	0x2000133c
 8007728:	2000135c 	.word	0x2000135c
 800772c:	20001348 	.word	0x20001348
 8007730:	20001344 	.word	0x20001344
 8007734:	20001340 	.word	0x20001340
 8007738:	20001244 	.word	0x20001244
 800773c:	20001294 	.word	0x20001294
 8007740:	0800ae2c 	.word	0x0800ae2c

08007744 <xTimerCreateTimerTask>:
{
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8007748:	f7ff ffc6 	bl	80076d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800774c:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <xTimerCreateTimerTask+0x54>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	b1cb      	cbz	r3, 8007786 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007752:	2400      	movs	r4, #0
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007754:	2502      	movs	r5, #2
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007756:	aa07      	add	r2, sp, #28
 8007758:	a906      	add	r1, sp, #24
 800775a:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800775c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007760:	f7fe fd8c 	bl	800627c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007764:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8007768:	4623      	mov	r3, r4
 800776a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800776e:	9a07      	ldr	r2, [sp, #28]
 8007770:	490a      	ldr	r1, [pc, #40]	@ (800779c <xTimerCreateTimerTask+0x58>)
 8007772:	480b      	ldr	r0, [pc, #44]	@ (80077a0 <xTimerCreateTimerTask+0x5c>)
 8007774:	9500      	str	r5, [sp, #0]
 8007776:	f7ff fb8f 	bl	8006e98 <xTaskCreateStatic>
 800777a:	4b0a      	ldr	r3, [pc, #40]	@ (80077a4 <xTimerCreateTimerTask+0x60>)
 800777c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800777e:	b110      	cbz	r0, 8007786 <xTimerCreateTimerTask+0x42>
}
 8007780:	2001      	movs	r0, #1
 8007782:	b009      	add	sp, #36	@ 0x24
 8007784:	bd30      	pop	{r4, r5, pc}
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007796:	e7fe      	b.n	8007796 <xTimerCreateTimerTask+0x52>
 8007798:	2000133c 	.word	0x2000133c
 800779c:	0800ae34 	.word	0x0800ae34
 80077a0:	0800788d 	.word	0x0800788d
 80077a4:	20001338 	.word	0x20001338

080077a8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80077a8:	b1c8      	cbz	r0, 80077de <xTimerGenericCommand+0x36>
{
 80077aa:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80077ac:	4d18      	ldr	r5, [pc, #96]	@ (8007810 <xTimerGenericCommand+0x68>)
{
 80077ae:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80077b0:	682c      	ldr	r4, [r5, #0]
 80077b2:	b18c      	cbz	r4, 80077d8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077b4:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 80077b6:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80077ba:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077bc:	dc18      	bgt.n	80077f0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077be:	f7ff ff2b 	bl	8007618 <xTaskGetSchedulerState>
 80077c2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077c4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077c8:	d01b      	beq.n	8007802 <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077ca:	4669      	mov	r1, sp
 80077cc:	461a      	mov	r2, r3
 80077ce:	6828      	ldr	r0, [r5, #0]
 80077d0:	f7fe ffe4 	bl	800679c <xQueueGenericSend>
}
 80077d4:	b005      	add	sp, #20
 80077d6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80077d8:	4620      	mov	r0, r4
}
 80077da:	b005      	add	sp, #20
 80077dc:	bd30      	pop	{r4, r5, pc}
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80077ee:	e7fe      	b.n	80077ee <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077f0:	469c      	mov	ip, r3
 80077f2:	4620      	mov	r0, r4
 80077f4:	2300      	movs	r3, #0
 80077f6:	4662      	mov	r2, ip
 80077f8:	4669      	mov	r1, sp
 80077fa:	f7ff f895 	bl	8006928 <xQueueGenericSendFromISR>
}
 80077fe:	b005      	add	sp, #20
 8007800:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007802:	4669      	mov	r1, sp
 8007804:	9a08      	ldr	r2, [sp, #32]
 8007806:	6828      	ldr	r0, [r5, #0]
 8007808:	f7fe ffc8 	bl	800679c <xQueueGenericSend>
 800780c:	e7e5      	b.n	80077da <xTimerGenericCommand+0x32>
 800780e:	bf00      	nop
 8007810:	2000133c 	.word	0x2000133c

08007814 <prvSwitchTimerLists>:
{
 8007814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007816:	4e1b      	ldr	r6, [pc, #108]	@ (8007884 <prvSwitchTimerLists+0x70>)
 8007818:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800781a:	e00c      	b.n	8007836 <prvSwitchTimerLists+0x22>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800781c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800781e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007820:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007822:	1d25      	adds	r5, r4, #4
 8007824:	4628      	mov	r0, r5
 8007826:	f7fe fe91 	bl	800654c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800782a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800782c:	4620      	mov	r0, r4
 800782e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007830:	69e3      	ldr	r3, [r4, #28]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d009      	beq.n	800784a <prvSwitchTimerLists+0x36>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007836:	6833      	ldr	r3, [r6, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	2a00      	cmp	r2, #0
 800783c:	d1ee      	bne.n	800781c <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 800783e:	4a12      	ldr	r2, [pc, #72]	@ (8007888 <prvSwitchTimerLists+0x74>)
 8007840:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007842:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8007844:	6031      	str	r1, [r6, #0]
}
 8007846:	b003      	add	sp, #12
 8007848:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800784a:	69a3      	ldr	r3, [r4, #24]
 800784c:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800784e:	429f      	cmp	r7, r3
 8007850:	d206      	bcs.n	8007860 <prvSwitchTimerLists+0x4c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007852:	4629      	mov	r1, r5
 8007854:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007856:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007858:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800785a:	f7fe fe5f 	bl	800651c <vListInsert>
 800785e:	e7ea      	b.n	8007836 <prvSwitchTimerLists+0x22>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007860:	2300      	movs	r3, #0
 8007862:	463a      	mov	r2, r7
 8007864:	4620      	mov	r0, r4
 8007866:	4619      	mov	r1, r3
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	f7ff ff9d 	bl	80077a8 <xTimerGenericCommand>
				configASSERT( xResult );
 800786e:	2800      	cmp	r0, #0
 8007870:	d1e1      	bne.n	8007836 <prvSwitchTimerLists+0x22>
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	e7fe      	b.n	8007882 <prvSwitchTimerLists+0x6e>
 8007884:	20001344 	.word	0x20001344
 8007888:	20001340 	.word	0x20001340

0800788c <prvTimerTask>:
{
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					portYIELD_WITHIN_API();
 8007890:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8007894:	4e8c      	ldr	r6, [pc, #560]	@ (8007ac8 <prvTimerTask+0x23c>)
 8007896:	4d8d      	ldr	r5, [pc, #564]	@ (8007acc <prvTimerTask+0x240>)
 8007898:	4c8d      	ldr	r4, [pc, #564]	@ (8007ad0 <prvTimerTask+0x244>)
{
 800789a:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800789c:	6832      	ldr	r2, [r6, #0]
 800789e:	f8d2 8000 	ldr.w	r8, [r2]
	if( *pxListWasEmpty == pdFALSE )
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	f000 809c 	beq.w	80079e2 <prvTimerTask+0x156>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078aa:	68d3      	ldr	r3, [r2, #12]
 80078ac:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80078b0:	f7ff fba2 	bl	8006ff8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80078b4:	f7ff fba8 	bl	8007008 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80078b8:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80078ba:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80078bc:	4282      	cmp	r2, r0
 80078be:	f200 80a1 	bhi.w	8007a04 <prvTimerTask+0x178>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c2:	4580      	cmp	r8, r0
	xLastTime = xTimeNow;
 80078c4:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c6:	f240 80b0 	bls.w	8007a2a <prvTimerTask+0x19e>
 80078ca:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	eba8 010b 	sub.w	r1, r8, fp
 80078d2:	f7ff f95f 	bl	8006b94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078d6:	f7ff fcd7 	bl	8007288 <xTaskResumeAll>
 80078da:	b938      	cbnz	r0, 80078ec <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 80078dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80078e0:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ec:	2200      	movs	r2, #0
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	f7ff f87b 	bl	80069ec <xQueueReceive>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0d0      	beq.n	800789c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078fa:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078fc:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078fe:	2b00      	cmp	r3, #0
 8007900:	db68      	blt.n	80079d4 <prvTimerTask+0x148>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007902:	9f06      	ldr	r7, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	b113      	cbz	r3, 800790e <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007908:	1d38      	adds	r0, r7, #4
 800790a:	f7fe fe1f 	bl	800654c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800790e:	f7ff fb7b 	bl	8007008 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007912:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8007914:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8007916:	4298      	cmp	r0, r3
 8007918:	d37b      	bcc.n	8007a12 <prvTimerTask+0x186>
			switch( xMessage.xMessageID )
 800791a:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800791c:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 8007920:	2b09      	cmp	r3, #9
 8007922:	d8e3      	bhi.n	80078ec <prvTimerTask+0x60>
 8007924:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <prvTimerTask+0xa0>)
 8007926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792a:	bf00      	nop
 800792c:	08007955 	.word	0x08007955
 8007930:	08007955 	.word	0x08007955
 8007934:	08007955 	.word	0x08007955
 8007938:	080078ed 	.word	0x080078ed
 800793c:	080079a5 	.word	0x080079a5
 8007940:	080079c5 	.word	0x080079c5
 8007944:	08007955 	.word	0x08007955
 8007948:	08007955 	.word	0x08007955
 800794c:	080078ed 	.word	0x080078ed
 8007950:	080079a5 	.word	0x080079a5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007954:	9b05      	ldr	r3, [sp, #20]
 8007956:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007958:	613f      	str	r7, [r7, #16]
 800795a:	1899      	adds	r1, r3, r2
 800795c:	bf2c      	ite	cs
 800795e:	2001      	movcs	r0, #1
 8007960:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8007962:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007964:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007966:	d857      	bhi.n	8007a18 <prvTimerTask+0x18c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007968:	ebab 0303 	sub.w	r3, fp, r3
 800796c:	429a      	cmp	r2, r3
 800796e:	d872      	bhi.n	8007a56 <prvTimerTask+0x1ca>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	4638      	mov	r0, r7
 8007974:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d1b7      	bne.n	80078ec <prvTimerTask+0x60>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800797c:	2300      	movs	r3, #0
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	9905      	ldr	r1, [sp, #20]
 8007982:	4638      	mov	r0, r7
 8007984:	440a      	add	r2, r1
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4619      	mov	r1, r3
 800798a:	f7ff ff0d 	bl	80077a8 <xTimerGenericCommand>
							configASSERT( xResult );
 800798e:	2800      	cmp	r0, #0
 8007990:	d1ac      	bne.n	80078ec <prvTimerTask+0x60>
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	e7fe      	b.n	80079a2 <prvTimerTask+0x116>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d07e      	beq.n	8007aaa <prvTimerTask+0x21e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079ac:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 80079ae:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079b0:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079b2:	bf96      	itet	ls
 80079b4:	4b47      	ldrls	r3, [pc, #284]	@ (8007ad4 <prvTimerTask+0x248>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079b6:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079b8:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ba:	613f      	str	r7, [r7, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079bc:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079be:	f7fe fdad 	bl	800651c <vListInsert>
 80079c2:	e793      	b.n	80078ec <prvTimerTask+0x60>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80079c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d18f      	bne.n	80078ec <prvTimerTask+0x60>
							vPortFree( pxTimer );
 80079cc:	4638      	mov	r0, r7
 80079ce:	f000 fabd 	bl	8007f4c <vPortFree>
 80079d2:	e78b      	b.n	80078ec <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	9907      	ldr	r1, [sp, #28]
 80079d8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	db85      	blt.n	80078ec <prvTimerTask+0x60>
 80079e0:	e78f      	b.n	8007902 <prvTimerTask+0x76>
	vTaskSuspendAll();
 80079e2:	f7ff fb09 	bl	8006ff8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80079e6:	f7ff fb0f 	bl	8007008 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80079ea:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80079ec:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80079ee:	4282      	cmp	r2, r0
 80079f0:	d808      	bhi.n	8007a04 <prvTimerTask+0x178>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079f2:	4b38      	ldr	r3, [pc, #224]	@ (8007ad4 <prvTimerTask+0x248>)
	xLastTime = xTimeNow;
 80079f4:	f8c5 b000 	str.w	fp, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	fab2 f282 	clz	r2, r2
 8007a00:	0952      	lsrs	r2, r2, #5
 8007a02:	e763      	b.n	80078cc <prvTimerTask+0x40>
		prvSwitchTimerLists();
 8007a04:	f7ff ff06 	bl	8007814 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007a08:	f8c5 b000 	str.w	fp, [r5]
			( void ) xTaskResumeAll();
 8007a0c:	f7ff fc3c 	bl	8007288 <xTaskResumeAll>
 8007a10:	e76c      	b.n	80078ec <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8007a12:	f7ff feff 	bl	8007814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a16:	e780      	b.n	800791a <prvTimerTask+0x8e>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a18:	455b      	cmp	r3, fp
 8007a1a:	d901      	bls.n	8007a20 <prvTimerTask+0x194>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d0a7      	beq.n	8007970 <prvTimerTask+0xe4>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a20:	6830      	ldr	r0, [r6, #0]
 8007a22:	1d39      	adds	r1, r7, #4
 8007a24:	f7fe fd7a 	bl	800651c <vListInsert>
	return xProcessTimerNow;
 8007a28:	e760      	b.n	80078ec <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
 8007a2a:	f7ff fc2d 	bl	8007288 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a2e:	6832      	ldr	r2, [r6, #0]
 8007a30:	68d2      	ldr	r2, [r2, #12]
 8007a32:	f8d2 a00c 	ldr.w	sl, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a36:	f10a 0104 	add.w	r1, sl, #4
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	9103      	str	r1, [sp, #12]
 8007a3e:	f7fe fd85 	bl	800654c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a42:	f8da 201c 	ldr.w	r2, [sl, #28]
 8007a46:	9903      	ldr	r1, [sp, #12]
 8007a48:	2a01      	cmp	r2, #1
 8007a4a:	d00a      	beq.n	8007a62 <prvTimerTask+0x1d6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8007a52:	4798      	blx	r3
}
 8007a54:	e74a      	b.n	80078ec <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a56:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad4 <prvTimerTask+0x248>)
 8007a58:	1d39      	adds	r1, r7, #4
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	f7fe fd5e 	bl	800651c <vListInsert>
	return xProcessTimerNow;
 8007a60:	e744      	b.n	80078ec <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a62:	f8da 2018 	ldr.w	r2, [sl, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a66:	f8ca a010 	str.w	sl, [sl, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a6a:	eb08 0002 	add.w	r0, r8, r2
	if( xNextExpiryTime <= xTimeNow )
 8007a6e:	4558      	cmp	r0, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a70:	f8ca 0004 	str.w	r0, [sl, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007a74:	d903      	bls.n	8007a7e <prvTimerTask+0x1f2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a76:	6830      	ldr	r0, [r6, #0]
 8007a78:	f7fe fd50 	bl	800651c <vListInsert>
	return xProcessTimerNow;
 8007a7c:	e7e6      	b.n	8007a4c <prvTimerTask+0x1c0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7e:	ebab 0b08 	sub.w	fp, fp, r8
 8007a82:	455a      	cmp	r2, fp
 8007a84:	d81a      	bhi.n	8007abc <prvTimerTask+0x230>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a86:	2300      	movs	r3, #0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	f7ff fe8a 	bl	80077a8 <xTimerGenericCommand>
			configASSERT( xResult );
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d1d9      	bne.n	8007a4c <prvTimerTask+0x1c0>
 8007a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	e7fe      	b.n	8007aa8 <prvTimerTask+0x21c>
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007aba:	e7fe      	b.n	8007aba <prvTimerTask+0x22e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <prvTimerTask+0x248>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	f7fe fd2c 	bl	800651c <vListInsert>
	return xProcessTimerNow;
 8007ac4:	e7c2      	b.n	8007a4c <prvTimerTask+0x1c0>
 8007ac6:	bf00      	nop
 8007ac8:	20001344 	.word	0x20001344
 8007acc:	20001334 	.word	0x20001334
 8007ad0:	2000133c 	.word	0x2000133c
 8007ad4:	20001340 	.word	0x20001340

08007ad8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ad8:	469c      	mov	ip, r3
 8007ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007adc:	4607      	mov	r7, r0
 8007ade:	460e      	mov	r6, r1
 8007ae0:	4615      	mov	r5, r2
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007ae2:	f06f 0401 	mvn.w	r4, #1
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ae6:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <xTimerPendFunctionCallFromISR+0x2c>)
	{
 8007ae8:	b085      	sub	sp, #20
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007aea:	4669      	mov	r1, sp
 8007aec:	4662      	mov	r2, ip
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	2300      	movs	r3, #0
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007af2:	e9cd 7601 	strd	r7, r6, [sp, #4]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007af6:	9503      	str	r5, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007af8:	9400      	str	r4, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007afa:	f7fe ff15 	bl	8006928 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007afe:	b005      	add	sp, #20
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000133c 	.word	0x2000133c

08007b08 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b08:	4806      	ldr	r0, [pc, #24]	@ (8007b24 <prvPortStartFirstTask+0x1c>)
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f380 8808 	msr	MSP, r0
 8007b12:	b662      	cpsie	i
 8007b14:	b661      	cpsie	f
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	df00      	svc	0
 8007b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b22:	0000      	.short	0x0000
 8007b24:	e000ed08 	.word	0xe000ed08

08007b28 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8007b28:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b64 <prvTaskExitError+0x3c>)
{
 8007b2c:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 8007b2e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8007b30:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007b32:	3301      	adds	r3, #1
 8007b34:	d008      	beq.n	8007b48 <prvTaskExitError+0x20>
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	e7fe      	b.n	8007b46 <prvTaskExitError+0x1e>
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0fc      	beq.n	8007b58 <prvTaskExitError+0x30>
}
 8007b5e:	b002      	add	sp, #8
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000000c 	.word	0x2000000c

08007b68 <pxPortInitialiseStack>:
{
 8007b68:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b6a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b6e:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b70:	f021 0101 	bic.w	r1, r1, #1
 8007b74:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b78:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b7c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007b80:	bc10      	pop	{r4}
 8007b82:	3840      	subs	r0, #64	@ 0x40
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	08007b29 	.word	0x08007b29
 8007b8c:	00000000 	.word	0x00000000

08007b90 <SVC_Handler>:
	__asm volatile (
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <pxCurrentTCBConst2>)
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	6808      	ldr	r0, [r1, #0]
 8007b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b9a:	f380 8809 	msr	PSP, r0
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8811 	msr	BASEPRI, r0
 8007baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007bae:	4770      	bx	lr

08007bb0 <pxCurrentTCBConst2>:
 8007bb0:	20001240 	.word	0x20001240

08007bb4 <vPortEnterCritical>:
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8007bf4 <vPortEnterCritical+0x40>)
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007bcc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007bce:	d000      	beq.n	8007bd2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007bd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bd6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f7      	beq.n	8007bd0 <vPortEnterCritical+0x1c>
 8007be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	e7fe      	b.n	8007bf0 <vPortEnterCritical+0x3c>
 8007bf2:	bf00      	nop
 8007bf4:	2000000c 	.word	0x2000000c

08007bf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007bf8:	4a08      	ldr	r2, [pc, #32]	@ (8007c1c <vPortExitCritical+0x24>)
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	b943      	cbnz	r3, 8007c10 <vPortExitCritical+0x18>
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	e7fe      	b.n	8007c0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007c10:	3b01      	subs	r3, #1
 8007c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c14:	b90b      	cbnz	r3, 8007c1a <vPortExitCritical+0x22>
	__asm volatile
 8007c16:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c1a:	4770      	bx	lr
 8007c1c:	2000000c 	.word	0x2000000c

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b0d      	ldr	r3, [pc, #52]	@ (8007c60 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c30:	6010      	str	r0, [r2, #0]
 8007c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c3a:	f380 8811 	msr	BASEPRI, r0
 8007c3e:	f7ff fb63 	bl	8007308 <vTaskSwitchContext>
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c56:	f380 8809 	msr	PSP, r0
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	4770      	bx	lr

08007c60 <pxCurrentTCBConst>:
 8007c60:	20001240 	.word	0x20001240

08007c64 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c64:	b508      	push	{r3, lr}
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c76:	f7ff f9cd 	bl	8007014 <xTaskIncrementTick>
 8007c7a:	b128      	cbz	r0, 8007c88 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c8e:	bd08      	pop	{r3, pc}

08007c90 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007c94:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c96:	2007      	movs	r0, #7
{
 8007c98:	b410      	push	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9a:	4c06      	ldr	r4, [pc, #24]	@ (8007cb4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c9c:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c9e:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	4905      	ldr	r1, [pc, #20]	@ (8007cb8 <vPortSetupTimerInterrupt+0x28>)
}
 8007ca4:	bc10      	pop	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8007caa:	099b      	lsrs	r3, r3, #6
 8007cac:	3b01      	subs	r3, #1
 8007cae:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cb0:	6110      	str	r0, [r2, #16]
}
 8007cb2:	4770      	bx	lr
 8007cb4:	20000000 	.word	0x20000000
 8007cb8:	10624dd3 	.word	0x10624dd3

08007cbc <xPortStartScheduler>:
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
{
 8007cc0:	b530      	push	{r4, r5, lr}
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cc2:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cc4:	4b29      	ldr	r3, [pc, #164]	@ (8007d6c <xPortStartScheduler+0xb0>)
{
 8007cc6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cc8:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cca:	4929      	ldr	r1, [pc, #164]	@ (8007d70 <xPortStartScheduler+0xb4>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cd0:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd4:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cd6:	4827      	ldr	r0, [pc, #156]	@ (8007d74 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cde:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce2:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cea:	0612      	lsls	r2, r2, #24
 8007cec:	bf48      	it	mi
 8007cee:	2206      	movmi	r2, #6
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cf0:	6004      	str	r4, [r0, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cf2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cf4:	d50e      	bpl.n	8007d14 <xPortStartScheduler+0x58>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	d4f3      	bmi.n	8007cf6 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d0e:	2903      	cmp	r1, #3
 8007d10:	d009      	beq.n	8007d26 <xPortStartScheduler+0x6a>
 8007d12:	6001      	str	r1, [r0, #0]
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	e7fe      	b.n	8007d24 <xPortStartScheduler+0x68>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d26:	f44f 7540 	mov.w	r5, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8007d2e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d30:	9a01      	ldr	r2, [sp, #4]
 8007d32:	490e      	ldr	r1, [pc, #56]	@ (8007d6c <xPortStartScheduler+0xb0>)
 8007d34:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d36:	6005      	str	r5, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d38:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d3a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8007d3e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8007d42:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d46:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8007d4a:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8007d4e:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007d52:	f7ff ff9d 	bl	8007c90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007d56:	4b08      	ldr	r3, [pc, #32]	@ (8007d78 <xPortStartScheduler+0xbc>)
 8007d58:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007d5a:	f7ff fed5 	bl	8007b08 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007d5e:	f7ff fad3 	bl	8007308 <vTaskSwitchContext>
}
 8007d62:	4620      	mov	r0, r4
	prvTaskExitError();
 8007d64:	f7ff fee0 	bl	8007b28 <prvTaskExitError>
}
 8007d68:	b003      	add	sp, #12
 8007d6a:	bd30      	pop	{r4, r5, pc}
 8007d6c:	e000e400 	.word	0xe000e400
 8007d70:	20001374 	.word	0x20001374
 8007d74:	20001370 	.word	0x20001370
 8007d78:	2000000c 	.word	0x2000000c

08007d7c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d7c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d80:	2b0f      	cmp	r3, #15
 8007d82:	d90e      	bls.n	8007da2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d84:	4911      	ldr	r1, [pc, #68]	@ (8007dcc <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d86:	4a12      	ldr	r2, [pc, #72]	@ (8007dd0 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d88:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d908      	bls.n	8007da2 <vPortValidateInterruptPriority+0x26>
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	e7fe      	b.n	8007da0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007da2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007da6:	4a0b      	ldr	r2, [pc, #44]	@ (8007dd4 <vPortValidateInterruptPriority+0x58>)
 8007da8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d908      	bls.n	8007dc8 <vPortValidateInterruptPriority+0x4c>
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	e7fe      	b.n	8007dc6 <vPortValidateInterruptPriority+0x4a>
	}
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e3f0 	.word	0xe000e3f0
 8007dd0:	20001374 	.word	0x20001374
 8007dd4:	20001370 	.word	0x20001370

08007dd8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dd8:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dda:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <prvInsertBlockIntoFreeList+0x4c>)
 8007ddc:	461a      	mov	r2, r3
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4283      	cmp	r3, r0
 8007de2:	d3fb      	bcc.n	8007ddc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007de4:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007de6:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007de8:	eb02 0c04 	add.w	ip, r2, r4
 8007dec:	4560      	cmp	r0, ip
 8007dee:	d008      	beq.n	8007e02 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007df0:	1844      	adds	r4, r0, r1
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	d00b      	beq.n	8007e0e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007df6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007df8:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dfa:	bf18      	it	ne
 8007dfc:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dfe:	bc30      	pop	{r4, r5}
 8007e00:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e02:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e04:	1850      	adds	r0, r2, r1
 8007e06:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e08:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e0a:	d1f8      	bne.n	8007dfe <prvInsertBlockIntoFreeList+0x26>
 8007e0c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e0e:	4c06      	ldr	r4, [pc, #24]	@ (8007e28 <prvInsertBlockIntoFreeList+0x50>)
 8007e10:	6824      	ldr	r4, [r4, #0]
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	d003      	beq.n	8007e1e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e16:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e1a:	4429      	add	r1, r5
 8007e1c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e1e:	6004      	str	r4, [r0, #0]
 8007e20:	e7ea      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x20>
 8007e22:	bf00      	nop
 8007e24:	20001388 	.word	0x20001388
 8007e28:	20001384 	.word	0x20001384

08007e2c <pvPortMalloc>:
{
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007e30:	4d3f      	ldr	r5, [pc, #252]	@ (8007f30 <pvPortMalloc+0x104>)
{
 8007e32:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007e34:	f7ff f8e0 	bl	8006ff8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d059      	beq.n	8007ef2 <pvPortMalloc+0xc6>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f34 <pvPortMalloc+0x108>)
 8007e40:	681e      	ldr	r6, [r3, #0]
 8007e42:	4234      	tst	r4, r6
 8007e44:	d130      	bne.n	8007ea8 <pvPortMalloc+0x7c>
			if( xWantedSize > 0 )
 8007e46:	b37c      	cbz	r4, 8007ea8 <pvPortMalloc+0x7c>
				xWantedSize += xHeapStructSize;
 8007e48:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e4c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e4e:	bf1c      	itt	ne
 8007e50:	f021 0107 	bicne.w	r1, r1, #7
 8007e54:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e56:	b339      	cbz	r1, 8007ea8 <pvPortMalloc+0x7c>
 8007e58:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8007f38 <pvPortMalloc+0x10c>
 8007e5c:	f8d8 7000 	ldr.w	r7, [r8]
 8007e60:	428f      	cmp	r7, r1
 8007e62:	d321      	bcc.n	8007ea8 <pvPortMalloc+0x7c>
				pxBlock = xStart.pxNextFreeBlock;
 8007e64:	4b35      	ldr	r3, [pc, #212]	@ (8007f3c <pvPortMalloc+0x110>)
				pxPreviousBlock = &xStart;
 8007e66:	4618      	mov	r0, r3
				pxBlock = xStart.pxNextFreeBlock;
 8007e68:	681c      	ldr	r4, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e6a:	e003      	b.n	8007e74 <pvPortMalloc+0x48>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	b123      	cbz	r3, 8007e7a <pvPortMalloc+0x4e>
 8007e70:	4620      	mov	r0, r4
 8007e72:	461c      	mov	r4, r3
 8007e74:	6862      	ldr	r2, [r4, #4]
 8007e76:	428a      	cmp	r2, r1
 8007e78:	d3f8      	bcc.n	8007e6c <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d013      	beq.n	8007ea8 <pvPortMalloc+0x7c>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e80:	f8d4 c000 	ldr.w	ip, [r4]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e84:	1a53      	subs	r3, r2, r1
 8007e86:	2b10      	cmp	r3, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e88:	6805      	ldr	r5, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e8a:	f8c0 c000 	str.w	ip, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e8e:	d916      	bls.n	8007ebe <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e90:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e92:	0742      	lsls	r2, r0, #29
 8007e94:	d00e      	beq.n	8007eb4 <pvPortMalloc+0x88>
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	e7fe      	b.n	8007ea6 <pvPortMalloc+0x7a>
	( void ) xTaskResumeAll();
 8007ea8:	f7ff f9ee 	bl	8007288 <xTaskResumeAll>
void *pvReturn = NULL;
 8007eac:	2500      	movs	r5, #0
}
 8007eae:	4628      	mov	r0, r5
 8007eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eb6:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb8:	f7ff ff8e 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ebc:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ebe:	4b20      	ldr	r3, [pc, #128]	@ (8007f40 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ec0:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec2:	6819      	ldr	r1, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ec4:	4332      	orrs	r2, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	428f      	cmp	r7, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ec8:	bf38      	it	cc
 8007eca:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007ecc:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ece:	3508      	adds	r5, #8
					pxBlock->pxNextFreeBlock = NULL;
 8007ed0:	e9c4 3200 	strd	r3, r2, [r4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ed4:	f8c8 7000 	str.w	r7, [r8]
	( void ) xTaskResumeAll();
 8007ed8:	f7ff f9d6 	bl	8007288 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007edc:	076b      	lsls	r3, r5, #29
 8007ede:	d0e6      	beq.n	8007eae <pvPortMalloc+0x82>
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	e7fe      	b.n	8007ef0 <pvPortMalloc+0xc4>
	uxAddress = ( size_t ) ucHeap;
 8007ef2:	4b14      	ldr	r3, [pc, #80]	@ (8007f44 <pvPortMalloc+0x118>)
	xStart.xBlockSize = ( size_t ) 0;
 8007ef4:	2100      	movs	r1, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ef6:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ef8:	bf1c      	itt	ne
 8007efa:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007efc:	f023 0307 	bicne.w	r3, r3, #7
 8007f00:	4618      	mov	r0, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f02:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	4a0d      	ldr	r2, [pc, #52]	@ (8007f3c <pvPortMalloc+0x110>)
}
 8007f08:	463e      	mov	r6, r7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f0c:	6051      	str	r1, [r2, #4]
	uxAddress -= xHeapStructSize;
 8007f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8007f48 <pvPortMalloc+0x11c>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f10:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f14:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 8007f16:	e9c2 1100 	strd	r1, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 8007f1a:	602a      	str	r2, [r5, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f1c:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f20:	4a07      	ldr	r2, [pc, #28]	@ (8007f40 <pvPortMalloc+0x114>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	4a04      	ldr	r2, [pc, #16]	@ (8007f38 <pvPortMalloc+0x10c>)
 8007f26:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f28:	4b02      	ldr	r3, [pc, #8]	@ (8007f34 <pvPortMalloc+0x108>)
 8007f2a:	601f      	str	r7, [r3, #0]
}
 8007f2c:	e789      	b.n	8007e42 <pvPortMalloc+0x16>
 8007f2e:	bf00      	nop
 8007f30:	20001384 	.word	0x20001384
 8007f34:	20001378 	.word	0x20001378
 8007f38:	20001380 	.word	0x20001380
 8007f3c:	20001388 	.word	0x20001388
 8007f40:	2000137c 	.word	0x2000137c
 8007f44:	20001390 	.word	0x20001390
 8007f48:	20003b88 	.word	0x20003b88

08007f4c <vPortFree>:
	if( pv != NULL )
 8007f4c:	b1d0      	cbz	r0, 8007f84 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb8 <vPortFree+0x6c>)
 8007f50:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	4213      	tst	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f5a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007f5e:	b191      	cbz	r1, 8007f86 <vPortFree+0x3a>
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	e7fe      	b.n	8007f70 <vPortFree+0x24>
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f82:	e7fe      	b.n	8007f82 <vPortFree+0x36>
 8007f84:	4770      	bx	lr
{
 8007f86:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f88:	ea23 0302 	bic.w	r3, r3, r2
{
 8007f8c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f8e:	f840 3c04 	str.w	r3, [r0, #-4]
 8007f92:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8007f94:	f7ff f830 	bl	8006ff8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f98:	4a08      	ldr	r2, [pc, #32]	@ (8007fbc <vPortFree+0x70>)
 8007f9a:	9801      	ldr	r0, [sp, #4]
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fa2:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fa4:	440b      	add	r3, r1
 8007fa6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fa8:	f7ff ff16 	bl	8007dd8 <prvInsertBlockIntoFreeList>
}
 8007fac:	b003      	add	sp, #12
 8007fae:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8007fb2:	f7ff b969 	b.w	8007288 <xTaskResumeAll>
 8007fb6:	bf00      	nop
 8007fb8:	20001378 	.word	0x20001378
 8007fbc:	20001380 	.word	0x20001380

08007fc0 <malloc>:
 8007fc0:	4b02      	ldr	r3, [pc, #8]	@ (8007fcc <malloc+0xc>)
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f000 b82d 	b.w	8008024 <_malloc_r>
 8007fca:	bf00      	nop
 8007fcc:	20000188 	.word	0x20000188

08007fd0 <free>:
 8007fd0:	4b02      	ldr	r3, [pc, #8]	@ (8007fdc <free+0xc>)
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	f001 be93 	b.w	8009d00 <_free_r>
 8007fda:	bf00      	nop
 8007fdc:	20000188 	.word	0x20000188

08007fe0 <sbrk_aligned>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8008020 <sbrk_aligned+0x40>)
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	6831      	ldr	r1, [r6, #0]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	b911      	cbnz	r1, 8007ff2 <sbrk_aligned+0x12>
 8007fec:	f000 ff66 	bl	8008ebc <_sbrk_r>
 8007ff0:	6030      	str	r0, [r6, #0]
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 ff61 	bl	8008ebc <_sbrk_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d103      	bne.n	8008006 <sbrk_aligned+0x26>
 8007ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8008002:	4620      	mov	r0, r4
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	1cc4      	adds	r4, r0, #3
 8008008:	f024 0403 	bic.w	r4, r4, #3
 800800c:	42a0      	cmp	r0, r4
 800800e:	d0f8      	beq.n	8008002 <sbrk_aligned+0x22>
 8008010:	1a21      	subs	r1, r4, r0
 8008012:	4628      	mov	r0, r5
 8008014:	f000 ff52 	bl	8008ebc <_sbrk_r>
 8008018:	3001      	adds	r0, #1
 800801a:	d1f2      	bne.n	8008002 <sbrk_aligned+0x22>
 800801c:	e7ef      	b.n	8007ffe <sbrk_aligned+0x1e>
 800801e:	bf00      	nop
 8008020:	20003b90 	.word	0x20003b90

08008024 <_malloc_r>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	1ccd      	adds	r5, r1, #3
 800802a:	f025 0503 	bic.w	r5, r5, #3
 800802e:	3508      	adds	r5, #8
 8008030:	2d0c      	cmp	r5, #12
 8008032:	bf38      	it	cc
 8008034:	250c      	movcc	r5, #12
 8008036:	2d00      	cmp	r5, #0
 8008038:	4606      	mov	r6, r0
 800803a:	db01      	blt.n	8008040 <_malloc_r+0x1c>
 800803c:	42a9      	cmp	r1, r5
 800803e:	d904      	bls.n	800804a <_malloc_r+0x26>
 8008040:	230c      	movs	r3, #12
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008120 <_malloc_r+0xfc>
 800804e:	f000 f869 	bl	8008124 <__malloc_lock>
 8008052:	f8d8 3000 	ldr.w	r3, [r8]
 8008056:	461c      	mov	r4, r3
 8008058:	bb44      	cbnz	r4, 80080ac <_malloc_r+0x88>
 800805a:	4629      	mov	r1, r5
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff ffbf 	bl	8007fe0 <sbrk_aligned>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	4604      	mov	r4, r0
 8008066:	d158      	bne.n	800811a <_malloc_r+0xf6>
 8008068:	f8d8 4000 	ldr.w	r4, [r8]
 800806c:	4627      	mov	r7, r4
 800806e:	2f00      	cmp	r7, #0
 8008070:	d143      	bne.n	80080fa <_malloc_r+0xd6>
 8008072:	2c00      	cmp	r4, #0
 8008074:	d04b      	beq.n	800810e <_malloc_r+0xea>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	4639      	mov	r1, r7
 800807a:	4630      	mov	r0, r6
 800807c:	eb04 0903 	add.w	r9, r4, r3
 8008080:	f000 ff1c 	bl	8008ebc <_sbrk_r>
 8008084:	4581      	cmp	r9, r0
 8008086:	d142      	bne.n	800810e <_malloc_r+0xea>
 8008088:	6821      	ldr	r1, [r4, #0]
 800808a:	4630      	mov	r0, r6
 800808c:	1a6d      	subs	r5, r5, r1
 800808e:	4629      	mov	r1, r5
 8008090:	f7ff ffa6 	bl	8007fe0 <sbrk_aligned>
 8008094:	3001      	adds	r0, #1
 8008096:	d03a      	beq.n	800810e <_malloc_r+0xea>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	442b      	add	r3, r5
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	f8d8 3000 	ldr.w	r3, [r8]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	bb62      	cbnz	r2, 8008100 <_malloc_r+0xdc>
 80080a6:	f8c8 7000 	str.w	r7, [r8]
 80080aa:	e00f      	b.n	80080cc <_malloc_r+0xa8>
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	1b52      	subs	r2, r2, r5
 80080b0:	d420      	bmi.n	80080f4 <_malloc_r+0xd0>
 80080b2:	2a0b      	cmp	r2, #11
 80080b4:	d917      	bls.n	80080e6 <_malloc_r+0xc2>
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	6025      	str	r5, [r4, #0]
 80080bc:	bf18      	it	ne
 80080be:	6059      	strne	r1, [r3, #4]
 80080c0:	6863      	ldr	r3, [r4, #4]
 80080c2:	bf08      	it	eq
 80080c4:	f8c8 1000 	streq.w	r1, [r8]
 80080c8:	5162      	str	r2, [r4, r5]
 80080ca:	604b      	str	r3, [r1, #4]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f82f 	bl	8008130 <__malloc_unlock>
 80080d2:	f104 000b 	add.w	r0, r4, #11
 80080d6:	1d23      	adds	r3, r4, #4
 80080d8:	f020 0007 	bic.w	r0, r0, #7
 80080dc:	1ac2      	subs	r2, r0, r3
 80080de:	bf1c      	itt	ne
 80080e0:	1a1b      	subne	r3, r3, r0
 80080e2:	50a3      	strne	r3, [r4, r2]
 80080e4:	e7af      	b.n	8008046 <_malloc_r+0x22>
 80080e6:	6862      	ldr	r2, [r4, #4]
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	bf0c      	ite	eq
 80080ec:	f8c8 2000 	streq.w	r2, [r8]
 80080f0:	605a      	strne	r2, [r3, #4]
 80080f2:	e7eb      	b.n	80080cc <_malloc_r+0xa8>
 80080f4:	4623      	mov	r3, r4
 80080f6:	6864      	ldr	r4, [r4, #4]
 80080f8:	e7ae      	b.n	8008058 <_malloc_r+0x34>
 80080fa:	463c      	mov	r4, r7
 80080fc:	687f      	ldr	r7, [r7, #4]
 80080fe:	e7b6      	b.n	800806e <_malloc_r+0x4a>
 8008100:	461a      	mov	r2, r3
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	42a3      	cmp	r3, r4
 8008106:	d1fb      	bne.n	8008100 <_malloc_r+0xdc>
 8008108:	2300      	movs	r3, #0
 800810a:	6053      	str	r3, [r2, #4]
 800810c:	e7de      	b.n	80080cc <_malloc_r+0xa8>
 800810e:	230c      	movs	r3, #12
 8008110:	4630      	mov	r0, r6
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	f000 f80c 	bl	8008130 <__malloc_unlock>
 8008118:	e794      	b.n	8008044 <_malloc_r+0x20>
 800811a:	6005      	str	r5, [r0, #0]
 800811c:	e7d6      	b.n	80080cc <_malloc_r+0xa8>
 800811e:	bf00      	nop
 8008120:	20003b94 	.word	0x20003b94

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__malloc_lock+0x8>)
 8008126:	f000 bf16 	b.w	8008f56 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	20003cd8 	.word	0x20003cd8

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	@ (8008138 <__malloc_unlock+0x8>)
 8008132:	f000 bf11 	b.w	8008f58 <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	20003cd8 	.word	0x20003cd8

0800813c <__cvt>:
 800813c:	2b00      	cmp	r3, #0
 800813e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008142:	461d      	mov	r5, r3
 8008144:	bfbb      	ittet	lt
 8008146:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800814a:	461d      	movlt	r5, r3
 800814c:	2300      	movge	r3, #0
 800814e:	232d      	movlt	r3, #45	@ 0x2d
 8008150:	b089      	sub	sp, #36	@ 0x24
 8008152:	4614      	mov	r4, r2
 8008154:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	@ 0x54
 8008158:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	@ 0x48
 800815c:	bfb8      	it	lt
 800815e:	4614      	movlt	r4, r2
 8008160:	f028 0a20 	bic.w	sl, r8, #32
 8008164:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008166:	f1ba 0f46 	cmp.w	sl, #70	@ 0x46
 800816a:	7013      	strb	r3, [r2, #0]
 800816c:	d005      	beq.n	800817a <__cvt+0x3e>
 800816e:	f1ba 0f45 	cmp.w	sl, #69	@ 0x45
 8008172:	d100      	bne.n	8008176 <__cvt+0x3a>
 8008174:	3601      	adds	r6, #1
 8008176:	2302      	movs	r3, #2
 8008178:	e000      	b.n	800817c <__cvt+0x40>
 800817a:	2303      	movs	r3, #3
 800817c:	aa07      	add	r2, sp, #28
 800817e:	9204      	str	r2, [sp, #16]
 8008180:	aa06      	add	r2, sp, #24
 8008182:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8008186:	e9cd 3600 	strd	r3, r6, [sp]
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	f000 ff8b 	bl	80090a8 <_dtoa_r>
 8008192:	f1b8 0f67 	cmp.w	r8, #103	@ 0x67
 8008196:	4607      	mov	r7, r0
 8008198:	d119      	bne.n	80081ce <__cvt+0x92>
 800819a:	f01b 0f01 	tst.w	fp, #1
 800819e:	d00e      	beq.n	80081be <__cvt+0x82>
 80081a0:	eb07 0806 	add.w	r8, r7, r6
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 fc4c 	bl	8000a48 <__aeabi_dcmpeq>
 80081b0:	b108      	cbz	r0, 80081b6 <__cvt+0x7a>
 80081b2:	f8cd 801c 	str.w	r8, [sp, #28]
 80081b6:	2230      	movs	r2, #48	@ 0x30
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	4543      	cmp	r3, r8
 80081bc:	d321      	bcc.n	8008202 <__cvt+0xc6>
 80081be:	4638      	mov	r0, r7
 80081c0:	9b07      	ldr	r3, [sp, #28]
 80081c2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081c4:	1bdb      	subs	r3, r3, r7
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	b009      	add	sp, #36	@ 0x24
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081d2:	d0e2      	beq.n	800819a <__cvt+0x5e>
 80081d4:	f1ba 0f46 	cmp.w	sl, #70	@ 0x46
 80081d8:	eb00 0806 	add.w	r8, r0, r6
 80081dc:	d1e2      	bne.n	80081a4 <__cvt+0x68>
 80081de:	7803      	ldrb	r3, [r0, #0]
 80081e0:	2b30      	cmp	r3, #48	@ 0x30
 80081e2:	d10a      	bne.n	80081fa <__cvt+0xbe>
 80081e4:	2200      	movs	r2, #0
 80081e6:	2300      	movs	r3, #0
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f8 fc2c 	bl	8000a48 <__aeabi_dcmpeq>
 80081f0:	b918      	cbnz	r0, 80081fa <__cvt+0xbe>
 80081f2:	f1c6 0601 	rsb	r6, r6, #1
 80081f6:	f8c9 6000 	str.w	r6, [r9]
 80081fa:	f8d9 3000 	ldr.w	r3, [r9]
 80081fe:	4498      	add	r8, r3
 8008200:	e7d0      	b.n	80081a4 <__cvt+0x68>
 8008202:	1c59      	adds	r1, r3, #1
 8008204:	9107      	str	r1, [sp, #28]
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	e7d6      	b.n	80081b8 <__cvt+0x7c>

0800820a <__exponent>:
 800820a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800820c:	2900      	cmp	r1, #0
 800820e:	bfb6      	itet	lt
 8008210:	232d      	movlt	r3, #45	@ 0x2d
 8008212:	232b      	movge	r3, #43	@ 0x2b
 8008214:	4249      	neglt	r1, r1
 8008216:	2909      	cmp	r1, #9
 8008218:	7002      	strb	r2, [r0, #0]
 800821a:	7043      	strb	r3, [r0, #1]
 800821c:	dd29      	ble.n	8008272 <__exponent+0x68>
 800821e:	f10d 0307 	add.w	r3, sp, #7
 8008222:	461d      	mov	r5, r3
 8008224:	270a      	movs	r7, #10
 8008226:	fbb1 f6f7 	udiv	r6, r1, r7
 800822a:	461a      	mov	r2, r3
 800822c:	fb07 1416 	mls	r4, r7, r6, r1
 8008230:	3430      	adds	r4, #48	@ 0x30
 8008232:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008236:	460c      	mov	r4, r1
 8008238:	2c63      	cmp	r4, #99	@ 0x63
 800823a:	4631      	mov	r1, r6
 800823c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008240:	dcf1      	bgt.n	8008226 <__exponent+0x1c>
 8008242:	3130      	adds	r1, #48	@ 0x30
 8008244:	1e94      	subs	r4, r2, #2
 8008246:	f803 1c01 	strb.w	r1, [r3, #-1]
 800824a:	4623      	mov	r3, r4
 800824c:	1c41      	adds	r1, r0, #1
 800824e:	42ab      	cmp	r3, r5
 8008250:	d30a      	bcc.n	8008268 <__exponent+0x5e>
 8008252:	f10d 0309 	add.w	r3, sp, #9
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ac      	cmp	r4, r5
 800825a:	bf88      	it	hi
 800825c:	2300      	movhi	r3, #0
 800825e:	3302      	adds	r3, #2
 8008260:	4403      	add	r3, r0
 8008262:	1a18      	subs	r0, r3, r0
 8008264:	b003      	add	sp, #12
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008268:	f813 6b01 	ldrb.w	r6, [r3], #1
 800826c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008270:	e7ed      	b.n	800824e <__exponent+0x44>
 8008272:	2330      	movs	r3, #48	@ 0x30
 8008274:	3130      	adds	r1, #48	@ 0x30
 8008276:	7083      	strb	r3, [r0, #2]
 8008278:	70c1      	strb	r1, [r0, #3]
 800827a:	1d03      	adds	r3, r0, #4
 800827c:	e7f1      	b.n	8008262 <__exponent+0x58>
	...

08008280 <_printf_float>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b091      	sub	sp, #68	@ 0x44
 8008286:	460c      	mov	r4, r1
 8008288:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800828c:	4616      	mov	r6, r2
 800828e:	461f      	mov	r7, r3
 8008290:	4605      	mov	r5, r0
 8008292:	f000 fddb 	bl	8008e4c <_localeconv_r>
 8008296:	6803      	ldr	r3, [r0, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	9308      	str	r3, [sp, #32]
 800829c:	f7f7 ffa8 	bl	80001f0 <strlen>
 80082a0:	2300      	movs	r3, #0
 80082a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80082a4:	f8d8 3000 	ldr.w	r3, [r8]
 80082a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80082aa:	3307      	adds	r3, #7
 80082ac:	f023 0307 	bic.w	r3, r3, #7
 80082b0:	f103 0208 	add.w	r2, r3, #8
 80082b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082b8:	f8d4 b000 	ldr.w	fp, [r4]
 80082bc:	f8c8 2000 	str.w	r2, [r8]
 80082c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082da:	4ba1      	ldr	r3, [pc, #644]	@ (8008560 <_printf_float+0x2e0>)
 80082dc:	f7f8 fbe6 	bl	8000aac <__aeabi_dcmpun>
 80082e0:	bb70      	cbnz	r0, 8008340 <_printf_float+0xc0>
 80082e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	4b9d      	ldr	r3, [pc, #628]	@ (8008560 <_printf_float+0x2e0>)
 80082ec:	f7f8 fbc0 	bl	8000a70 <__aeabi_dcmple>
 80082f0:	bb30      	cbnz	r0, 8008340 <_printf_float+0xc0>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f8 fbaf 	bl	8000a5c <__aeabi_dcmplt>
 80082fe:	b110      	cbz	r0, 8008306 <_printf_float+0x86>
 8008300:	232d      	movs	r3, #45	@ 0x2d
 8008302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008306:	4a97      	ldr	r2, [pc, #604]	@ (8008564 <_printf_float+0x2e4>)
 8008308:	4b97      	ldr	r3, [pc, #604]	@ (8008568 <_printf_float+0x2e8>)
 800830a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800830e:	bf94      	ite	ls
 8008310:	4690      	movls	r8, r2
 8008312:	4698      	movhi	r8, r3
 8008314:	2303      	movs	r3, #3
 8008316:	f04f 0900 	mov.w	r9, #0
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	f02b 0304 	bic.w	r3, fp, #4
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	4633      	mov	r3, r6
 8008324:	4621      	mov	r1, r4
 8008326:	4628      	mov	r0, r5
 8008328:	9700      	str	r7, [sp, #0]
 800832a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800832c:	f000 f9de 	bl	80086ec <_printf_common>
 8008330:	3001      	adds	r0, #1
 8008332:	f040 809a 	bne.w	800846a <_printf_float+0x1ea>
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	b011      	add	sp, #68	@ 0x44
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f8 fbb0 	bl	8000aac <__aeabi_dcmpun>
 800834c:	b148      	cbz	r0, 8008362 <_printf_float+0xe2>
 800834e:	464b      	mov	r3, r9
 8008350:	2b00      	cmp	r3, #0
 8008352:	bfb8      	it	lt
 8008354:	232d      	movlt	r3, #45	@ 0x2d
 8008356:	4a85      	ldr	r2, [pc, #532]	@ (800856c <_printf_float+0x2ec>)
 8008358:	bfb8      	it	lt
 800835a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800835e:	4b84      	ldr	r3, [pc, #528]	@ (8008570 <_printf_float+0x2f0>)
 8008360:	e7d3      	b.n	800830a <_printf_float+0x8a>
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	d129      	bne.n	80083bc <_printf_float+0x13c>
 8008368:	2306      	movs	r3, #6
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	9206      	str	r2, [sp, #24]
 8008376:	aa0e      	add	r2, sp, #56	@ 0x38
 8008378:	e9cd a204 	strd	sl, r2, [sp, #16]
 800837c:	aa0d      	add	r2, sp, #52	@ 0x34
 800837e:	9203      	str	r2, [sp, #12]
 8008380:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008384:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	4642      	mov	r2, r8
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	4628      	mov	r0, r5
 8008390:	464b      	mov	r3, r9
 8008392:	f7ff fed3 	bl	800813c <__cvt>
 8008396:	f1ba 0f67 	cmp.w	sl, #103	@ 0x67
 800839a:	4680      	mov	r8, r0
 800839c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800839e:	d115      	bne.n	80083cc <_printf_float+0x14c>
 80083a0:	1ccb      	adds	r3, r1, #3
 80083a2:	db3b      	blt.n	800841c <_printf_float+0x19c>
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	4299      	cmp	r1, r3
 80083a8:	dc38      	bgt.n	800841c <_printf_float+0x19c>
 80083aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ac:	4299      	cmp	r1, r3
 80083ae:	db55      	blt.n	800845c <_printf_float+0x1dc>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	6121      	str	r1, [r4, #16]
 80083b4:	07d8      	lsls	r0, r3, #31
 80083b6:	d545      	bpl.n	8008444 <_printf_float+0x1c4>
 80083b8:	1c4b      	adds	r3, r1, #1
 80083ba:	e042      	b.n	8008442 <_printf_float+0x1c2>
 80083bc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083c0:	2a47      	cmp	r2, #71	@ 0x47
 80083c2:	d1d3      	bne.n	800836c <_printf_float+0xec>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1d1      	bne.n	800836c <_printf_float+0xec>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e7ce      	b.n	800836a <_printf_float+0xea>
 80083cc:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083d0:	d107      	bne.n	80083e2 <_printf_float+0x162>
 80083d2:	1cc8      	adds	r0, r1, #3
 80083d4:	db25      	blt.n	8008422 <_printf_float+0x1a2>
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	428b      	cmp	r3, r1
 80083da:	db22      	blt.n	8008422 <_printf_float+0x1a2>
 80083dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083e0:	e7e3      	b.n	80083aa <_printf_float+0x12a>
 80083e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083e6:	d81f      	bhi.n	8008428 <_printf_float+0x1a8>
 80083e8:	4652      	mov	r2, sl
 80083ea:	3901      	subs	r1, #1
 80083ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80083f2:	f7ff ff0a 	bl	800820a <__exponent>
 80083f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083f8:	4681      	mov	r9, r0
 80083fa:	1813      	adds	r3, r2, r0
 80083fc:	2a01      	cmp	r2, #1
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	dc02      	bgt.n	8008408 <_printf_float+0x188>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	07d2      	lsls	r2, r2, #31
 8008406:	d501      	bpl.n	800840c <_printf_float+0x18c>
 8008408:	3301      	adds	r3, #1
 800840a:	6123      	str	r3, [r4, #16]
 800840c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008410:	2b00      	cmp	r3, #0
 8008412:	d086      	beq.n	8008322 <_printf_float+0xa2>
 8008414:	232d      	movs	r3, #45	@ 0x2d
 8008416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800841a:	e782      	b.n	8008322 <_printf_float+0xa2>
 800841c:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8008420:	e7e2      	b.n	80083e8 <_printf_float+0x168>
 8008422:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8008426:	e7df      	b.n	80083e8 <_printf_float+0x168>
 8008428:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800842c:	d1bd      	bne.n	80083aa <_printf_float+0x12a>
 800842e:	2900      	cmp	r1, #0
 8008430:	6863      	ldr	r3, [r4, #4]
 8008432:	dd0b      	ble.n	800844c <_printf_float+0x1cc>
 8008434:	6121      	str	r1, [r4, #16]
 8008436:	b913      	cbnz	r3, 800843e <_printf_float+0x1be>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	07d0      	lsls	r0, r2, #31
 800843c:	d502      	bpl.n	8008444 <_printf_float+0x1c4>
 800843e:	3301      	adds	r3, #1
 8008440:	440b      	add	r3, r1
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	f04f 0900 	mov.w	r9, #0
 8008448:	65a1      	str	r1, [r4, #88]	@ 0x58
 800844a:	e7df      	b.n	800840c <_printf_float+0x18c>
 800844c:	b913      	cbnz	r3, 8008454 <_printf_float+0x1d4>
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	07d2      	lsls	r2, r2, #31
 8008452:	d501      	bpl.n	8008458 <_printf_float+0x1d8>
 8008454:	3302      	adds	r3, #2
 8008456:	e7f4      	b.n	8008442 <_printf_float+0x1c2>
 8008458:	2301      	movs	r3, #1
 800845a:	e7f2      	b.n	8008442 <_printf_float+0x1c2>
 800845c:	2900      	cmp	r1, #0
 800845e:	bfcc      	ite	gt
 8008460:	2201      	movgt	r2, #1
 8008462:	f1c1 0202 	rsble	r2, r1, #2
 8008466:	4413      	add	r3, r2
 8008468:	e7eb      	b.n	8008442 <_printf_float+0x1c2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	055a      	lsls	r2, r3, #21
 800846e:	d407      	bmi.n	8008480 <_printf_float+0x200>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	4642      	mov	r2, r8
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	d12b      	bne.n	80084d6 <_printf_float+0x256>
 800847e:	e75a      	b.n	8008336 <_printf_float+0xb6>
 8008480:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008484:	f240 80dc 	bls.w	8008640 <_printf_float+0x3c0>
 8008488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	f7f8 fada 	bl	8000a48 <__aeabi_dcmpeq>
 8008494:	2800      	cmp	r0, #0
 8008496:	d033      	beq.n	8008500 <_printf_float+0x280>
 8008498:	2301      	movs	r3, #1
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	4a35      	ldr	r2, [pc, #212]	@ (8008574 <_printf_float+0x2f4>)
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f af47 	beq.w	8008336 <_printf_float+0xb6>
 80084a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80084ac:	4543      	cmp	r3, r8
 80084ae:	db02      	blt.n	80084b6 <_printf_float+0x236>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	07d8      	lsls	r0, r3, #31
 80084b4:	d50f      	bpl.n	80084d6 <_printf_float+0x256>
 80084b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	f43f af38 	beq.w	8008336 <_printf_float+0xb6>
 80084c6:	f04f 0900 	mov.w	r9, #0
 80084ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ce:	f104 0a1a 	add.w	sl, r4, #26
 80084d2:	45c8      	cmp	r8, r9
 80084d4:	dc09      	bgt.n	80084ea <_printf_float+0x26a>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	079b      	lsls	r3, r3, #30
 80084da:	f100 8102 	bmi.w	80086e2 <_printf_float+0x462>
 80084de:	68e0      	ldr	r0, [r4, #12]
 80084e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfb8      	it	lt
 80084e6:	4618      	movlt	r0, r3
 80084e8:	e727      	b.n	800833a <_printf_float+0xba>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4652      	mov	r2, sl
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	f43f af1e 	beq.w	8008336 <_printf_float+0xb6>
 80084fa:	f109 0901 	add.w	r9, r9, #1
 80084fe:	e7e8      	b.n	80084d2 <_printf_float+0x252>
 8008500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008502:	2b00      	cmp	r3, #0
 8008504:	dc38      	bgt.n	8008578 <_printf_float+0x2f8>
 8008506:	2301      	movs	r3, #1
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	4a19      	ldr	r2, [pc, #100]	@ (8008574 <_printf_float+0x2f4>)
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f af10 	beq.w	8008336 <_printf_float+0xb6>
 8008516:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800851a:	ea59 0303 	orrs.w	r3, r9, r3
 800851e:	d102      	bne.n	8008526 <_printf_float+0x2a6>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07d9      	lsls	r1, r3, #31
 8008524:	d5d7      	bpl.n	80084d6 <_printf_float+0x256>
 8008526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	f43f af00 	beq.w	8008336 <_printf_float+0xb6>
 8008536:	f04f 0a00 	mov.w	sl, #0
 800853a:	f104 0b1a 	add.w	fp, r4, #26
 800853e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008540:	425b      	negs	r3, r3
 8008542:	4553      	cmp	r3, sl
 8008544:	dc01      	bgt.n	800854a <_printf_float+0x2ca>
 8008546:	464b      	mov	r3, r9
 8008548:	e793      	b.n	8008472 <_printf_float+0x1f2>
 800854a:	2301      	movs	r3, #1
 800854c:	465a      	mov	r2, fp
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	47b8      	blx	r7
 8008554:	3001      	adds	r0, #1
 8008556:	f43f aeee 	beq.w	8008336 <_printf_float+0xb6>
 800855a:	f10a 0a01 	add.w	sl, sl, #1
 800855e:	e7ee      	b.n	800853e <_printf_float+0x2be>
 8008560:	7fefffff 	.word	0x7fefffff
 8008564:	0800ae3c 	.word	0x0800ae3c
 8008568:	0800ae40 	.word	0x0800ae40
 800856c:	0800ae44 	.word	0x0800ae44
 8008570:	0800ae48 	.word	0x0800ae48
 8008574:	0800ae4c 	.word	0x0800ae4c
 8008578:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800857a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800857e:	4553      	cmp	r3, sl
 8008580:	bfa8      	it	ge
 8008582:	4653      	movge	r3, sl
 8008584:	2b00      	cmp	r3, #0
 8008586:	4699      	mov	r9, r3
 8008588:	dc36      	bgt.n	80085f8 <_printf_float+0x378>
 800858a:	f04f 0b00 	mov.w	fp, #0
 800858e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008592:	f104 021a 	add.w	r2, r4, #26
 8008596:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008598:	930a      	str	r3, [sp, #40]	@ 0x28
 800859a:	eba3 0309 	sub.w	r3, r3, r9
 800859e:	455b      	cmp	r3, fp
 80085a0:	dc31      	bgt.n	8008606 <_printf_float+0x386>
 80085a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a4:	459a      	cmp	sl, r3
 80085a6:	dc3a      	bgt.n	800861e <_printf_float+0x39e>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	07da      	lsls	r2, r3, #31
 80085ac:	d437      	bmi.n	800861e <_printf_float+0x39e>
 80085ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b0:	ebaa 0903 	sub.w	r9, sl, r3
 80085b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b6:	ebaa 0303 	sub.w	r3, sl, r3
 80085ba:	4599      	cmp	r9, r3
 80085bc:	bfa8      	it	ge
 80085be:	4699      	movge	r9, r3
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	dc33      	bgt.n	800862e <_printf_float+0x3ae>
 80085c6:	f04f 0800 	mov.w	r8, #0
 80085ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ce:	f104 0b1a 	add.w	fp, r4, #26
 80085d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085d4:	ebaa 0303 	sub.w	r3, sl, r3
 80085d8:	eba3 0309 	sub.w	r3, r3, r9
 80085dc:	4543      	cmp	r3, r8
 80085de:	f77f af7a 	ble.w	80084d6 <_printf_float+0x256>
 80085e2:	2301      	movs	r3, #1
 80085e4:	465a      	mov	r2, fp
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f aea2 	beq.w	8008336 <_printf_float+0xb6>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	e7ec      	b.n	80085d2 <_printf_float+0x352>
 80085f8:	4642      	mov	r2, r8
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	d1c2      	bne.n	800858a <_printf_float+0x30a>
 8008604:	e697      	b.n	8008336 <_printf_float+0xb6>
 8008606:	2301      	movs	r3, #1
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	920a      	str	r2, [sp, #40]	@ 0x28
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae90 	beq.w	8008336 <_printf_float+0xb6>
 8008616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008618:	f10b 0b01 	add.w	fp, fp, #1
 800861c:	e7bb      	b.n	8008596 <_printf_float+0x316>
 800861e:	4631      	mov	r1, r6
 8008620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008624:	4628      	mov	r0, r5
 8008626:	47b8      	blx	r7
 8008628:	3001      	adds	r0, #1
 800862a:	d1c0      	bne.n	80085ae <_printf_float+0x32e>
 800862c:	e683      	b.n	8008336 <_printf_float+0xb6>
 800862e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008630:	464b      	mov	r3, r9
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	4442      	add	r2, r8
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	d1c3      	bne.n	80085c6 <_printf_float+0x346>
 800863e:	e67a      	b.n	8008336 <_printf_float+0xb6>
 8008640:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008644:	f1ba 0f01 	cmp.w	sl, #1
 8008648:	dc01      	bgt.n	800864e <_printf_float+0x3ce>
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d536      	bpl.n	80086bc <_printf_float+0x43c>
 800864e:	2301      	movs	r3, #1
 8008650:	4642      	mov	r2, r8
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	f43f ae6c 	beq.w	8008336 <_printf_float+0xb6>
 800865e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae64 	beq.w	8008336 <_printf_float+0xb6>
 800866e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	f10a 3aff 	add.w	sl, sl, #4294967295
 800867a:	f7f8 f9e5 	bl	8000a48 <__aeabi_dcmpeq>
 800867e:	b9c0      	cbnz	r0, 80086b2 <_printf_float+0x432>
 8008680:	4653      	mov	r3, sl
 8008682:	f108 0201 	add.w	r2, r8, #1
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	d10c      	bne.n	80086aa <_printf_float+0x42a>
 8008690:	e651      	b.n	8008336 <_printf_float+0xb6>
 8008692:	2301      	movs	r3, #1
 8008694:	465a      	mov	r2, fp
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f ae4a 	beq.w	8008336 <_printf_float+0xb6>
 80086a2:	f108 0801 	add.w	r8, r8, #1
 80086a6:	45d0      	cmp	r8, sl
 80086a8:	dbf3      	blt.n	8008692 <_printf_float+0x412>
 80086aa:	464b      	mov	r3, r9
 80086ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086b0:	e6e0      	b.n	8008474 <_printf_float+0x1f4>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	f104 0b1a 	add.w	fp, r4, #26
 80086ba:	e7f4      	b.n	80086a6 <_printf_float+0x426>
 80086bc:	2301      	movs	r3, #1
 80086be:	4642      	mov	r2, r8
 80086c0:	e7e1      	b.n	8008686 <_printf_float+0x406>
 80086c2:	2301      	movs	r3, #1
 80086c4:	464a      	mov	r2, r9
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae32 	beq.w	8008336 <_printf_float+0xb6>
 80086d2:	f108 0801 	add.w	r8, r8, #1
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086da:	1a5b      	subs	r3, r3, r1
 80086dc:	4543      	cmp	r3, r8
 80086de:	dcf0      	bgt.n	80086c2 <_printf_float+0x442>
 80086e0:	e6fd      	b.n	80084de <_printf_float+0x25e>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	f104 0919 	add.w	r9, r4, #25
 80086ea:	e7f4      	b.n	80086d6 <_printf_float+0x456>

080086ec <_printf_common>:
 80086ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	4616      	mov	r6, r2
 80086f2:	4698      	mov	r8, r3
 80086f4:	688a      	ldr	r2, [r1, #8]
 80086f6:	690b      	ldr	r3, [r1, #16]
 80086f8:	4607      	mov	r7, r0
 80086fa:	4293      	cmp	r3, r2
 80086fc:	bfb8      	it	lt
 80086fe:	4613      	movlt	r3, r2
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008706:	460c      	mov	r4, r1
 8008708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800870c:	b10a      	cbz	r2, 8008712 <_printf_common+0x26>
 800870e:	3301      	adds	r3, #1
 8008710:	6033      	str	r3, [r6, #0]
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	0699      	lsls	r1, r3, #26
 8008716:	bf42      	ittt	mi
 8008718:	6833      	ldrmi	r3, [r6, #0]
 800871a:	3302      	addmi	r3, #2
 800871c:	6033      	strmi	r3, [r6, #0]
 800871e:	6825      	ldr	r5, [r4, #0]
 8008720:	f015 0506 	ands.w	r5, r5, #6
 8008724:	d106      	bne.n	8008734 <_printf_common+0x48>
 8008726:	f104 0a19 	add.w	sl, r4, #25
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	6832      	ldr	r2, [r6, #0]
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	42ab      	cmp	r3, r5
 8008732:	dc2b      	bgt.n	800878c <_printf_common+0xa0>
 8008734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	3b00      	subs	r3, #0
 800873c:	bf18      	it	ne
 800873e:	2301      	movne	r3, #1
 8008740:	0692      	lsls	r2, r2, #26
 8008742:	d430      	bmi.n	80087a6 <_printf_common+0xba>
 8008744:	4641      	mov	r1, r8
 8008746:	4638      	mov	r0, r7
 8008748:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800874c:	47c8      	blx	r9
 800874e:	3001      	adds	r0, #1
 8008750:	d023      	beq.n	800879a <_printf_common+0xae>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	6922      	ldr	r2, [r4, #16]
 8008756:	f003 0306 	and.w	r3, r3, #6
 800875a:	2b04      	cmp	r3, #4
 800875c:	bf14      	ite	ne
 800875e:	2500      	movne	r5, #0
 8008760:	6833      	ldreq	r3, [r6, #0]
 8008762:	f04f 0600 	mov.w	r6, #0
 8008766:	bf08      	it	eq
 8008768:	68e5      	ldreq	r5, [r4, #12]
 800876a:	f104 041a 	add.w	r4, r4, #26
 800876e:	bf08      	it	eq
 8008770:	1aed      	subeq	r5, r5, r3
 8008772:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008776:	bf08      	it	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	4293      	cmp	r3, r2
 800877e:	bfc4      	itt	gt
 8008780:	1a9b      	subgt	r3, r3, r2
 8008782:	18ed      	addgt	r5, r5, r3
 8008784:	42b5      	cmp	r5, r6
 8008786:	d11a      	bne.n	80087be <_printf_common+0xd2>
 8008788:	2000      	movs	r0, #0
 800878a:	e008      	b.n	800879e <_printf_common+0xb2>
 800878c:	2301      	movs	r3, #1
 800878e:	4652      	mov	r2, sl
 8008790:	4641      	mov	r1, r8
 8008792:	4638      	mov	r0, r7
 8008794:	47c8      	blx	r9
 8008796:	3001      	adds	r0, #1
 8008798:	d103      	bne.n	80087a2 <_printf_common+0xb6>
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a2:	3501      	adds	r5, #1
 80087a4:	e7c1      	b.n	800872a <_printf_common+0x3e>
 80087a6:	2030      	movs	r0, #48	@ 0x30
 80087a8:	18e1      	adds	r1, r4, r3
 80087aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087b4:	4422      	add	r2, r4
 80087b6:	3302      	adds	r3, #2
 80087b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087bc:	e7c2      	b.n	8008744 <_printf_common+0x58>
 80087be:	2301      	movs	r3, #1
 80087c0:	4622      	mov	r2, r4
 80087c2:	4641      	mov	r1, r8
 80087c4:	4638      	mov	r0, r7
 80087c6:	47c8      	blx	r9
 80087c8:	3001      	adds	r0, #1
 80087ca:	d0e6      	beq.n	800879a <_printf_common+0xae>
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7d9      	b.n	8008784 <_printf_common+0x98>

080087d0 <_printf_i>:
 80087d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d4:	7e0f      	ldrb	r7, [r1, #24]
 80087d6:	4691      	mov	r9, r2
 80087d8:	2f78      	cmp	r7, #120	@ 0x78
 80087da:	4680      	mov	r8, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	469a      	mov	sl, r3
 80087e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087e6:	d807      	bhi.n	80087f8 <_printf_i+0x28>
 80087e8:	2f62      	cmp	r7, #98	@ 0x62
 80087ea:	d80a      	bhi.n	8008802 <_printf_i+0x32>
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	f000 80dd 	beq.w	80089ac <_printf_i+0x1dc>
 80087f2:	2f58      	cmp	r7, #88	@ 0x58
 80087f4:	f000 80c3 	beq.w	800897e <_printf_i+0x1ae>
 80087f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008800:	e03a      	b.n	8008878 <_printf_i+0xa8>
 8008802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008806:	2b15      	cmp	r3, #21
 8008808:	d8f6      	bhi.n	80087f8 <_printf_i+0x28>
 800880a:	a101      	add	r1, pc, #4	@ (adr r1, 8008810 <_printf_i+0x40>)
 800880c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008810:	08008869 	.word	0x08008869
 8008814:	0800887d 	.word	0x0800887d
 8008818:	080087f9 	.word	0x080087f9
 800881c:	080087f9 	.word	0x080087f9
 8008820:	080087f9 	.word	0x080087f9
 8008824:	080087f9 	.word	0x080087f9
 8008828:	0800887d 	.word	0x0800887d
 800882c:	080087f9 	.word	0x080087f9
 8008830:	080087f9 	.word	0x080087f9
 8008834:	080087f9 	.word	0x080087f9
 8008838:	080087f9 	.word	0x080087f9
 800883c:	08008993 	.word	0x08008993
 8008840:	0800890b 	.word	0x0800890b
 8008844:	0800894b 	.word	0x0800894b
 8008848:	080087f9 	.word	0x080087f9
 800884c:	080087f9 	.word	0x080087f9
 8008850:	080089b5 	.word	0x080089b5
 8008854:	080087f9 	.word	0x080087f9
 8008858:	0800890b 	.word	0x0800890b
 800885c:	080087f9 	.word	0x080087f9
 8008860:	080087f9 	.word	0x080087f9
 8008864:	08008953 	.word	0x08008953
 8008868:	6833      	ldr	r3, [r6, #0]
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6032      	str	r2, [r6, #0]
 8008870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008878:	2301      	movs	r3, #1
 800887a:	e0a8      	b.n	80089ce <_printf_i+0x1fe>
 800887c:	6831      	ldr	r1, [r6, #0]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	1d08      	adds	r0, r1, #4
 8008882:	6030      	str	r0, [r6, #0]
 8008884:	061e      	lsls	r6, r3, #24
 8008886:	d501      	bpl.n	800888c <_printf_i+0xbc>
 8008888:	680d      	ldr	r5, [r1, #0]
 800888a:	e003      	b.n	8008894 <_printf_i+0xc4>
 800888c:	065d      	lsls	r5, r3, #25
 800888e:	d5fb      	bpl.n	8008888 <_printf_i+0xb8>
 8008890:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008894:	2d00      	cmp	r5, #0
 8008896:	6861      	ldr	r1, [r4, #4]
 8008898:	da78      	bge.n	800898c <_printf_i+0x1bc>
 800889a:	202d      	movs	r0, #45	@ 0x2d
 800889c:	2900      	cmp	r1, #0
 800889e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80088a2:	60a1      	str	r1, [r4, #8]
 80088a4:	da2d      	bge.n	8008902 <_printf_i+0x132>
 80088a6:	230a      	movs	r3, #10
 80088a8:	485d      	ldr	r0, [pc, #372]	@ (8008a20 <_printf_i+0x250>)
 80088aa:	426d      	negs	r5, r5
 80088ac:	4616      	mov	r6, r2
 80088ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80088b2:	fb03 5711 	mls	r7, r3, r1, r5
 80088b6:	5dc7      	ldrb	r7, [r0, r7]
 80088b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088bc:	462f      	mov	r7, r5
 80088be:	42bb      	cmp	r3, r7
 80088c0:	460d      	mov	r5, r1
 80088c2:	d9f4      	bls.n	80088ae <_printf_i+0xde>
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d10b      	bne.n	80088e0 <_printf_i+0x110>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	07df      	lsls	r7, r3, #31
 80088cc:	d508      	bpl.n	80088e0 <_printf_i+0x110>
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	6861      	ldr	r1, [r4, #4]
 80088d2:	4299      	cmp	r1, r3
 80088d4:	bfde      	ittt	le
 80088d6:	2330      	movle	r3, #48	@ 0x30
 80088d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088e0:	1b92      	subs	r2, r2, r6
 80088e2:	6122      	str	r2, [r4, #16]
 80088e4:	464b      	mov	r3, r9
 80088e6:	4621      	mov	r1, r4
 80088e8:	4640      	mov	r0, r8
 80088ea:	f8cd a000 	str.w	sl, [sp]
 80088ee:	aa03      	add	r2, sp, #12
 80088f0:	f7ff fefc 	bl	80086ec <_printf_common>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d16f      	bne.n	80089d8 <_printf_i+0x208>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	b004      	add	sp, #16
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008902:	f023 0304 	bic.w	r3, r3, #4
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	e7cd      	b.n	80088a6 <_printf_i+0xd6>
 800890a:	6821      	ldr	r1, [r4, #0]
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	0608      	lsls	r0, r1, #24
 8008910:	f853 5b04 	ldr.w	r5, [r3], #4
 8008914:	d402      	bmi.n	800891c <_printf_i+0x14c>
 8008916:	0649      	lsls	r1, r1, #25
 8008918:	bf48      	it	mi
 800891a:	b2ad      	uxthmi	r5, r5
 800891c:	2f6f      	cmp	r7, #111	@ 0x6f
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	bf14      	ite	ne
 8008922:	230a      	movne	r3, #10
 8008924:	2308      	moveq	r3, #8
 8008926:	483e      	ldr	r0, [pc, #248]	@ (8008a20 <_printf_i+0x250>)
 8008928:	2100      	movs	r1, #0
 800892a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800892e:	6866      	ldr	r6, [r4, #4]
 8008930:	2e00      	cmp	r6, #0
 8008932:	60a6      	str	r6, [r4, #8]
 8008934:	dbba      	blt.n	80088ac <_printf_i+0xdc>
 8008936:	6821      	ldr	r1, [r4, #0]
 8008938:	f021 0104 	bic.w	r1, r1, #4
 800893c:	6021      	str	r1, [r4, #0]
 800893e:	2d00      	cmp	r5, #0
 8008940:	d1b4      	bne.n	80088ac <_printf_i+0xdc>
 8008942:	2e00      	cmp	r6, #0
 8008944:	d1b2      	bne.n	80088ac <_printf_i+0xdc>
 8008946:	4616      	mov	r6, r2
 8008948:	e7bc      	b.n	80088c4 <_printf_i+0xf4>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	2778      	movs	r7, #120	@ 0x78
 8008954:	4833      	ldr	r0, [pc, #204]	@ (8008a24 <_printf_i+0x254>)
 8008956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	6831      	ldr	r1, [r6, #0]
 800895e:	061f      	lsls	r7, r3, #24
 8008960:	f851 5b04 	ldr.w	r5, [r1], #4
 8008964:	d402      	bmi.n	800896c <_printf_i+0x19c>
 8008966:	065f      	lsls	r7, r3, #25
 8008968:	bf48      	it	mi
 800896a:	b2ad      	uxthmi	r5, r5
 800896c:	6031      	str	r1, [r6, #0]
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	bf44      	itt	mi
 8008972:	f043 0320 	orrmi.w	r3, r3, #32
 8008976:	6023      	strmi	r3, [r4, #0]
 8008978:	b11d      	cbz	r5, 8008982 <_printf_i+0x1b2>
 800897a:	2310      	movs	r3, #16
 800897c:	e7d4      	b.n	8008928 <_printf_i+0x158>
 800897e:	4828      	ldr	r0, [pc, #160]	@ (8008a20 <_printf_i+0x250>)
 8008980:	e7e9      	b.n	8008956 <_printf_i+0x186>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f023 0320 	bic.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	e7f6      	b.n	800897a <_printf_i+0x1aa>
 800898c:	230a      	movs	r3, #10
 800898e:	4824      	ldr	r0, [pc, #144]	@ (8008a20 <_printf_i+0x250>)
 8008990:	e7cd      	b.n	800892e <_printf_i+0x15e>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	6825      	ldr	r5, [r4, #0]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6961      	ldr	r1, [r4, #20]
 800899a:	6030      	str	r0, [r6, #0]
 800899c:	062e      	lsls	r6, r5, #24
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	d501      	bpl.n	80089a6 <_printf_i+0x1d6>
 80089a2:	6019      	str	r1, [r3, #0]
 80089a4:	e002      	b.n	80089ac <_printf_i+0x1dc>
 80089a6:	0668      	lsls	r0, r5, #25
 80089a8:	d5fb      	bpl.n	80089a2 <_printf_i+0x1d2>
 80089aa:	8019      	strh	r1, [r3, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	4616      	mov	r6, r2
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	e797      	b.n	80088e4 <_printf_i+0x114>
 80089b4:	6833      	ldr	r3, [r6, #0]
 80089b6:	2100      	movs	r1, #0
 80089b8:	1d1a      	adds	r2, r3, #4
 80089ba:	6032      	str	r2, [r6, #0]
 80089bc:	681e      	ldr	r6, [r3, #0]
 80089be:	6862      	ldr	r2, [r4, #4]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 faca 	bl	8008f5a <memchr>
 80089c6:	b108      	cbz	r0, 80089cc <_printf_i+0x1fc>
 80089c8:	1b80      	subs	r0, r0, r6
 80089ca:	6060      	str	r0, [r4, #4]
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	2300      	movs	r3, #0
 80089d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d6:	e785      	b.n	80088e4 <_printf_i+0x114>
 80089d8:	4632      	mov	r2, r6
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	47d0      	blx	sl
 80089e2:	3001      	adds	r0, #1
 80089e4:	d088      	beq.n	80088f8 <_printf_i+0x128>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	079b      	lsls	r3, r3, #30
 80089ea:	d414      	bmi.n	8008a16 <_printf_i+0x246>
 80089ec:	68e0      	ldr	r0, [r4, #12]
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	4298      	cmp	r0, r3
 80089f2:	bfb8      	it	lt
 80089f4:	4618      	movlt	r0, r3
 80089f6:	e781      	b.n	80088fc <_printf_i+0x12c>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4632      	mov	r2, r6
 80089fc:	4649      	mov	r1, r9
 80089fe:	4640      	mov	r0, r8
 8008a00:	47d0      	blx	sl
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f af78 	beq.w	80088f8 <_printf_i+0x128>
 8008a08:	3501      	adds	r5, #1
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	9903      	ldr	r1, [sp, #12]
 8008a0e:	1a5b      	subs	r3, r3, r1
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dcf1      	bgt.n	80089f8 <_printf_i+0x228>
 8008a14:	e7ea      	b.n	80089ec <_printf_i+0x21c>
 8008a16:	2500      	movs	r5, #0
 8008a18:	f104 0619 	add.w	r6, r4, #25
 8008a1c:	e7f5      	b.n	8008a0a <_printf_i+0x23a>
 8008a1e:	bf00      	nop
 8008a20:	0800ae4e 	.word	0x0800ae4e
 8008a24:	0800ae5f 	.word	0x0800ae5f

08008a28 <std>:
 8008a28:	2300      	movs	r3, #0
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a36:	6083      	str	r3, [r0, #8]
 8008a38:	8181      	strh	r1, [r0, #12]
 8008a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a3c:	81c2      	strh	r2, [r0, #14]
 8008a3e:	6183      	str	r3, [r0, #24]
 8008a40:	4619      	mov	r1, r3
 8008a42:	2208      	movs	r2, #8
 8008a44:	305c      	adds	r0, #92	@ 0x5c
 8008a46:	f000 f9f9 	bl	8008e3c <memset>
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a80 <std+0x58>)
 8008a4c:	6224      	str	r4, [r4, #32]
 8008a4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a50:	4b0c      	ldr	r3, [pc, #48]	@ (8008a84 <std+0x5c>)
 8008a52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <std+0x60>)
 8008a56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a58:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <std+0x64>)
 8008a5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <std+0x68>)
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d006      	beq.n	8008a70 <std+0x48>
 8008a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a66:	4294      	cmp	r4, r2
 8008a68:	d002      	beq.n	8008a70 <std+0x48>
 8008a6a:	33d0      	adds	r3, #208	@ 0xd0
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	d105      	bne.n	8008a7c <std+0x54>
 8008a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f000 ba6c 	b.w	8008f54 <__retarget_lock_init_recursive>
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	bf00      	nop
 8008a80:	08008c8d 	.word	0x08008c8d
 8008a84:	08008caf 	.word	0x08008caf
 8008a88:	08008ce7 	.word	0x08008ce7
 8008a8c:	08008d0b 	.word	0x08008d0b
 8008a90:	20003b98 	.word	0x20003b98

08008a94 <stdio_exit_handler>:
 8008a94:	4a02      	ldr	r2, [pc, #8]	@ (8008aa0 <stdio_exit_handler+0xc>)
 8008a96:	4903      	ldr	r1, [pc, #12]	@ (8008aa4 <stdio_exit_handler+0x10>)
 8008a98:	4803      	ldr	r0, [pc, #12]	@ (8008aa8 <stdio_exit_handler+0x14>)
 8008a9a:	f000 b869 	b.w	8008b70 <_fwalk_sglue>
 8008a9e:	bf00      	nop
 8008aa0:	20000010 	.word	0x20000010
 8008aa4:	0800a855 	.word	0x0800a855
 8008aa8:	2000018c 	.word	0x2000018c

08008aac <cleanup_stdio>:
 8008aac:	6841      	ldr	r1, [r0, #4]
 8008aae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <cleanup_stdio+0x34>)
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	d001      	beq.n	8008abc <cleanup_stdio+0x10>
 8008ab8:	f001 fecc 	bl	800a854 <_fflush_r>
 8008abc:	68a1      	ldr	r1, [r4, #8]
 8008abe:	4b09      	ldr	r3, [pc, #36]	@ (8008ae4 <cleanup_stdio+0x38>)
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	d002      	beq.n	8008aca <cleanup_stdio+0x1e>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f001 fec5 	bl	800a854 <_fflush_r>
 8008aca:	68e1      	ldr	r1, [r4, #12]
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <cleanup_stdio+0x3c>)
 8008ace:	4299      	cmp	r1, r3
 8008ad0:	d004      	beq.n	8008adc <cleanup_stdio+0x30>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad8:	f001 bebc 	b.w	800a854 <_fflush_r>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	bf00      	nop
 8008ae0:	20003b98 	.word	0x20003b98
 8008ae4:	20003c00 	.word	0x20003c00
 8008ae8:	20003c68 	.word	0x20003c68

08008aec <global_stdio_init.part.0>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <global_stdio_init.part.0+0x30>)
 8008af0:	4c0b      	ldr	r4, [pc, #44]	@ (8008b20 <global_stdio_init.part.0+0x34>)
 8008af2:	4a0c      	ldr	r2, [pc, #48]	@ (8008b24 <global_stdio_init.part.0+0x38>)
 8008af4:	4620      	mov	r0, r4
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	2104      	movs	r1, #4
 8008afa:	2200      	movs	r2, #0
 8008afc:	f7ff ff94 	bl	8008a28 <std>
 8008b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b04:	2201      	movs	r2, #1
 8008b06:	2109      	movs	r1, #9
 8008b08:	f7ff ff8e 	bl	8008a28 <std>
 8008b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b10:	2202      	movs	r2, #2
 8008b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b16:	2112      	movs	r1, #18
 8008b18:	f7ff bf86 	b.w	8008a28 <std>
 8008b1c:	20003cd0 	.word	0x20003cd0
 8008b20:	20003b98 	.word	0x20003b98
 8008b24:	08008a95 	.word	0x08008a95

08008b28 <__sfp_lock_acquire>:
 8008b28:	4801      	ldr	r0, [pc, #4]	@ (8008b30 <__sfp_lock_acquire+0x8>)
 8008b2a:	f000 ba14 	b.w	8008f56 <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20003cd9 	.word	0x20003cd9

08008b34 <__sfp_lock_release>:
 8008b34:	4801      	ldr	r0, [pc, #4]	@ (8008b3c <__sfp_lock_release+0x8>)
 8008b36:	f000 ba0f 	b.w	8008f58 <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20003cd9 	.word	0x20003cd9

08008b40 <__sinit>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	f7ff fff0 	bl	8008b28 <__sfp_lock_acquire>
 8008b48:	6a23      	ldr	r3, [r4, #32]
 8008b4a:	b11b      	cbz	r3, 8008b54 <__sinit+0x14>
 8008b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b50:	f7ff bff0 	b.w	8008b34 <__sfp_lock_release>
 8008b54:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <__sinit+0x28>)
 8008b56:	6223      	str	r3, [r4, #32]
 8008b58:	4b04      	ldr	r3, [pc, #16]	@ (8008b6c <__sinit+0x2c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f5      	bne.n	8008b4c <__sinit+0xc>
 8008b60:	f7ff ffc4 	bl	8008aec <global_stdio_init.part.0>
 8008b64:	e7f2      	b.n	8008b4c <__sinit+0xc>
 8008b66:	bf00      	nop
 8008b68:	08008aad 	.word	0x08008aad
 8008b6c:	20003cd0 	.word	0x20003cd0

08008b70 <_fwalk_sglue>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	4607      	mov	r7, r0
 8008b76:	4688      	mov	r8, r1
 8008b78:	4614      	mov	r4, r2
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b80:	f1b9 0901 	subs.w	r9, r9, #1
 8008b84:	d505      	bpl.n	8008b92 <_fwalk_sglue+0x22>
 8008b86:	6824      	ldr	r4, [r4, #0]
 8008b88:	2c00      	cmp	r4, #0
 8008b8a:	d1f7      	bne.n	8008b7c <_fwalk_sglue+0xc>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b92:	89ab      	ldrh	r3, [r5, #12]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d907      	bls.n	8008ba8 <_fwalk_sglue+0x38>
 8008b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	d003      	beq.n	8008ba8 <_fwalk_sglue+0x38>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	47c0      	blx	r8
 8008ba6:	4306      	orrs	r6, r0
 8008ba8:	3568      	adds	r5, #104	@ 0x68
 8008baa:	e7e9      	b.n	8008b80 <_fwalk_sglue+0x10>

08008bac <iprintf>:
 8008bac:	b40f      	push	{r0, r1, r2, r3}
 8008bae:	b507      	push	{r0, r1, r2, lr}
 8008bb0:	4906      	ldr	r1, [pc, #24]	@ (8008bcc <iprintf+0x20>)
 8008bb2:	ab04      	add	r3, sp, #16
 8008bb4:	6808      	ldr	r0, [r1, #0]
 8008bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bba:	6881      	ldr	r1, [r0, #8]
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	f001 fcb1 	bl	800a524 <_vfiprintf_r>
 8008bc2:	b003      	add	sp, #12
 8008bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc8:	b004      	add	sp, #16
 8008bca:	4770      	bx	lr
 8008bcc:	20000188 	.word	0x20000188

08008bd0 <_puts_r>:
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	460e      	mov	r6, r1
 8008bd8:	6884      	ldr	r4, [r0, #8]
 8008bda:	b90b      	cbnz	r3, 8008be0 <_puts_r+0x10>
 8008bdc:	f7ff ffb0 	bl	8008b40 <__sinit>
 8008be0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d405      	bmi.n	8008bf2 <_puts_r+0x22>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	0598      	lsls	r0, r3, #22
 8008bea:	d402      	bmi.n	8008bf2 <_puts_r+0x22>
 8008bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bee:	f000 f9b2 	bl	8008f56 <__retarget_lock_acquire_recursive>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	0719      	lsls	r1, r3, #28
 8008bf6:	d502      	bpl.n	8008bfe <_puts_r+0x2e>
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d135      	bne.n	8008c6a <_puts_r+0x9a>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f8c5 	bl	8008d90 <__swsetup_r>
 8008c06:	b380      	cbz	r0, 8008c6a <_puts_r+0x9a>
 8008c08:	f04f 35ff 	mov.w	r5, #4294967295
 8008c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c0e:	07da      	lsls	r2, r3, #31
 8008c10:	d405      	bmi.n	8008c1e <_puts_r+0x4e>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	059b      	lsls	r3, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_puts_r+0x4e>
 8008c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1a:	f000 f99d 	bl	8008f58 <__retarget_lock_release_recursive>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	db15      	blt.n	8008c52 <_puts_r+0x82>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	7019      	strb	r1, [r3, #0]
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c34:	3b01      	subs	r3, #1
 8008c36:	60a3      	str	r3, [r4, #8]
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d1f2      	bne.n	8008c22 <_puts_r+0x52>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da16      	bge.n	8008c6e <_puts_r+0x9e>
 8008c40:	4622      	mov	r2, r4
 8008c42:	210a      	movs	r1, #10
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 f864 	bl	8008d12 <__swbuf_r>
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0dc      	beq.n	8008c08 <_puts_r+0x38>
 8008c4e:	250a      	movs	r5, #10
 8008c50:	e7dc      	b.n	8008c0c <_puts_r+0x3c>
 8008c52:	69a2      	ldr	r2, [r4, #24]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	dc01      	bgt.n	8008c5c <_puts_r+0x8c>
 8008c58:	290a      	cmp	r1, #10
 8008c5a:	d1e4      	bne.n	8008c26 <_puts_r+0x56>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 f857 	bl	8008d12 <__swbuf_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1e2      	bne.n	8008c2e <_puts_r+0x5e>
 8008c68:	e7ce      	b.n	8008c08 <_puts_r+0x38>
 8008c6a:	3e01      	subs	r6, #1
 8008c6c:	e7df      	b.n	8008c2e <_puts_r+0x5e>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	220a      	movs	r2, #10
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e7e9      	b.n	8008c4e <_puts_r+0x7e>
	...

08008c7c <puts>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	@ (8008c88 <puts+0xc>)
 8008c7e:	4601      	mov	r1, r0
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f7ff bfa5 	b.w	8008bd0 <_puts_r>
 8008c86:	bf00      	nop
 8008c88:	20000188 	.word	0x20000188

08008c8c <__sread>:
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	f000 f900 	bl	8008e98 <_read_r>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	bfab      	itete	ge
 8008c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca0:	181b      	addge	r3, r3, r0
 8008ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ca6:	bfac      	ite	ge
 8008ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008caa:	81a3      	strhlt	r3, [r4, #12]
 8008cac:	bd10      	pop	{r4, pc}

08008cae <__swrite>:
 8008cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	461f      	mov	r7, r3
 8008cb4:	898b      	ldrh	r3, [r1, #12]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	05db      	lsls	r3, r3, #23
 8008cba:	460c      	mov	r4, r1
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	d505      	bpl.n	8008ccc <__swrite+0x1e>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	f000 f8d4 	bl	8008e74 <_lseek_r>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	4632      	mov	r2, r6
 8008cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	463b      	mov	r3, r7
 8008cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce2:	f000 b8fb 	b.w	8008edc <_write_r>

08008ce6 <__sseek>:
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	460c      	mov	r4, r1
 8008cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cee:	f000 f8c1 	bl	8008e74 <_lseek_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	bf15      	itete	ne
 8008cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d02:	81a3      	strheq	r3, [r4, #12]
 8008d04:	bf18      	it	ne
 8008d06:	81a3      	strhne	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__sclose>:
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	f000 b8a1 	b.w	8008e54 <_close_r>

08008d12 <__swbuf_r>:
 8008d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d14:	460e      	mov	r6, r1
 8008d16:	4614      	mov	r4, r2
 8008d18:	4605      	mov	r5, r0
 8008d1a:	b118      	cbz	r0, 8008d24 <__swbuf_r+0x12>
 8008d1c:	6a03      	ldr	r3, [r0, #32]
 8008d1e:	b90b      	cbnz	r3, 8008d24 <__swbuf_r+0x12>
 8008d20:	f7ff ff0e 	bl	8008b40 <__sinit>
 8008d24:	69a3      	ldr	r3, [r4, #24]
 8008d26:	60a3      	str	r3, [r4, #8]
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	071a      	lsls	r2, r3, #28
 8008d2c:	d501      	bpl.n	8008d32 <__swbuf_r+0x20>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	b943      	cbnz	r3, 8008d44 <__swbuf_r+0x32>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 f82b 	bl	8008d90 <__swsetup_r>
 8008d3a:	b118      	cbz	r0, 8008d44 <__swbuf_r+0x32>
 8008d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d40:	4638      	mov	r0, r7
 8008d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	6922      	ldr	r2, [r4, #16]
 8008d48:	b2f6      	uxtb	r6, r6
 8008d4a:	1a98      	subs	r0, r3, r2
 8008d4c:	6963      	ldr	r3, [r4, #20]
 8008d4e:	4637      	mov	r7, r6
 8008d50:	4283      	cmp	r3, r0
 8008d52:	dc05      	bgt.n	8008d60 <__swbuf_r+0x4e>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f001 fd7c 	bl	800a854 <_fflush_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1ed      	bne.n	8008d3c <__swbuf_r+0x2a>
 8008d60:	68a3      	ldr	r3, [r4, #8]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	701e      	strb	r6, [r3, #0]
 8008d6e:	6962      	ldr	r2, [r4, #20]
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d004      	beq.n	8008d80 <__swbuf_r+0x6e>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	07db      	lsls	r3, r3, #31
 8008d7a:	d5e1      	bpl.n	8008d40 <__swbuf_r+0x2e>
 8008d7c:	2e0a      	cmp	r6, #10
 8008d7e:	d1df      	bne.n	8008d40 <__swbuf_r+0x2e>
 8008d80:	4621      	mov	r1, r4
 8008d82:	4628      	mov	r0, r5
 8008d84:	f001 fd66 	bl	800a854 <_fflush_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d0d9      	beq.n	8008d40 <__swbuf_r+0x2e>
 8008d8c:	e7d6      	b.n	8008d3c <__swbuf_r+0x2a>
	...

08008d90 <__swsetup_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4b29      	ldr	r3, [pc, #164]	@ (8008e38 <__swsetup_r+0xa8>)
 8008d94:	4605      	mov	r5, r0
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	460c      	mov	r4, r1
 8008d9a:	b118      	cbz	r0, 8008da4 <__swsetup_r+0x14>
 8008d9c:	6a03      	ldr	r3, [r0, #32]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <__swsetup_r+0x14>
 8008da0:	f7ff fece 	bl	8008b40 <__sinit>
 8008da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da8:	0719      	lsls	r1, r3, #28
 8008daa:	d422      	bmi.n	8008df2 <__swsetup_r+0x62>
 8008dac:	06da      	lsls	r2, r3, #27
 8008dae:	d407      	bmi.n	8008dc0 <__swsetup_r+0x30>
 8008db0:	2209      	movs	r2, #9
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	e033      	b.n	8008e28 <__swsetup_r+0x98>
 8008dc0:	0758      	lsls	r0, r3, #29
 8008dc2:	d512      	bpl.n	8008dea <__swsetup_r+0x5a>
 8008dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dc6:	b141      	cbz	r1, 8008dda <__swsetup_r+0x4a>
 8008dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <__swsetup_r+0x46>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 ff95 	bl	8009d00 <_free_r>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f043 0308 	orr.w	r3, r3, #8
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	b94b      	cbnz	r3, 8008e0a <__swsetup_r+0x7a>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e00:	d003      	beq.n	8008e0a <__swsetup_r+0x7a>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f001 fd72 	bl	800a8ee <__smakebuf_r>
 8008e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0e:	f013 0201 	ands.w	r2, r3, #1
 8008e12:	d00a      	beq.n	8008e2a <__swsetup_r+0x9a>
 8008e14:	2200      	movs	r2, #0
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	4252      	negs	r2, r2
 8008e1c:	61a2      	str	r2, [r4, #24]
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	b942      	cbnz	r2, 8008e34 <__swsetup_r+0xa4>
 8008e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e26:	d1c5      	bne.n	8008db4 <__swsetup_r+0x24>
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	0799      	lsls	r1, r3, #30
 8008e2c:	bf58      	it	pl
 8008e2e:	6962      	ldrpl	r2, [r4, #20]
 8008e30:	60a2      	str	r2, [r4, #8]
 8008e32:	e7f4      	b.n	8008e1e <__swsetup_r+0x8e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7f7      	b.n	8008e28 <__swsetup_r+0x98>
 8008e38:	20000188 	.word	0x20000188

08008e3c <memset>:
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4402      	add	r2, r0
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d100      	bne.n	8008e46 <memset+0xa>
 8008e44:	4770      	bx	lr
 8008e46:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4a:	e7f9      	b.n	8008e40 <memset+0x4>

08008e4c <_localeconv_r>:
 8008e4c:	4800      	ldr	r0, [pc, #0]	@ (8008e50 <_localeconv_r+0x4>)
 8008e4e:	4770      	bx	lr
 8008e50:	2000010c 	.word	0x2000010c

08008e54 <_close_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	2300      	movs	r3, #0
 8008e58:	4d05      	ldr	r5, [pc, #20]	@ (8008e70 <_close_r+0x1c>)
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7f9 fbac 	bl	80025bc <_close>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_close_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_close_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20003cd4 	.word	0x20003cd4

08008e74 <_lseek_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4d05      	ldr	r5, [pc, #20]	@ (8008e94 <_lseek_r+0x20>)
 8008e80:	602a      	str	r2, [r5, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f7f9 fba6 	bl	80025d4 <_lseek>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_lseek_r+0x1e>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_lseek_r+0x1e>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20003cd4 	.word	0x20003cd4

08008e98 <_read_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4d05      	ldr	r5, [pc, #20]	@ (8008eb8 <_read_r+0x20>)
 8008ea4:	602a      	str	r2, [r5, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f7f9 fb6c 	bl	8002584 <_read>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d102      	bne.n	8008eb6 <_read_r+0x1e>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	b103      	cbz	r3, 8008eb6 <_read_r+0x1e>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	20003cd4 	.word	0x20003cd4

08008ebc <_sbrk_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4d05      	ldr	r5, [pc, #20]	@ (8008ed8 <_sbrk_r+0x1c>)
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f9 fb86 	bl	80025d8 <_sbrk>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_sbrk_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_sbrk_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20003cd4 	.word	0x20003cd4

08008edc <_write_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4d05      	ldr	r5, [pc, #20]	@ (8008efc <_write_r+0x20>)
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f9 fb58 	bl	80025a0 <_write>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_write_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_write_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20003cd4 	.word	0x20003cd4

08008f00 <__errno>:
 8008f00:	4b01      	ldr	r3, [pc, #4]	@ (8008f08 <__errno+0x8>)
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000188 	.word	0x20000188

08008f0c <__libc_init_array>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	2600      	movs	r6, #0
 8008f10:	4d0c      	ldr	r5, [pc, #48]	@ (8008f44 <__libc_init_array+0x38>)
 8008f12:	4c0d      	ldr	r4, [pc, #52]	@ (8008f48 <__libc_init_array+0x3c>)
 8008f14:	1b64      	subs	r4, r4, r5
 8008f16:	10a4      	asrs	r4, r4, #2
 8008f18:	42a6      	cmp	r6, r4
 8008f1a:	d109      	bne.n	8008f30 <__libc_init_array+0x24>
 8008f1c:	f001 fdd6 	bl	800aacc <_init>
 8008f20:	2600      	movs	r6, #0
 8008f22:	4d0a      	ldr	r5, [pc, #40]	@ (8008f4c <__libc_init_array+0x40>)
 8008f24:	4c0a      	ldr	r4, [pc, #40]	@ (8008f50 <__libc_init_array+0x44>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	42a6      	cmp	r6, r4
 8008f2c:	d105      	bne.n	8008f3a <__libc_init_array+0x2e>
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f34:	4798      	blx	r3
 8008f36:	3601      	adds	r6, #1
 8008f38:	e7ee      	b.n	8008f18 <__libc_init_array+0xc>
 8008f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3e:	4798      	blx	r3
 8008f40:	3601      	adds	r6, #1
 8008f42:	e7f2      	b.n	8008f2a <__libc_init_array+0x1e>
 8008f44:	0800b1b8 	.word	0x0800b1b8
 8008f48:	0800b1b8 	.word	0x0800b1b8
 8008f4c:	0800b1b8 	.word	0x0800b1b8
 8008f50:	0800b1bc 	.word	0x0800b1bc

08008f54 <__retarget_lock_init_recursive>:
 8008f54:	4770      	bx	lr

08008f56 <__retarget_lock_acquire_recursive>:
 8008f56:	4770      	bx	lr

08008f58 <__retarget_lock_release_recursive>:
 8008f58:	4770      	bx	lr

08008f5a <memchr>:
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	b2c9      	uxtb	r1, r1
 8008f60:	4402      	add	r2, r0
 8008f62:	4293      	cmp	r3, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	d101      	bne.n	8008f6c <memchr+0x12>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e003      	b.n	8008f74 <memchr+0x1a>
 8008f6c:	7804      	ldrb	r4, [r0, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	428c      	cmp	r4, r1
 8008f72:	d1f6      	bne.n	8008f62 <memchr+0x8>
 8008f74:	bd10      	pop	{r4, pc}

08008f76 <memcpy>:
 8008f76:	440a      	add	r2, r1
 8008f78:	4291      	cmp	r1, r2
 8008f7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f7e:	d100      	bne.n	8008f82 <memcpy+0xc>
 8008f80:	4770      	bx	lr
 8008f82:	b510      	push	{r4, lr}
 8008f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f88:	4291      	cmp	r1, r2
 8008f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f8e:	d1f9      	bne.n	8008f84 <memcpy+0xe>
 8008f90:	bd10      	pop	{r4, pc}

08008f92 <quorem>:
 8008f92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f96:	6903      	ldr	r3, [r0, #16]
 8008f98:	690c      	ldr	r4, [r1, #16]
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	db7e      	blt.n	800909e <quorem+0x10c>
 8008fa0:	3c01      	subs	r4, #1
 8008fa2:	00a3      	lsls	r3, r4, #2
 8008fa4:	f100 0514 	add.w	r5, r0, #20
 8008fa8:	f101 0814 	add.w	r8, r1, #20
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fc8:	d32e      	bcc.n	8009028 <quorem+0x96>
 8008fca:	f04f 0a00 	mov.w	sl, #0
 8008fce:	46c4      	mov	ip, r8
 8008fd0:	46ae      	mov	lr, r5
 8008fd2:	46d3      	mov	fp, sl
 8008fd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fd8:	b298      	uxth	r0, r3
 8008fda:	fb06 a000 	mla	r0, r6, r0, sl
 8008fde:	0c1b      	lsrs	r3, r3, #16
 8008fe0:	0c02      	lsrs	r2, r0, #16
 8008fe2:	fb06 2303 	mla	r3, r6, r3, r2
 8008fe6:	f8de 2000 	ldr.w	r2, [lr]
 8008fea:	b280      	uxth	r0, r0
 8008fec:	b292      	uxth	r2, r2
 8008fee:	1a12      	subs	r2, r2, r0
 8008ff0:	445a      	add	r2, fp
 8008ff2:	f8de 0000 	ldr.w	r0, [lr]
 8008ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009000:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009004:	b292      	uxth	r2, r2
 8009006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800900a:	45e1      	cmp	r9, ip
 800900c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009010:	f84e 2b04 	str.w	r2, [lr], #4
 8009014:	d2de      	bcs.n	8008fd4 <quorem+0x42>
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	58eb      	ldr	r3, [r5, r3]
 800901a:	b92b      	cbnz	r3, 8009028 <quorem+0x96>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	3b04      	subs	r3, #4
 8009020:	429d      	cmp	r5, r3
 8009022:	461a      	mov	r2, r3
 8009024:	d32f      	bcc.n	8009086 <quorem+0xf4>
 8009026:	613c      	str	r4, [r7, #16]
 8009028:	4638      	mov	r0, r7
 800902a:	f001 f93f 	bl	800a2ac <__mcmp>
 800902e:	2800      	cmp	r0, #0
 8009030:	db25      	blt.n	800907e <quorem+0xec>
 8009032:	4629      	mov	r1, r5
 8009034:	2000      	movs	r0, #0
 8009036:	f858 2b04 	ldr.w	r2, [r8], #4
 800903a:	f8d1 c000 	ldr.w	ip, [r1]
 800903e:	fa1f fe82 	uxth.w	lr, r2
 8009042:	fa1f f38c 	uxth.w	r3, ip
 8009046:	eba3 030e 	sub.w	r3, r3, lr
 800904a:	4403      	add	r3, r0
 800904c:	0c12      	lsrs	r2, r2, #16
 800904e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009052:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800905c:	45c1      	cmp	r9, r8
 800905e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009062:	f841 3b04 	str.w	r3, [r1], #4
 8009066:	d2e6      	bcs.n	8009036 <quorem+0xa4>
 8009068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800906c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009070:	b922      	cbnz	r2, 800907c <quorem+0xea>
 8009072:	3b04      	subs	r3, #4
 8009074:	429d      	cmp	r5, r3
 8009076:	461a      	mov	r2, r3
 8009078:	d30b      	bcc.n	8009092 <quorem+0x100>
 800907a:	613c      	str	r4, [r7, #16]
 800907c:	3601      	adds	r6, #1
 800907e:	4630      	mov	r0, r6
 8009080:	b003      	add	sp, #12
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	3b04      	subs	r3, #4
 800908a:	2a00      	cmp	r2, #0
 800908c:	d1cb      	bne.n	8009026 <quorem+0x94>
 800908e:	3c01      	subs	r4, #1
 8009090:	e7c6      	b.n	8009020 <quorem+0x8e>
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	3b04      	subs	r3, #4
 8009096:	2a00      	cmp	r2, #0
 8009098:	d1ef      	bne.n	800907a <quorem+0xe8>
 800909a:	3c01      	subs	r4, #1
 800909c:	e7ea      	b.n	8009074 <quorem+0xe2>
 800909e:	2000      	movs	r0, #0
 80090a0:	e7ee      	b.n	8009080 <quorem+0xee>
 80090a2:	0000      	movs	r0, r0
 80090a4:	0000      	movs	r0, r0
	...

080090a8 <_dtoa_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4614      	mov	r4, r2
 80090ae:	461d      	mov	r5, r3
 80090b0:	69c7      	ldr	r7, [r0, #28]
 80090b2:	b097      	sub	sp, #92	@ 0x5c
 80090b4:	4683      	mov	fp, r0
 80090b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80090ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80090bc:	b97f      	cbnz	r7, 80090de <_dtoa_r+0x36>
 80090be:	2010      	movs	r0, #16
 80090c0:	f7fe ff7e 	bl	8007fc0 <malloc>
 80090c4:	4602      	mov	r2, r0
 80090c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80090ca:	b920      	cbnz	r0, 80090d6 <_dtoa_r+0x2e>
 80090cc:	21ef      	movs	r1, #239	@ 0xef
 80090ce:	4ba2      	ldr	r3, [pc, #648]	@ (8009358 <_dtoa_r+0x2b0>)
 80090d0:	48a2      	ldr	r0, [pc, #648]	@ (800935c <_dtoa_r+0x2b4>)
 80090d2:	f001 fc6b 	bl	800a9ac <__assert_func>
 80090d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80090da:	6007      	str	r7, [r0, #0]
 80090dc:	60c7      	str	r7, [r0, #12]
 80090de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	b159      	cbz	r1, 80090fe <_dtoa_r+0x56>
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	2301      	movs	r3, #1
 80090ea:	4093      	lsls	r3, r2
 80090ec:	604a      	str	r2, [r1, #4]
 80090ee:	608b      	str	r3, [r1, #8]
 80090f0:	4658      	mov	r0, fp
 80090f2:	f000 fe9f 	bl	8009e34 <_Bfree>
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	1e2b      	subs	r3, r5, #0
 8009100:	bfaf      	iteee	ge
 8009102:	2300      	movge	r3, #0
 8009104:	2201      	movlt	r2, #1
 8009106:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800910a:	9305      	strlt	r3, [sp, #20]
 800910c:	bfa8      	it	ge
 800910e:	6033      	strge	r3, [r6, #0]
 8009110:	9f05      	ldr	r7, [sp, #20]
 8009112:	4b93      	ldr	r3, [pc, #588]	@ (8009360 <_dtoa_r+0x2b8>)
 8009114:	bfb8      	it	lt
 8009116:	6032      	strlt	r2, [r6, #0]
 8009118:	43bb      	bics	r3, r7
 800911a:	d119      	bne.n	8009150 <_dtoa_r+0xa8>
 800911c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009128:	4323      	orrs	r3, r4
 800912a:	f000 85e0 	beq.w	8009cee <_dtoa_r+0xc46>
 800912e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009130:	b953      	cbnz	r3, 8009148 <_dtoa_r+0xa0>
 8009132:	4b8c      	ldr	r3, [pc, #560]	@ (8009364 <_dtoa_r+0x2bc>)
 8009134:	e021      	b.n	800917a <_dtoa_r+0xd2>
 8009136:	4b8c      	ldr	r3, [pc, #560]	@ (8009368 <_dtoa_r+0x2c0>)
 8009138:	9308      	str	r3, [sp, #32]
 800913a:	3308      	adds	r3, #8
 800913c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	9808      	ldr	r0, [sp, #32]
 8009142:	b017      	add	sp, #92	@ 0x5c
 8009144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009148:	4b86      	ldr	r3, [pc, #536]	@ (8009364 <_dtoa_r+0x2bc>)
 800914a:	9308      	str	r3, [sp, #32]
 800914c:	3303      	adds	r3, #3
 800914e:	e7f5      	b.n	800913c <_dtoa_r+0x94>
 8009150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009154:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	2300      	movs	r3, #0
 8009160:	f7f7 fc72 	bl	8000a48 <__aeabi_dcmpeq>
 8009164:	4680      	mov	r8, r0
 8009166:	b150      	cbz	r0, 800917e <_dtoa_r+0xd6>
 8009168:	2301      	movs	r3, #1
 800916a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009170:	b113      	cbz	r3, 8009178 <_dtoa_r+0xd0>
 8009172:	4b7e      	ldr	r3, [pc, #504]	@ (800936c <_dtoa_r+0x2c4>)
 8009174:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	4b7d      	ldr	r3, [pc, #500]	@ (8009370 <_dtoa_r+0x2c8>)
 800917a:	9308      	str	r3, [sp, #32]
 800917c:	e7e0      	b.n	8009140 <_dtoa_r+0x98>
 800917e:	ab14      	add	r3, sp, #80	@ 0x50
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	ab15      	add	r3, sp, #84	@ 0x54
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4658      	mov	r0, fp
 8009188:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800918c:	f001 f93e 	bl	800a40c <__d2b>
 8009190:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009194:	9003      	str	r0, [sp, #12]
 8009196:	2e00      	cmp	r6, #0
 8009198:	d07b      	beq.n	8009292 <_dtoa_r+0x1ea>
 800919a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800919e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091b0:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80091b4:	4619      	mov	r1, r3
 80091b6:	2200      	movs	r2, #0
 80091b8:	4b6e      	ldr	r3, [pc, #440]	@ (8009374 <_dtoa_r+0x2cc>)
 80091ba:	f7f7 f825 	bl	8000208 <__aeabi_dsub>
 80091be:	a360      	add	r3, pc, #384	@ (adr r3, 8009340 <_dtoa_r+0x298>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 f9d8 	bl	8000578 <__aeabi_dmul>
 80091c8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009348 <_dtoa_r+0x2a0>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 f81d 	bl	800020c <__adddf3>
 80091d2:	4604      	mov	r4, r0
 80091d4:	4630      	mov	r0, r6
 80091d6:	460d      	mov	r5, r1
 80091d8:	f7f7 f964 	bl	80004a4 <__aeabi_i2d>
 80091dc:	a35c      	add	r3, pc, #368	@ (adr r3, 8009350 <_dtoa_r+0x2a8>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f9c9 	bl	8000578 <__aeabi_dmul>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f80d 	bl	800020c <__adddf3>
 80091f2:	4604      	mov	r4, r0
 80091f4:	460d      	mov	r5, r1
 80091f6:	f7f7 fc6f 	bl	8000ad8 <__aeabi_d2iz>
 80091fa:	2200      	movs	r2, #0
 80091fc:	4607      	mov	r7, r0
 80091fe:	2300      	movs	r3, #0
 8009200:	4620      	mov	r0, r4
 8009202:	4629      	mov	r1, r5
 8009204:	f7f7 fc2a 	bl	8000a5c <__aeabi_dcmplt>
 8009208:	b140      	cbz	r0, 800921c <_dtoa_r+0x174>
 800920a:	4638      	mov	r0, r7
 800920c:	f7f7 f94a 	bl	80004a4 <__aeabi_i2d>
 8009210:	4622      	mov	r2, r4
 8009212:	462b      	mov	r3, r5
 8009214:	f7f7 fc18 	bl	8000a48 <__aeabi_dcmpeq>
 8009218:	b900      	cbnz	r0, 800921c <_dtoa_r+0x174>
 800921a:	3f01      	subs	r7, #1
 800921c:	2f16      	cmp	r7, #22
 800921e:	d855      	bhi.n	80092cc <_dtoa_r+0x224>
 8009220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009224:	4b54      	ldr	r3, [pc, #336]	@ (8009378 <_dtoa_r+0x2d0>)
 8009226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 fc15 	bl	8000a5c <__aeabi_dcmplt>
 8009232:	2800      	cmp	r0, #0
 8009234:	d04c      	beq.n	80092d0 <_dtoa_r+0x228>
 8009236:	2300      	movs	r3, #0
 8009238:	3f01      	subs	r7, #1
 800923a:	9312      	str	r3, [sp, #72]	@ 0x48
 800923c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800923e:	1b9b      	subs	r3, r3, r6
 8009240:	1e5a      	subs	r2, r3, #1
 8009242:	bf49      	itett	mi
 8009244:	f1c3 0301 	rsbmi	r3, r3, #1
 8009248:	2300      	movpl	r3, #0
 800924a:	9306      	strmi	r3, [sp, #24]
 800924c:	2300      	movmi	r3, #0
 800924e:	920a      	str	r2, [sp, #40]	@ 0x28
 8009250:	bf54      	ite	pl
 8009252:	9306      	strpl	r3, [sp, #24]
 8009254:	930a      	strmi	r3, [sp, #40]	@ 0x28
 8009256:	2f00      	cmp	r7, #0
 8009258:	db3c      	blt.n	80092d4 <_dtoa_r+0x22c>
 800925a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800925e:	443b      	add	r3, r7
 8009260:	930a      	str	r3, [sp, #40]	@ 0x28
 8009262:	2300      	movs	r3, #0
 8009264:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009268:	2b09      	cmp	r3, #9
 800926a:	f200 8089 	bhi.w	8009380 <_dtoa_r+0x2d8>
 800926e:	2b05      	cmp	r3, #5
 8009270:	bfc4      	itt	gt
 8009272:	3b04      	subgt	r3, #4
 8009274:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009278:	bfc8      	it	gt
 800927a:	2400      	movgt	r4, #0
 800927c:	f1a3 0302 	sub.w	r3, r3, #2
 8009280:	bfd8      	it	le
 8009282:	2401      	movle	r4, #1
 8009284:	2b03      	cmp	r3, #3
 8009286:	f200 8086 	bhi.w	8009396 <_dtoa_r+0x2ee>
 800928a:	e8df f003 	tbb	[pc, r3]
 800928e:	382b      	.short	0x382b
 8009290:	5736      	.short	0x5736
 8009292:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009296:	441e      	add	r6, r3
 8009298:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800929c:	2b20      	cmp	r3, #32
 800929e:	bfc1      	itttt	gt
 80092a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092a4:	409f      	lslgt	r7, r3
 80092a6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092aa:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092ae:	bfd6      	itet	le
 80092b0:	f1c3 0320 	rsble	r3, r3, #32
 80092b4:	ea47 0003 	orrgt.w	r0, r7, r3
 80092b8:	fa04 f003 	lslle.w	r0, r4, r3
 80092bc:	f7f7 f8e2 	bl	8000484 <__aeabi_ui2d>
 80092c0:	2201      	movs	r2, #1
 80092c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092c6:	3e01      	subs	r6, #1
 80092c8:	9213      	str	r2, [sp, #76]	@ 0x4c
 80092ca:	e773      	b.n	80091b4 <_dtoa_r+0x10c>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e7b4      	b.n	800923a <_dtoa_r+0x192>
 80092d0:	9012      	str	r0, [sp, #72]	@ 0x48
 80092d2:	e7b3      	b.n	800923c <_dtoa_r+0x194>
 80092d4:	9b06      	ldr	r3, [sp, #24]
 80092d6:	1bdb      	subs	r3, r3, r7
 80092d8:	9306      	str	r3, [sp, #24]
 80092da:	427b      	negs	r3, r7
 80092dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092de:	2300      	movs	r3, #0
 80092e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092e2:	e7c0      	b.n	8009266 <_dtoa_r+0x1be>
 80092e4:	2300      	movs	r3, #0
 80092e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80092e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dc56      	bgt.n	800939c <_dtoa_r+0x2f4>
 80092ee:	2301      	movs	r3, #1
 80092f0:	4699      	mov	r9, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80092f8:	e00c      	b.n	8009314 <_dtoa_r+0x26c>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7f3      	b.n	80092e6 <_dtoa_r+0x23e>
 80092fe:	2300      	movs	r3, #0
 8009300:	930e      	str	r3, [sp, #56]	@ 0x38
 8009302:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009304:	18fb      	adds	r3, r7, r3
 8009306:	f103 0901 	add.w	r9, r3, #1
 800930a:	9309      	str	r3, [sp, #36]	@ 0x24
 800930c:	464b      	mov	r3, r9
 800930e:	2b01      	cmp	r3, #1
 8009310:	bfb8      	it	lt
 8009312:	2301      	movlt	r3, #1
 8009314:	2100      	movs	r1, #0
 8009316:	2204      	movs	r2, #4
 8009318:	f8db 001c 	ldr.w	r0, [fp, #28]
 800931c:	f102 0514 	add.w	r5, r2, #20
 8009320:	429d      	cmp	r5, r3
 8009322:	d93f      	bls.n	80093a4 <_dtoa_r+0x2fc>
 8009324:	6041      	str	r1, [r0, #4]
 8009326:	4658      	mov	r0, fp
 8009328:	f000 fd44 	bl	8009db4 <_Balloc>
 800932c:	9008      	str	r0, [sp, #32]
 800932e:	2800      	cmp	r0, #0
 8009330:	d13b      	bne.n	80093aa <_dtoa_r+0x302>
 8009332:	4602      	mov	r2, r0
 8009334:	f240 11af 	movw	r1, #431	@ 0x1af
 8009338:	4b10      	ldr	r3, [pc, #64]	@ (800937c <_dtoa_r+0x2d4>)
 800933a:	e6c9      	b.n	80090d0 <_dtoa_r+0x28>
 800933c:	2301      	movs	r3, #1
 800933e:	e7df      	b.n	8009300 <_dtoa_r+0x258>
 8009340:	636f4361 	.word	0x636f4361
 8009344:	3fd287a7 	.word	0x3fd287a7
 8009348:	8b60c8b3 	.word	0x8b60c8b3
 800934c:	3fc68a28 	.word	0x3fc68a28
 8009350:	509f79fb 	.word	0x509f79fb
 8009354:	3fd34413 	.word	0x3fd34413
 8009358:	0800ae87 	.word	0x0800ae87
 800935c:	0800ae9e 	.word	0x0800ae9e
 8009360:	7ff00000 	.word	0x7ff00000
 8009364:	0800ae83 	.word	0x0800ae83
 8009368:	0800ae7a 	.word	0x0800ae7a
 800936c:	0800ae4d 	.word	0x0800ae4d
 8009370:	0800ae4c 	.word	0x0800ae4c
 8009374:	3ff80000 	.word	0x3ff80000
 8009378:	0800af98 	.word	0x0800af98
 800937c:	0800aef7 	.word	0x0800aef7
 8009380:	2401      	movs	r4, #1
 8009382:	2300      	movs	r3, #0
 8009384:	940e      	str	r4, [sp, #56]	@ 0x38
 8009386:	9320      	str	r3, [sp, #128]	@ 0x80
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	2200      	movs	r2, #0
 800938e:	4699      	mov	r9, r3
 8009390:	9309      	str	r3, [sp, #36]	@ 0x24
 8009392:	2312      	movs	r3, #18
 8009394:	e7af      	b.n	80092f6 <_dtoa_r+0x24e>
 8009396:	2301      	movs	r3, #1
 8009398:	930e      	str	r3, [sp, #56]	@ 0x38
 800939a:	e7f5      	b.n	8009388 <_dtoa_r+0x2e0>
 800939c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800939e:	4699      	mov	r9, r3
 80093a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a2:	e7b7      	b.n	8009314 <_dtoa_r+0x26c>
 80093a4:	3101      	adds	r1, #1
 80093a6:	0052      	lsls	r2, r2, #1
 80093a8:	e7b8      	b.n	800931c <_dtoa_r+0x274>
 80093aa:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093ae:	9a08      	ldr	r2, [sp, #32]
 80093b0:	f1b9 0f0e 	cmp.w	r9, #14
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	d86f      	bhi.n	8009498 <_dtoa_r+0x3f0>
 80093b8:	2c00      	cmp	r4, #0
 80093ba:	d06d      	beq.n	8009498 <_dtoa_r+0x3f0>
 80093bc:	2f00      	cmp	r7, #0
 80093be:	dd36      	ble.n	800942e <_dtoa_r+0x386>
 80093c0:	4ba1      	ldr	r3, [pc, #644]	@ (8009648 <_dtoa_r+0x5a0>)
 80093c2:	f007 020f 	and.w	r2, r7, #15
 80093c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ca:	05f8      	lsls	r0, r7, #23
 80093cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093d0:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80093d4:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093d8:	d517      	bpl.n	800940a <_dtoa_r+0x362>
 80093da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093de:	4b9b      	ldr	r3, [pc, #620]	@ (800964c <_dtoa_r+0x5a4>)
 80093e0:	f04f 0803 	mov.w	r8, #3
 80093e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093e8:	f7f7 f9f0 	bl	80007cc <__aeabi_ddiv>
 80093ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093f0:	f004 040f 	and.w	r4, r4, #15
 80093f4:	4d95      	ldr	r5, [pc, #596]	@ (800964c <_dtoa_r+0x5a4>)
 80093f6:	b95c      	cbnz	r4, 8009410 <_dtoa_r+0x368>
 80093f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009400:	f7f7 f9e4 	bl	80007cc <__aeabi_ddiv>
 8009404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009408:	e02b      	b.n	8009462 <_dtoa_r+0x3ba>
 800940a:	f04f 0802 	mov.w	r8, #2
 800940e:	e7f1      	b.n	80093f4 <_dtoa_r+0x34c>
 8009410:	07e1      	lsls	r1, r4, #31
 8009412:	d509      	bpl.n	8009428 <_dtoa_r+0x380>
 8009414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800941c:	f7f7 f8ac 	bl	8000578 <__aeabi_dmul>
 8009420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	1064      	asrs	r4, r4, #1
 800942a:	3508      	adds	r5, #8
 800942c:	e7e3      	b.n	80093f6 <_dtoa_r+0x34e>
 800942e:	f000 8107 	beq.w	8009640 <_dtoa_r+0x598>
 8009432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009436:	427c      	negs	r4, r7
 8009438:	4b83      	ldr	r3, [pc, #524]	@ (8009648 <_dtoa_r+0x5a0>)
 800943a:	f004 020f 	and.w	r2, r4, #15
 800943e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f7 f897 	bl	8000578 <__aeabi_dmul>
 800944a:	f04f 0802 	mov.w	r8, #2
 800944e:	2300      	movs	r3, #0
 8009450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009454:	4d7d      	ldr	r5, [pc, #500]	@ (800964c <_dtoa_r+0x5a4>)
 8009456:	1124      	asrs	r4, r4, #4
 8009458:	2c00      	cmp	r4, #0
 800945a:	f040 80e5 	bne.w	8009628 <_dtoa_r+0x580>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1d0      	bne.n	8009404 <_dtoa_r+0x35c>
 8009462:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009466:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 814c 	beq.w	8009706 <_dtoa_r+0x65e>
 800946e:	2200      	movs	r2, #0
 8009470:	4620      	mov	r0, r4
 8009472:	4629      	mov	r1, r5
 8009474:	4b76      	ldr	r3, [pc, #472]	@ (8009650 <_dtoa_r+0x5a8>)
 8009476:	f7f7 faf1 	bl	8000a5c <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f000 8143 	beq.w	8009706 <_dtoa_r+0x65e>
 8009480:	f1b9 0f00 	cmp.w	r9, #0
 8009484:	f000 813f 	beq.w	8009706 <_dtoa_r+0x65e>
 8009488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948a:	2b00      	cmp	r3, #0
 800948c:	f300 80e4 	bgt.w	8009658 <_dtoa_r+0x5b0>
 8009490:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009494:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009498:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800949a:	2b00      	cmp	r3, #0
 800949c:	db02      	blt.n	80094a4 <_dtoa_r+0x3fc>
 800949e:	2f0e      	cmp	r7, #14
 80094a0:	f340 8242 	ble.w	8009928 <_dtoa_r+0x880>
 80094a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094a6:	2a00      	cmp	r2, #0
 80094a8:	f040 8267 	bne.w	800997a <_dtoa_r+0x8d2>
 80094ac:	2500      	movs	r5, #0
 80094ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80094b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80094b4:	f1b8 0f00 	cmp.w	r8, #0
 80094b8:	d00d      	beq.n	80094d6 <_dtoa_r+0x42e>
 80094ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd0a      	ble.n	80094d6 <_dtoa_r+0x42e>
 80094c0:	4543      	cmp	r3, r8
 80094c2:	bfa8      	it	ge
 80094c4:	4643      	movge	r3, r8
 80094c6:	9a06      	ldr	r2, [sp, #24]
 80094c8:	eba8 0803 	sub.w	r8, r8, r3
 80094cc:	1ad2      	subs	r2, r2, r3
 80094ce:	9206      	str	r2, [sp, #24]
 80094d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094d8:	b30b      	cbz	r3, 800951e <_dtoa_r+0x476>
 80094da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 82a6 	beq.w	8009a2e <_dtoa_r+0x986>
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	f000 82a1 	beq.w	8009a2a <_dtoa_r+0x982>
 80094e8:	4629      	mov	r1, r5
 80094ea:	4622      	mov	r2, r4
 80094ec:	4658      	mov	r0, fp
 80094ee:	f000 fe17 	bl	800a120 <__pow5mult>
 80094f2:	9a03      	ldr	r2, [sp, #12]
 80094f4:	4601      	mov	r1, r0
 80094f6:	4605      	mov	r5, r0
 80094f8:	4658      	mov	r0, fp
 80094fa:	f000 fd69 	bl	8009fd0 <__multiply>
 80094fe:	9903      	ldr	r1, [sp, #12]
 8009500:	4606      	mov	r6, r0
 8009502:	4658      	mov	r0, fp
 8009504:	f000 fc96 	bl	8009e34 <_Bfree>
 8009508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800950a:	1b1b      	subs	r3, r3, r4
 800950c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800950e:	f000 8291 	beq.w	8009a34 <_dtoa_r+0x98c>
 8009512:	4631      	mov	r1, r6
 8009514:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009516:	4658      	mov	r0, fp
 8009518:	f000 fe02 	bl	800a120 <__pow5mult>
 800951c:	9003      	str	r0, [sp, #12]
 800951e:	2101      	movs	r1, #1
 8009520:	4658      	mov	r0, fp
 8009522:	f000 fd3f 	bl	8009fa4 <__i2b>
 8009526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009528:	4604      	mov	r4, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8284 	beq.w	8009a38 <_dtoa_r+0x990>
 8009530:	461a      	mov	r2, r3
 8009532:	4601      	mov	r1, r0
 8009534:	4658      	mov	r0, fp
 8009536:	f000 fdf3 	bl	800a120 <__pow5mult>
 800953a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800953c:	4604      	mov	r4, r0
 800953e:	2b01      	cmp	r3, #1
 8009540:	dc03      	bgt.n	800954a <_dtoa_r+0x4a2>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 827c 	beq.w	8009a42 <_dtoa_r+0x99a>
 800954a:	2600      	movs	r6, #0
 800954c:	6923      	ldr	r3, [r4, #16]
 800954e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009552:	6918      	ldr	r0, [r3, #16]
 8009554:	f000 fcd6 	bl	8009f04 <__hi0bits>
 8009558:	960f      	str	r6, [sp, #60]	@ 0x3c
 800955a:	f1c0 0020 	rsb	r0, r0, #32
 800955e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009560:	4418      	add	r0, r3
 8009562:	f010 001f 	ands.w	r0, r0, #31
 8009566:	f000 8291 	beq.w	8009a8c <_dtoa_r+0x9e4>
 800956a:	f1c0 0320 	rsb	r3, r0, #32
 800956e:	2b04      	cmp	r3, #4
 8009570:	f340 8281 	ble.w	8009a76 <_dtoa_r+0x9ce>
 8009574:	9b06      	ldr	r3, [sp, #24]
 8009576:	f1c0 001c 	rsb	r0, r0, #28
 800957a:	4403      	add	r3, r0
 800957c:	9306      	str	r3, [sp, #24]
 800957e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009580:	4480      	add	r8, r0
 8009582:	4403      	add	r3, r0
 8009584:	930a      	str	r3, [sp, #40]	@ 0x28
 8009586:	9b06      	ldr	r3, [sp, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	dd05      	ble.n	8009598 <_dtoa_r+0x4f0>
 800958c:	461a      	mov	r2, r3
 800958e:	4658      	mov	r0, fp
 8009590:	9903      	ldr	r1, [sp, #12]
 8009592:	f000 fe1f 	bl	800a1d4 <__lshift>
 8009596:	9003      	str	r0, [sp, #12]
 8009598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800959a:	2b00      	cmp	r3, #0
 800959c:	dd05      	ble.n	80095aa <_dtoa_r+0x502>
 800959e:	4621      	mov	r1, r4
 80095a0:	461a      	mov	r2, r3
 80095a2:	4658      	mov	r0, fp
 80095a4:	f000 fe16 	bl	800a1d4 <__lshift>
 80095a8:	4604      	mov	r4, r0
 80095aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 8276 	beq.w	8009a9e <_dtoa_r+0x9f6>
 80095b2:	4621      	mov	r1, r4
 80095b4:	9803      	ldr	r0, [sp, #12]
 80095b6:	f000 fe79 	bl	800a2ac <__mcmp>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f280 826f 	bge.w	8009a9e <_dtoa_r+0x9f6>
 80095c0:	2300      	movs	r3, #0
 80095c2:	220a      	movs	r2, #10
 80095c4:	4658      	mov	r0, fp
 80095c6:	9903      	ldr	r1, [sp, #12]
 80095c8:	f000 fc56 	bl	8009e78 <__multadd>
 80095cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ce:	1e7e      	subs	r6, r7, #1
 80095d0:	9003      	str	r0, [sp, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 825c 	beq.w	8009a90 <_dtoa_r+0x9e8>
 80095d8:	2300      	movs	r3, #0
 80095da:	4629      	mov	r1, r5
 80095dc:	220a      	movs	r2, #10
 80095de:	4658      	mov	r0, fp
 80095e0:	f000 fc4a 	bl	8009e78 <__multadd>
 80095e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e6:	4605      	mov	r5, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc03      	bgt.n	80095f4 <_dtoa_r+0x54c>
 80095ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	f300 825e 	bgt.w	8009ab0 <_dtoa_r+0xa08>
 80095f4:	f1b8 0f00 	cmp.w	r8, #0
 80095f8:	dd05      	ble.n	8009606 <_dtoa_r+0x55e>
 80095fa:	4629      	mov	r1, r5
 80095fc:	4642      	mov	r2, r8
 80095fe:	4658      	mov	r0, fp
 8009600:	f000 fde8 	bl	800a1d4 <__lshift>
 8009604:	4605      	mov	r5, r0
 8009606:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 82d0 	beq.w	8009bae <_dtoa_r+0xb06>
 800960e:	4658      	mov	r0, fp
 8009610:	6869      	ldr	r1, [r5, #4]
 8009612:	f000 fbcf 	bl	8009db4 <_Balloc>
 8009616:	4607      	mov	r7, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	f040 827f 	bne.w	8009b1c <_dtoa_r+0xa74>
 800961e:	4602      	mov	r2, r0
 8009620:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009624:	4b0b      	ldr	r3, [pc, #44]	@ (8009654 <_dtoa_r+0x5ac>)
 8009626:	e553      	b.n	80090d0 <_dtoa_r+0x28>
 8009628:	07e2      	lsls	r2, r4, #31
 800962a:	d506      	bpl.n	800963a <_dtoa_r+0x592>
 800962c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009630:	f7f6 ffa2 	bl	8000578 <__aeabi_dmul>
 8009634:	2301      	movs	r3, #1
 8009636:	f108 0801 	add.w	r8, r8, #1
 800963a:	1064      	asrs	r4, r4, #1
 800963c:	3508      	adds	r5, #8
 800963e:	e70b      	b.n	8009458 <_dtoa_r+0x3b0>
 8009640:	f04f 0802 	mov.w	r8, #2
 8009644:	e70d      	b.n	8009462 <_dtoa_r+0x3ba>
 8009646:	bf00      	nop
 8009648:	0800af98 	.word	0x0800af98
 800964c:	0800af70 	.word	0x0800af70
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	0800aef7 	.word	0x0800aef7
 8009658:	4620      	mov	r0, r4
 800965a:	2200      	movs	r2, #0
 800965c:	4629      	mov	r1, r5
 800965e:	4bac      	ldr	r3, [pc, #688]	@ (8009910 <_dtoa_r+0x868>)
 8009660:	f7f6 ff8a 	bl	8000578 <__aeabi_dmul>
 8009664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009668:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800966a:	1e7e      	subs	r6, r7, #1
 800966c:	f108 0801 	add.w	r8, r8, #1
 8009670:	4640      	mov	r0, r8
 8009672:	f7f6 ff17 	bl	80004a4 <__aeabi_i2d>
 8009676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967a:	f7f6 ff7d 	bl	8000578 <__aeabi_dmul>
 800967e:	4ba5      	ldr	r3, [pc, #660]	@ (8009914 <_dtoa_r+0x86c>)
 8009680:	2200      	movs	r2, #0
 8009682:	f7f6 fdc3 	bl	800020c <__adddf3>
 8009686:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
 800968a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800968e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009690:	2c00      	cmp	r4, #0
 8009692:	d13b      	bne.n	800970c <_dtoa_r+0x664>
 8009694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009698:	2200      	movs	r2, #0
 800969a:	4b9f      	ldr	r3, [pc, #636]	@ (8009918 <_dtoa_r+0x870>)
 800969c:	f7f6 fdb4 	bl	8000208 <__aeabi_dsub>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ac:	f7f7 f9f4 	bl	8000a98 <__aeabi_dcmpgt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f040 8157 	bne.w	8009964 <_dtoa_r+0x8bc>
 80096b6:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	@ 0x40
 80096ba:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096c2:	f7f7 f9cb 	bl	8000a5c <__aeabi_dcmplt>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f43f aee2 	beq.w	8009490 <_dtoa_r+0x3e8>
 80096cc:	2400      	movs	r4, #0
 80096ce:	4625      	mov	r5, r4
 80096d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096d2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80096d6:	43de      	mvns	r6, r3
 80096d8:	f04f 0800 	mov.w	r8, #0
 80096dc:	4621      	mov	r1, r4
 80096de:	4658      	mov	r0, fp
 80096e0:	f000 fba8 	bl	8009e34 <_Bfree>
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	f000 80a9 	beq.w	800983c <_dtoa_r+0x794>
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	d005      	beq.n	80096fc <_dtoa_r+0x654>
 80096f0:	45a8      	cmp	r8, r5
 80096f2:	d003      	beq.n	80096fc <_dtoa_r+0x654>
 80096f4:	4641      	mov	r1, r8
 80096f6:	4658      	mov	r0, fp
 80096f8:	f000 fb9c 	bl	8009e34 <_Bfree>
 80096fc:	4629      	mov	r1, r5
 80096fe:	4658      	mov	r0, fp
 8009700:	f000 fb98 	bl	8009e34 <_Bfree>
 8009704:	e09a      	b.n	800983c <_dtoa_r+0x794>
 8009706:	463e      	mov	r6, r7
 8009708:	464c      	mov	r4, r9
 800970a:	e7b1      	b.n	8009670 <_dtoa_r+0x5c8>
 800970c:	4b83      	ldr	r3, [pc, #524]	@ (800991c <_dtoa_r+0x874>)
 800970e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009712:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	441c      	add	r4, r3
 800971a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800971c:	2b00      	cmp	r3, #0
 800971e:	d04a      	beq.n	80097b6 <_dtoa_r+0x70e>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	2000      	movs	r0, #0
 8009726:	497e      	ldr	r1, [pc, #504]	@ (8009920 <_dtoa_r+0x878>)
 8009728:	f7f7 f850 	bl	80007cc <__aeabi_ddiv>
 800972c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009730:	f7f6 fd6a 	bl	8000208 <__aeabi_dsub>
 8009734:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009738:	f8dd a020 	ldr.w	sl, [sp, #32]
 800973c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009740:	f7f7 f9ca 	bl	8000ad8 <__aeabi_d2iz>
 8009744:	4605      	mov	r5, r0
 8009746:	f7f6 fead 	bl	80004a4 <__aeabi_i2d>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009752:	f7f6 fd59 	bl	8000208 <__aeabi_dsub>
 8009756:	3530      	adds	r5, #48	@ 0x30
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009760:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009764:	f80a 5b01 	strb.w	r5, [sl], #1
 8009768:	f7f7 f996 	bl	8000a98 <__aeabi_dcmpgt>
 800976c:	2800      	cmp	r0, #0
 800976e:	d165      	bne.n	800983c <_dtoa_r+0x794>
 8009770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009774:	2000      	movs	r0, #0
 8009776:	496b      	ldr	r1, [pc, #428]	@ (8009924 <_dtoa_r+0x87c>)
 8009778:	f7f6 fd46 	bl	8000208 <__aeabi_dsub>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009784:	f7f7 f988 	bl	8000a98 <__aeabi_dcmpgt>
 8009788:	2800      	cmp	r0, #0
 800978a:	f040 810d 	bne.w	80099a8 <_dtoa_r+0x900>
 800978e:	45a2      	cmp	sl, r4
 8009790:	f000 80ea 	beq.w	8009968 <_dtoa_r+0x8c0>
 8009794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009798:	2200      	movs	r2, #0
 800979a:	4b5d      	ldr	r3, [pc, #372]	@ (8009910 <_dtoa_r+0x868>)
 800979c:	f7f6 feec 	bl	8000578 <__aeabi_dmul>
 80097a0:	2200      	movs	r2, #0
 80097a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097aa:	4b59      	ldr	r3, [pc, #356]	@ (8009910 <_dtoa_r+0x868>)
 80097ac:	f7f6 fee4 	bl	8000578 <__aeabi_dmul>
 80097b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b4:	e7c2      	b.n	800973c <_dtoa_r+0x694>
 80097b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097ba:	f7f6 fedd 	bl	8000578 <__aeabi_dmul>
 80097be:	46a0      	mov	r8, r4
 80097c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097c4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80097c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097cc:	f7f7 f984 	bl	8000ad8 <__aeabi_d2iz>
 80097d0:	4605      	mov	r5, r0
 80097d2:	f7f6 fe67 	bl	80004a4 <__aeabi_i2d>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097de:	f7f6 fd13 	bl	8000208 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	3530      	adds	r5, #48	@ 0x30
 80097e8:	f80a 5b01 	strb.w	r5, [sl], #1
 80097ec:	45a2      	cmp	sl, r4
 80097ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	d123      	bne.n	8009840 <_dtoa_r+0x798>
 80097f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097fc:	4b48      	ldr	r3, [pc, #288]	@ (8009920 <_dtoa_r+0x878>)
 80097fe:	f7f6 fd05 	bl	800020c <__adddf3>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980a:	f7f7 f945 	bl	8000a98 <__aeabi_dcmpgt>
 800980e:	2800      	cmp	r0, #0
 8009810:	f040 80ca 	bne.w	80099a8 <_dtoa_r+0x900>
 8009814:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009818:	2000      	movs	r0, #0
 800981a:	4941      	ldr	r1, [pc, #260]	@ (8009920 <_dtoa_r+0x878>)
 800981c:	f7f6 fcf4 	bl	8000208 <__aeabi_dsub>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009828:	f7f7 f918 	bl	8000a5c <__aeabi_dcmplt>
 800982c:	b170      	cbz	r0, 800984c <_dtoa_r+0x7a4>
 800982e:	46c2      	mov	sl, r8
 8009830:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8009834:	f108 38ff 	add.w	r8, r8, #4294967295
 8009838:	2b30      	cmp	r3, #48	@ 0x30
 800983a:	d0f8      	beq.n	800982e <_dtoa_r+0x786>
 800983c:	4637      	mov	r7, r6
 800983e:	e055      	b.n	80098ec <_dtoa_r+0x844>
 8009840:	4b33      	ldr	r3, [pc, #204]	@ (8009910 <_dtoa_r+0x868>)
 8009842:	f7f6 fe99 	bl	8000578 <__aeabi_dmul>
 8009846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800984a:	e7bd      	b.n	80097c8 <_dtoa_r+0x720>
 800984c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009850:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009856:	2b00      	cmp	r3, #0
 8009858:	f6ff ae28 	blt.w	80094ac <_dtoa_r+0x404>
 800985c:	2f0e      	cmp	r7, #14
 800985e:	f73f ae25 	bgt.w	80094ac <_dtoa_r+0x404>
 8009862:	4b2e      	ldr	r3, [pc, #184]	@ (800991c <_dtoa_r+0x874>)
 8009864:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009868:	e9d3 3400 	ldrd	r3, r4, [r3]
 800986c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009870:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009872:	2b00      	cmp	r3, #0
 8009874:	da02      	bge.n	800987c <_dtoa_r+0x7d4>
 8009876:	f1b9 0f00 	cmp.w	r9, #0
 800987a:	d064      	beq.n	8009946 <_dtoa_r+0x89e>
 800987c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009880:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009884:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 ff9e 	bl	80007cc <__aeabi_ddiv>
 8009890:	f7f7 f922 	bl	8000ad8 <__aeabi_d2iz>
 8009894:	4606      	mov	r6, r0
 8009896:	f7f6 fe05 	bl	80004a4 <__aeabi_i2d>
 800989a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800989e:	f7f6 fe6b 	bl	8000578 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fcad 	bl	8000208 <__aeabi_dsub>
 80098ae:	f106 0430 	add.w	r4, r6, #48	@ 0x30
 80098b2:	f80a 4b01 	strb.w	r4, [sl], #1
 80098b6:	9c08      	ldr	r4, [sp, #32]
 80098b8:	4602      	mov	r2, r0
 80098ba:	ebaa 0404 	sub.w	r4, sl, r4
 80098be:	45a1      	cmp	r9, r4
 80098c0:	460b      	mov	r3, r1
 80098c2:	f040 8082 	bne.w	80099ca <_dtoa_r+0x922>
 80098c6:	f7f6 fca1 	bl	800020c <__adddf3>
 80098ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	f7f7 f8e1 	bl	8000a98 <__aeabi_dcmpgt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d165      	bne.n	80099a6 <_dtoa_r+0x8fe>
 80098da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f7 f8b1 	bl	8000a48 <__aeabi_dcmpeq>
 80098e6:	b108      	cbz	r0, 80098ec <_dtoa_r+0x844>
 80098e8:	07f3      	lsls	r3, r6, #31
 80098ea:	d45c      	bmi.n	80099a6 <_dtoa_r+0x8fe>
 80098ec:	4658      	mov	r0, fp
 80098ee:	9903      	ldr	r1, [sp, #12]
 80098f0:	f000 faa0 	bl	8009e34 <_Bfree>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f88a 3000 	strb.w	r3, [sl]
 80098fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80098fc:	3701      	adds	r7, #1
 80098fe:	601f      	str	r7, [r3, #0]
 8009900:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009902:	2b00      	cmp	r3, #0
 8009904:	f43f ac1c 	beq.w	8009140 <_dtoa_r+0x98>
 8009908:	f8c3 a000 	str.w	sl, [r3]
 800990c:	e418      	b.n	8009140 <_dtoa_r+0x98>
 800990e:	bf00      	nop
 8009910:	40240000 	.word	0x40240000
 8009914:	401c0000 	.word	0x401c0000
 8009918:	40140000 	.word	0x40140000
 800991c:	0800af98 	.word	0x0800af98
 8009920:	3fe00000 	.word	0x3fe00000
 8009924:	3ff00000 	.word	0x3ff00000
 8009928:	4ba2      	ldr	r3, [pc, #648]	@ (8009bb4 <_dtoa_r+0xb0c>)
 800992a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800992e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009932:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009936:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009938:	2b00      	cmp	r3, #0
 800993a:	da9f      	bge.n	800987c <_dtoa_r+0x7d4>
 800993c:	f1b9 0f00 	cmp.w	r9, #0
 8009940:	dc9c      	bgt.n	800987c <_dtoa_r+0x7d4>
 8009942:	f47f aec3 	bne.w	80096cc <_dtoa_r+0x624>
 8009946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800994a:	2200      	movs	r2, #0
 800994c:	4b9a      	ldr	r3, [pc, #616]	@ (8009bb8 <_dtoa_r+0xb10>)
 800994e:	f7f6 fe13 	bl	8000578 <__aeabi_dmul>
 8009952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009956:	f7f7 f895 	bl	8000a84 <__aeabi_dcmpge>
 800995a:	4604      	mov	r4, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	f47f aeb5 	bne.w	80096cc <_dtoa_r+0x624>
 8009962:	463e      	mov	r6, r7
 8009964:	4625      	mov	r5, r4
 8009966:	e0b4      	b.n	8009ad2 <_dtoa_r+0xa2a>
 8009968:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800996c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009970:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009972:	2b00      	cmp	r3, #0
 8009974:	db01      	blt.n	800997a <_dtoa_r+0x8d2>
 8009976:	2f0e      	cmp	r7, #14
 8009978:	ddd6      	ble.n	8009928 <_dtoa_r+0x880>
 800997a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800997c:	2a01      	cmp	r2, #1
 800997e:	dc36      	bgt.n	80099ee <_dtoa_r+0x946>
 8009980:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009982:	b382      	cbz	r2, 80099e6 <_dtoa_r+0x93e>
 8009984:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009988:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800998a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800998e:	9a06      	ldr	r2, [sp, #24]
 8009990:	2101      	movs	r1, #1
 8009992:	441a      	add	r2, r3
 8009994:	9206      	str	r2, [sp, #24]
 8009996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009998:	4658      	mov	r0, fp
 800999a:	441a      	add	r2, r3
 800999c:	920a      	str	r2, [sp, #40]	@ 0x28
 800999e:	f000 fb01 	bl	8009fa4 <__i2b>
 80099a2:	4605      	mov	r5, r0
 80099a4:	e586      	b.n	80094b4 <_dtoa_r+0x40c>
 80099a6:	463e      	mov	r6, r7
 80099a8:	4653      	mov	r3, sl
 80099aa:	469a      	mov	sl, r3
 80099ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099b0:	2a39      	cmp	r2, #57	@ 0x39
 80099b2:	d106      	bne.n	80099c2 <_dtoa_r+0x91a>
 80099b4:	9a08      	ldr	r2, [sp, #32]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d1f7      	bne.n	80099aa <_dtoa_r+0x902>
 80099ba:	2230      	movs	r2, #48	@ 0x30
 80099bc:	9908      	ldr	r1, [sp, #32]
 80099be:	3601      	adds	r6, #1
 80099c0:	700a      	strb	r2, [r1, #0]
 80099c2:	781a      	ldrb	r2, [r3, #0]
 80099c4:	3201      	adds	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e738      	b.n	800983c <_dtoa_r+0x794>
 80099ca:	2200      	movs	r2, #0
 80099cc:	4b7b      	ldr	r3, [pc, #492]	@ (8009bbc <_dtoa_r+0xb14>)
 80099ce:	f7f6 fdd3 	bl	8000578 <__aeabi_dmul>
 80099d2:	2200      	movs	r2, #0
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	f7f7 f835 	bl	8000a48 <__aeabi_dcmpeq>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f af50 	beq.w	8009884 <_dtoa_r+0x7dc>
 80099e4:	e782      	b.n	80098ec <_dtoa_r+0x844>
 80099e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099ec:	e7cc      	b.n	8009988 <_dtoa_r+0x8e0>
 80099ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	db08      	blt.n	8009a0a <_dtoa_r+0x962>
 80099f8:	f1b9 0f00 	cmp.w	r9, #0
 80099fc:	eba3 0404 	sub.w	r4, r3, r4
 8009a00:	db0e      	blt.n	8009a20 <_dtoa_r+0x978>
 8009a02:	464b      	mov	r3, r9
 8009a04:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009a08:	e7c1      	b.n	800998e <_dtoa_r+0x8e6>
 8009a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a0e:	1ae3      	subs	r3, r4, r3
 8009a10:	441a      	add	r2, r3
 8009a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a14:	464b      	mov	r3, r9
 8009a16:	2400      	movs	r4, #0
 8009a18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009a1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a1e:	e7b6      	b.n	800998e <_dtoa_r+0x8e6>
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	eba3 0809 	sub.w	r8, r3, r9
 8009a26:	2300      	movs	r3, #0
 8009a28:	e7b1      	b.n	800998e <_dtoa_r+0x8e6>
 8009a2a:	9e03      	ldr	r6, [sp, #12]
 8009a2c:	e571      	b.n	8009512 <_dtoa_r+0x46a>
 8009a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a30:	9903      	ldr	r1, [sp, #12]
 8009a32:	e570      	b.n	8009516 <_dtoa_r+0x46e>
 8009a34:	9603      	str	r6, [sp, #12]
 8009a36:	e572      	b.n	800951e <_dtoa_r+0x476>
 8009a38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	dc17      	bgt.n	8009a6e <_dtoa_r+0x9c6>
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	b9ab      	cbnz	r3, 8009a6e <_dtoa_r+0x9c6>
 8009a42:	9b05      	ldr	r3, [sp, #20]
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	b99b      	cbnz	r3, 8009a72 <_dtoa_r+0x9ca>
 8009a4a:	9b05      	ldr	r3, [sp, #20]
 8009a4c:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8009a50:	0d36      	lsrs	r6, r6, #20
 8009a52:	0536      	lsls	r6, r6, #20
 8009a54:	b136      	cbz	r6, 8009a64 <_dtoa_r+0x9bc>
 8009a56:	2601      	movs	r6, #1
 8009a58:	9b06      	ldr	r3, [sp, #24]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	9306      	str	r3, [sp, #24]
 8009a5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a60:	3301      	adds	r3, #1
 8009a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f47f ad70 	bne.w	800954c <_dtoa_r+0x4a4>
 8009a6c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8009a6e:	2001      	movs	r0, #1
 8009a70:	e575      	b.n	800955e <_dtoa_r+0x4b6>
 8009a72:	2600      	movs	r6, #0
 8009a74:	e7f6      	b.n	8009a64 <_dtoa_r+0x9bc>
 8009a76:	f43f ad86 	beq.w	8009586 <_dtoa_r+0x4de>
 8009a7a:	9a06      	ldr	r2, [sp, #24]
 8009a7c:	331c      	adds	r3, #28
 8009a7e:	441a      	add	r2, r3
 8009a80:	9206      	str	r2, [sp, #24]
 8009a82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a84:	4498      	add	r8, r3
 8009a86:	441a      	add	r2, r3
 8009a88:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a8a:	e57c      	b.n	8009586 <_dtoa_r+0x4de>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	e7f4      	b.n	8009a7a <_dtoa_r+0x9d2>
 8009a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dc2b      	bgt.n	8009aee <_dtoa_r+0xa46>
 8009a96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	dc09      	bgt.n	8009ab0 <_dtoa_r+0xa08>
 8009a9c:	e027      	b.n	8009aee <_dtoa_r+0xa46>
 8009a9e:	f1b9 0f00 	cmp.w	r9, #0
 8009aa2:	dc1d      	bgt.n	8009ae0 <_dtoa_r+0xa38>
 8009aa4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	dd1a      	ble.n	8009ae0 <_dtoa_r+0xa38>
 8009aaa:	463e      	mov	r6, r7
 8009aac:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8009ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f47f ae0c 	bne.w	80096d0 <_dtoa_r+0x628>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	2205      	movs	r2, #5
 8009abc:	4658      	mov	r0, fp
 8009abe:	f000 f9db 	bl	8009e78 <__multadd>
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	9803      	ldr	r0, [sp, #12]
 8009ac8:	f000 fbf0 	bl	800a2ac <__mcmp>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f77f adff 	ble.w	80096d0 <_dtoa_r+0x628>
 8009ad2:	2331      	movs	r3, #49	@ 0x31
 8009ad4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009ad8:	3601      	adds	r6, #1
 8009ada:	f80a 3b01 	strb.w	r3, [sl], #1
 8009ade:	e5fb      	b.n	80096d8 <_dtoa_r+0x630>
 8009ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae2:	463e      	mov	r6, r7
 8009ae4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f47f ad83 	bne.w	80095f4 <_dtoa_r+0x54c>
 8009aee:	9f08      	ldr	r7, [sp, #32]
 8009af0:	4621      	mov	r1, r4
 8009af2:	9803      	ldr	r0, [sp, #12]
 8009af4:	f7ff fa4d 	bl	8008f92 <quorem>
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	f100 0930 	add.w	r9, r0, #48	@ 0x30
 8009afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b00:	f807 9b01 	strb.w	r9, [r7], #1
 8009b04:	1afb      	subs	r3, r7, r3
 8009b06:	429a      	cmp	r2, r3
 8009b08:	f340 80cb 	ble.w	8009ca2 <_dtoa_r+0xbfa>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	220a      	movs	r2, #10
 8009b10:	4658      	mov	r0, fp
 8009b12:	9903      	ldr	r1, [sp, #12]
 8009b14:	f000 f9b0 	bl	8009e78 <__multadd>
 8009b18:	9003      	str	r0, [sp, #12]
 8009b1a:	e7e9      	b.n	8009af0 <_dtoa_r+0xa48>
 8009b1c:	692a      	ldr	r2, [r5, #16]
 8009b1e:	f105 010c 	add.w	r1, r5, #12
 8009b22:	3202      	adds	r2, #2
 8009b24:	0092      	lsls	r2, r2, #2
 8009b26:	300c      	adds	r0, #12
 8009b28:	f7ff fa25 	bl	8008f76 <memcpy>
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4639      	mov	r1, r7
 8009b30:	4658      	mov	r0, fp
 8009b32:	f000 fb4f 	bl	800a1d4 <__lshift>
 8009b36:	46a8      	mov	r8, r5
 8009b38:	4605      	mov	r5, r0
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	f103 0a01 	add.w	sl, r3, #1
 8009b40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b44:	4413      	add	r3, r2
 8009b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b50:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b54:	4621      	mov	r1, r4
 8009b56:	9803      	ldr	r0, [sp, #12]
 8009b58:	9306      	str	r3, [sp, #24]
 8009b5a:	f7ff fa1a 	bl	8008f92 <quorem>
 8009b5e:	4641      	mov	r1, r8
 8009b60:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b62:	f100 0930 	add.w	r9, r0, #48	@ 0x30
 8009b66:	9803      	ldr	r0, [sp, #12]
 8009b68:	f000 fba0 	bl	800a2ac <__mcmp>
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4607      	mov	r7, r0
 8009b72:	4658      	mov	r0, fp
 8009b74:	f000 fbb6 	bl	800a2e4 <__mdiff>
 8009b78:	68c2      	ldr	r2, [r0, #12]
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	b302      	cbz	r2, 8009bc0 <_dtoa_r+0xb18>
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 f958 	bl	8009e34 <_Bfree>
 8009b84:	2f00      	cmp	r7, #0
 8009b86:	da3a      	bge.n	8009bfe <_dtoa_r+0xb56>
 8009b88:	2201      	movs	r2, #1
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	f000 fb21 	bl	800a1d4 <__lshift>
 8009b92:	4621      	mov	r1, r4
 8009b94:	9003      	str	r0, [sp, #12]
 8009b96:	f000 fb89 	bl	800a2ac <__mcmp>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	dc03      	bgt.n	8009ba6 <_dtoa_r+0xafe>
 8009b9e:	d129      	bne.n	8009bf4 <_dtoa_r+0xb4c>
 8009ba0:	f019 0f01 	tst.w	r9, #1
 8009ba4:	d026      	beq.n	8009bf4 <_dtoa_r+0xb4c>
 8009ba6:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
 8009baa:	d11d      	bne.n	8009be8 <_dtoa_r+0xb40>
 8009bac:	e032      	b.n	8009c14 <_dtoa_r+0xb6c>
 8009bae:	4628      	mov	r0, r5
 8009bb0:	e7c1      	b.n	8009b36 <_dtoa_r+0xa8e>
 8009bb2:	bf00      	nop
 8009bb4:	0800af98 	.word	0x0800af98
 8009bb8:	40140000 	.word	0x40140000
 8009bbc:	40240000 	.word	0x40240000
 8009bc0:	900e      	str	r0, [sp, #56]	@ 0x38
 8009bc2:	9803      	ldr	r0, [sp, #12]
 8009bc4:	f000 fb72 	bl	800a2ac <__mcmp>
 8009bc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bca:	900c      	str	r0, [sp, #48]	@ 0x30
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 f931 	bl	8009e34 <_Bfree>
 8009bd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009bd4:	bb5a      	cbnz	r2, 8009c2e <_dtoa_r+0xb86>
 8009bd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bd8:	b953      	cbnz	r3, 8009bf0 <_dtoa_r+0xb48>
 8009bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bdc:	b943      	cbnz	r3, 8009bf0 <_dtoa_r+0xb48>
 8009bde:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
 8009be2:	d017      	beq.n	8009c14 <_dtoa_r+0xb6c>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	dd05      	ble.n	8009bf4 <_dtoa_r+0xb4c>
 8009be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bea:	f103 0931 	add.w	r9, r3, #49	@ 0x31
 8009bee:	e001      	b.n	8009bf4 <_dtoa_r+0xb4c>
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	da2a      	bge.n	8009c4a <_dtoa_r+0xba2>
 8009bf4:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009bf8:	f80a 9b01 	strb.w	r9, [sl], #1
 8009bfc:	e56e      	b.n	80096dc <_dtoa_r+0x634>
 8009bfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c00:	433b      	orrs	r3, r7
 8009c02:	d104      	bne.n	8009c0e <_dtoa_r+0xb66>
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0bc      	beq.n	8009b88 <_dtoa_r+0xae0>
 8009c0e:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
 8009c12:	d136      	bne.n	8009c82 <_dtoa_r+0xbda>
 8009c14:	2339      	movs	r3, #57	@ 0x39
 8009c16:	9f06      	ldr	r7, [sp, #24]
 8009c18:	f807 3b01 	strb.w	r3, [r7], #1
 8009c1c:	46ba      	mov	sl, r7
 8009c1e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8009c22:	3f01      	subs	r7, #1
 8009c24:	2b39      	cmp	r3, #57	@ 0x39
 8009c26:	d05a      	beq.n	8009cde <_dtoa_r+0xc36>
 8009c28:	3301      	adds	r3, #1
 8009c2a:	703b      	strb	r3, [r7, #0]
 8009c2c:	e556      	b.n	80096dc <_dtoa_r+0x634>
 8009c2e:	2f00      	cmp	r7, #0
 8009c30:	db06      	blt.n	8009c40 <_dtoa_r+0xb98>
 8009c32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c34:	433b      	orrs	r3, r7
 8009c36:	d106      	bne.n	8009c46 <_dtoa_r+0xb9e>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	b913      	cbnz	r3, 8009c46 <_dtoa_r+0xb9e>
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	dca1      	bgt.n	8009b88 <_dtoa_r+0xae0>
 8009c44:	e7d6      	b.n	8009bf4 <_dtoa_r+0xb4c>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	dce1      	bgt.n	8009c0e <_dtoa_r+0xb66>
 8009c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c4c:	4657      	mov	r7, sl
 8009c4e:	4553      	cmp	r3, sl
 8009c50:	f80a 9c01 	strb.w	r9, [sl, #-1]
 8009c54:	d02e      	beq.n	8009cb4 <_dtoa_r+0xc0c>
 8009c56:	2300      	movs	r3, #0
 8009c58:	220a      	movs	r2, #10
 8009c5a:	9903      	ldr	r1, [sp, #12]
 8009c5c:	4658      	mov	r0, fp
 8009c5e:	f000 f90b 	bl	8009e78 <__multadd>
 8009c62:	45a8      	cmp	r8, r5
 8009c64:	9003      	str	r0, [sp, #12]
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	f04f 020a 	mov.w	r2, #10
 8009c6e:	4641      	mov	r1, r8
 8009c70:	4658      	mov	r0, fp
 8009c72:	d10b      	bne.n	8009c8c <_dtoa_r+0xbe4>
 8009c74:	f000 f900 	bl	8009e78 <__multadd>
 8009c78:	4680      	mov	r8, r0
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	f10a 0a01 	add.w	sl, sl, #1
 8009c80:	e766      	b.n	8009b50 <_dtoa_r+0xaa8>
 8009c82:	f8dd a018 	ldr.w	sl, [sp, #24]
 8009c86:	f109 0901 	add.w	r9, r9, #1
 8009c8a:	e7b5      	b.n	8009bf8 <_dtoa_r+0xb50>
 8009c8c:	f000 f8f4 	bl	8009e78 <__multadd>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4680      	mov	r8, r0
 8009c94:	2300      	movs	r3, #0
 8009c96:	220a      	movs	r2, #10
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f000 f8ed 	bl	8009e78 <__multadd>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	e7ec      	b.n	8009c7c <_dtoa_r+0xbd4>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	f04f 0800 	mov.w	r8, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bfcc      	ite	gt
 8009cac:	461f      	movgt	r7, r3
 8009cae:	2701      	movle	r7, #1
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	441f      	add	r7, r3
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	9903      	ldr	r1, [sp, #12]
 8009cb8:	4658      	mov	r0, fp
 8009cba:	f000 fa8b 	bl	800a1d4 <__lshift>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	9003      	str	r0, [sp, #12]
 8009cc2:	f000 faf3 	bl	800a2ac <__mcmp>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	dca8      	bgt.n	8009c1c <_dtoa_r+0xb74>
 8009cca:	d102      	bne.n	8009cd2 <_dtoa_r+0xc2a>
 8009ccc:	f019 0f01 	tst.w	r9, #1
 8009cd0:	d1a4      	bne.n	8009c1c <_dtoa_r+0xb74>
 8009cd2:	46ba      	mov	sl, r7
 8009cd4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
 8009cd8:	2b30      	cmp	r3, #48	@ 0x30
 8009cda:	d0fa      	beq.n	8009cd2 <_dtoa_r+0xc2a>
 8009cdc:	e4fe      	b.n	80096dc <_dtoa_r+0x634>
 8009cde:	9b08      	ldr	r3, [sp, #32]
 8009ce0:	42bb      	cmp	r3, r7
 8009ce2:	d19b      	bne.n	8009c1c <_dtoa_r+0xb74>
 8009ce4:	2331      	movs	r3, #49	@ 0x31
 8009ce6:	9a08      	ldr	r2, [sp, #32]
 8009ce8:	3601      	adds	r6, #1
 8009cea:	7013      	strb	r3, [r2, #0]
 8009cec:	e4f6      	b.n	80096dc <_dtoa_r+0x634>
 8009cee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f47f aa20 	bne.w	8009136 <_dtoa_r+0x8e>
 8009cf6:	4b01      	ldr	r3, [pc, #4]	@ (8009cfc <_dtoa_r+0xc54>)
 8009cf8:	f7ff ba3f 	b.w	800917a <_dtoa_r+0xd2>
 8009cfc:	0800ae7a 	.word	0x0800ae7a

08009d00 <_free_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4605      	mov	r5, r0
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d040      	beq.n	8009d8a <_free_r+0x8a>
 8009d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d0c:	1f0c      	subs	r4, r1, #4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	bfb8      	it	lt
 8009d12:	18e4      	addlt	r4, r4, r3
 8009d14:	f7fe fa06 	bl	8008124 <__malloc_lock>
 8009d18:	4a1c      	ldr	r2, [pc, #112]	@ (8009d8c <_free_r+0x8c>)
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	b933      	cbnz	r3, 8009d2c <_free_r+0x2c>
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	6014      	str	r4, [r2, #0]
 8009d22:	4628      	mov	r0, r5
 8009d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d28:	f7fe ba02 	b.w	8008130 <__malloc_unlock>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d908      	bls.n	8009d42 <_free_r+0x42>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	1821      	adds	r1, r4, r0
 8009d34:	428b      	cmp	r3, r1
 8009d36:	bf01      	itttt	eq
 8009d38:	6819      	ldreq	r1, [r3, #0]
 8009d3a:	685b      	ldreq	r3, [r3, #4]
 8009d3c:	1809      	addeq	r1, r1, r0
 8009d3e:	6021      	streq	r1, [r4, #0]
 8009d40:	e7ed      	b.n	8009d1e <_free_r+0x1e>
 8009d42:	461a      	mov	r2, r3
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	b10b      	cbz	r3, 8009d4c <_free_r+0x4c>
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	d9fa      	bls.n	8009d42 <_free_r+0x42>
 8009d4c:	6811      	ldr	r1, [r2, #0]
 8009d4e:	1850      	adds	r0, r2, r1
 8009d50:	42a0      	cmp	r0, r4
 8009d52:	d10b      	bne.n	8009d6c <_free_r+0x6c>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	4401      	add	r1, r0
 8009d58:	1850      	adds	r0, r2, r1
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	d1e0      	bne.n	8009d22 <_free_r+0x22>
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4408      	add	r0, r1
 8009d66:	6010      	str	r0, [r2, #0]
 8009d68:	6053      	str	r3, [r2, #4]
 8009d6a:	e7da      	b.n	8009d22 <_free_r+0x22>
 8009d6c:	d902      	bls.n	8009d74 <_free_r+0x74>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	e7d6      	b.n	8009d22 <_free_r+0x22>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	1821      	adds	r1, r4, r0
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	bf01      	itttt	eq
 8009d7c:	6819      	ldreq	r1, [r3, #0]
 8009d7e:	685b      	ldreq	r3, [r3, #4]
 8009d80:	1809      	addeq	r1, r1, r0
 8009d82:	6021      	streq	r1, [r4, #0]
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	6054      	str	r4, [r2, #4]
 8009d88:	e7cb      	b.n	8009d22 <_free_r+0x22>
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	20003b94 	.word	0x20003b94

08009d90 <__ascii_mbtowc>:
 8009d90:	b082      	sub	sp, #8
 8009d92:	b901      	cbnz	r1, 8009d96 <__ascii_mbtowc+0x6>
 8009d94:	a901      	add	r1, sp, #4
 8009d96:	b142      	cbz	r2, 8009daa <__ascii_mbtowc+0x1a>
 8009d98:	b14b      	cbz	r3, 8009dae <__ascii_mbtowc+0x1e>
 8009d9a:	7813      	ldrb	r3, [r2, #0]
 8009d9c:	600b      	str	r3, [r1, #0]
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	1e10      	subs	r0, r2, #0
 8009da2:	bf18      	it	ne
 8009da4:	2001      	movne	r0, #1
 8009da6:	b002      	add	sp, #8
 8009da8:	4770      	bx	lr
 8009daa:	4610      	mov	r0, r2
 8009dac:	e7fb      	b.n	8009da6 <__ascii_mbtowc+0x16>
 8009dae:	f06f 0001 	mvn.w	r0, #1
 8009db2:	e7f8      	b.n	8009da6 <__ascii_mbtowc+0x16>

08009db4 <_Balloc>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	69c6      	ldr	r6, [r0, #28]
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	b976      	cbnz	r6, 8009ddc <_Balloc+0x28>
 8009dbe:	2010      	movs	r0, #16
 8009dc0:	f7fe f8fe 	bl	8007fc0 <malloc>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	61e0      	str	r0, [r4, #28]
 8009dc8:	b920      	cbnz	r0, 8009dd4 <_Balloc+0x20>
 8009dca:	216b      	movs	r1, #107	@ 0x6b
 8009dcc:	4b17      	ldr	r3, [pc, #92]	@ (8009e2c <_Balloc+0x78>)
 8009dce:	4818      	ldr	r0, [pc, #96]	@ (8009e30 <_Balloc+0x7c>)
 8009dd0:	f000 fdec 	bl	800a9ac <__assert_func>
 8009dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dd8:	6006      	str	r6, [r0, #0]
 8009dda:	60c6      	str	r6, [r0, #12]
 8009ddc:	69e6      	ldr	r6, [r4, #28]
 8009dde:	68f3      	ldr	r3, [r6, #12]
 8009de0:	b183      	cbz	r3, 8009e04 <_Balloc+0x50>
 8009de2:	69e3      	ldr	r3, [r4, #28]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dea:	b9b8      	cbnz	r0, 8009e1c <_Balloc+0x68>
 8009dec:	2101      	movs	r1, #1
 8009dee:	fa01 f605 	lsl.w	r6, r1, r5
 8009df2:	1d72      	adds	r2, r6, #5
 8009df4:	4620      	mov	r0, r4
 8009df6:	0092      	lsls	r2, r2, #2
 8009df8:	f000 fdf6 	bl	800a9e8 <_calloc_r>
 8009dfc:	b160      	cbz	r0, 8009e18 <_Balloc+0x64>
 8009dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e02:	e00e      	b.n	8009e22 <_Balloc+0x6e>
 8009e04:	2221      	movs	r2, #33	@ 0x21
 8009e06:	2104      	movs	r1, #4
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fded 	bl	800a9e8 <_calloc_r>
 8009e0e:	69e3      	ldr	r3, [r4, #28]
 8009e10:	60f0      	str	r0, [r6, #12]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e4      	bne.n	8009de2 <_Balloc+0x2e>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	6802      	ldr	r2, [r0, #0]
 8009e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e22:	2300      	movs	r3, #0
 8009e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e28:	e7f7      	b.n	8009e1a <_Balloc+0x66>
 8009e2a:	bf00      	nop
 8009e2c:	0800ae87 	.word	0x0800ae87
 8009e30:	0800af08 	.word	0x0800af08

08009e34 <_Bfree>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	69c6      	ldr	r6, [r0, #28]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	b976      	cbnz	r6, 8009e5c <_Bfree+0x28>
 8009e3e:	2010      	movs	r0, #16
 8009e40:	f7fe f8be 	bl	8007fc0 <malloc>
 8009e44:	4602      	mov	r2, r0
 8009e46:	61e8      	str	r0, [r5, #28]
 8009e48:	b920      	cbnz	r0, 8009e54 <_Bfree+0x20>
 8009e4a:	218f      	movs	r1, #143	@ 0x8f
 8009e4c:	4b08      	ldr	r3, [pc, #32]	@ (8009e70 <_Bfree+0x3c>)
 8009e4e:	4809      	ldr	r0, [pc, #36]	@ (8009e74 <_Bfree+0x40>)
 8009e50:	f000 fdac 	bl	800a9ac <__assert_func>
 8009e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e58:	6006      	str	r6, [r0, #0]
 8009e5a:	60c6      	str	r6, [r0, #12]
 8009e5c:	b13c      	cbz	r4, 8009e6e <_Bfree+0x3a>
 8009e5e:	69eb      	ldr	r3, [r5, #28]
 8009e60:	6862      	ldr	r2, [r4, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e68:	6021      	str	r1, [r4, #0]
 8009e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	0800ae87 	.word	0x0800ae87
 8009e74:	0800af08 	.word	0x0800af08

08009e78 <__multadd>:
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	461e      	mov	r6, r3
 8009e82:	2000      	movs	r0, #0
 8009e84:	690d      	ldr	r5, [r1, #16]
 8009e86:	f101 0c14 	add.w	ip, r1, #20
 8009e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e8e:	3001      	adds	r0, #1
 8009e90:	b299      	uxth	r1, r3
 8009e92:	fb02 6101 	mla	r1, r2, r1, r6
 8009e96:	0c1e      	lsrs	r6, r3, #16
 8009e98:	0c0b      	lsrs	r3, r1, #16
 8009e9a:	fb02 3306 	mla	r3, r2, r6, r3
 8009e9e:	b289      	uxth	r1, r1
 8009ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ea4:	4285      	cmp	r5, r0
 8009ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8009eae:	dcec      	bgt.n	8009e8a <__multadd+0x12>
 8009eb0:	b30e      	cbz	r6, 8009ef6 <__multadd+0x7e>
 8009eb2:	68a3      	ldr	r3, [r4, #8]
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dc19      	bgt.n	8009eec <__multadd+0x74>
 8009eb8:	6861      	ldr	r1, [r4, #4]
 8009eba:	4638      	mov	r0, r7
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	f7ff ff79 	bl	8009db4 <_Balloc>
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	b928      	cbnz	r0, 8009ed2 <__multadd+0x5a>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	21ba      	movs	r1, #186	@ 0xba
 8009eca:	4b0c      	ldr	r3, [pc, #48]	@ (8009efc <__multadd+0x84>)
 8009ecc:	480c      	ldr	r0, [pc, #48]	@ (8009f00 <__multadd+0x88>)
 8009ece:	f000 fd6d 	bl	800a9ac <__assert_func>
 8009ed2:	6922      	ldr	r2, [r4, #16]
 8009ed4:	f104 010c 	add.w	r1, r4, #12
 8009ed8:	3202      	adds	r2, #2
 8009eda:	0092      	lsls	r2, r2, #2
 8009edc:	300c      	adds	r0, #12
 8009ede:	f7ff f84a 	bl	8008f76 <memcpy>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7ff ffa5 	bl	8009e34 <_Bfree>
 8009eea:	4644      	mov	r4, r8
 8009eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ef0:	3501      	adds	r5, #1
 8009ef2:	615e      	str	r6, [r3, #20]
 8009ef4:	6125      	str	r5, [r4, #16]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efc:	0800aef7 	.word	0x0800aef7
 8009f00:	0800af08 	.word	0x0800af08

08009f04 <__hi0bits>:
 8009f04:	4603      	mov	r3, r0
 8009f06:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f0a:	bf3a      	itte	cc
 8009f0c:	0403      	lslcc	r3, r0, #16
 8009f0e:	2010      	movcc	r0, #16
 8009f10:	2000      	movcs	r0, #0
 8009f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f16:	bf3c      	itt	cc
 8009f18:	021b      	lslcc	r3, r3, #8
 8009f1a:	3008      	addcc	r0, #8
 8009f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f20:	bf3c      	itt	cc
 8009f22:	011b      	lslcc	r3, r3, #4
 8009f24:	3004      	addcc	r0, #4
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2a:	d303      	bcc.n	8009f34 <__hi0bits+0x30>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	db0a      	blt.n	8009f46 <__hi0bits+0x42>
 8009f30:	3001      	adds	r0, #1
 8009f32:	4770      	bx	lr
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	d501      	bpl.n	8009f3c <__hi0bits+0x38>
 8009f38:	3002      	adds	r0, #2
 8009f3a:	4770      	bx	lr
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	d501      	bpl.n	8009f44 <__hi0bits+0x40>
 8009f40:	3003      	adds	r0, #3
 8009f42:	4770      	bx	lr
 8009f44:	2020      	movs	r0, #32
 8009f46:	4770      	bx	lr

08009f48 <__lo0bits>:
 8009f48:	6803      	ldr	r3, [r0, #0]
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f013 0007 	ands.w	r0, r3, #7
 8009f50:	d00b      	beq.n	8009f6a <__lo0bits+0x22>
 8009f52:	07d9      	lsls	r1, r3, #31
 8009f54:	d421      	bmi.n	8009f9a <__lo0bits+0x52>
 8009f56:	0798      	lsls	r0, r3, #30
 8009f58:	bf49      	itett	mi
 8009f5a:	085b      	lsrmi	r3, r3, #1
 8009f5c:	089b      	lsrpl	r3, r3, #2
 8009f5e:	2001      	movmi	r0, #1
 8009f60:	6013      	strmi	r3, [r2, #0]
 8009f62:	bf5c      	itt	pl
 8009f64:	2002      	movpl	r0, #2
 8009f66:	6013      	strpl	r3, [r2, #0]
 8009f68:	4770      	bx	lr
 8009f6a:	b299      	uxth	r1, r3
 8009f6c:	b909      	cbnz	r1, 8009f72 <__lo0bits+0x2a>
 8009f6e:	2010      	movs	r0, #16
 8009f70:	0c1b      	lsrs	r3, r3, #16
 8009f72:	b2d9      	uxtb	r1, r3
 8009f74:	b909      	cbnz	r1, 8009f7a <__lo0bits+0x32>
 8009f76:	3008      	adds	r0, #8
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	0719      	lsls	r1, r3, #28
 8009f7c:	bf04      	itt	eq
 8009f7e:	091b      	lsreq	r3, r3, #4
 8009f80:	3004      	addeq	r0, #4
 8009f82:	0799      	lsls	r1, r3, #30
 8009f84:	bf04      	itt	eq
 8009f86:	089b      	lsreq	r3, r3, #2
 8009f88:	3002      	addeq	r0, #2
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d403      	bmi.n	8009f96 <__lo0bits+0x4e>
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	f100 0001 	add.w	r0, r0, #1
 8009f94:	d003      	beq.n	8009f9e <__lo0bits+0x56>
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	4770      	bx	lr
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	4770      	bx	lr
 8009f9e:	2020      	movs	r0, #32
 8009fa0:	4770      	bx	lr
	...

08009fa4 <__i2b>:
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	2101      	movs	r1, #1
 8009faa:	f7ff ff03 	bl	8009db4 <_Balloc>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	b928      	cbnz	r0, 8009fbe <__i2b+0x1a>
 8009fb2:	f240 1145 	movw	r1, #325	@ 0x145
 8009fb6:	4b04      	ldr	r3, [pc, #16]	@ (8009fc8 <__i2b+0x24>)
 8009fb8:	4804      	ldr	r0, [pc, #16]	@ (8009fcc <__i2b+0x28>)
 8009fba:	f000 fcf7 	bl	800a9ac <__assert_func>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	6144      	str	r4, [r0, #20]
 8009fc2:	6103      	str	r3, [r0, #16]
 8009fc4:	bd10      	pop	{r4, pc}
 8009fc6:	bf00      	nop
 8009fc8:	0800aef7 	.word	0x0800aef7
 8009fcc:	0800af08 	.word	0x0800af08

08009fd0 <__multiply>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	690a      	ldr	r2, [r1, #16]
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	460f      	mov	r7, r1
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	bfa2      	ittt	ge
 8009fe0:	4623      	movge	r3, r4
 8009fe2:	460c      	movge	r4, r1
 8009fe4:	461f      	movge	r7, r3
 8009fe6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009fea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	6861      	ldr	r1, [r4, #4]
 8009ff2:	eb0a 0609 	add.w	r6, sl, r9
 8009ff6:	42b3      	cmp	r3, r6
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	bfb8      	it	lt
 8009ffc:	3101      	addlt	r1, #1
 8009ffe:	f7ff fed9 	bl	8009db4 <_Balloc>
 800a002:	b930      	cbnz	r0, 800a012 <__multiply+0x42>
 800a004:	4602      	mov	r2, r0
 800a006:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a00a:	4b43      	ldr	r3, [pc, #268]	@ (800a118 <__multiply+0x148>)
 800a00c:	4843      	ldr	r0, [pc, #268]	@ (800a11c <__multiply+0x14c>)
 800a00e:	f000 fccd 	bl	800a9ac <__assert_func>
 800a012:	f100 0514 	add.w	r5, r0, #20
 800a016:	462b      	mov	r3, r5
 800a018:	2200      	movs	r2, #0
 800a01a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a01e:	4543      	cmp	r3, r8
 800a020:	d321      	bcc.n	800a066 <__multiply+0x96>
 800a022:	f107 0114 	add.w	r1, r7, #20
 800a026:	f104 0214 	add.w	r2, r4, #20
 800a02a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a02e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	1b13      	subs	r3, r2, r4
 800a036:	3b15      	subs	r3, #21
 800a038:	f023 0303 	bic.w	r3, r3, #3
 800a03c:	3304      	adds	r3, #4
 800a03e:	f104 0715 	add.w	r7, r4, #21
 800a042:	42ba      	cmp	r2, r7
 800a044:	bf38      	it	cc
 800a046:	2304      	movcc	r3, #4
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	9103      	str	r1, [sp, #12]
 800a04e:	428b      	cmp	r3, r1
 800a050:	d80c      	bhi.n	800a06c <__multiply+0x9c>
 800a052:	2e00      	cmp	r6, #0
 800a054:	dd03      	ble.n	800a05e <__multiply+0x8e>
 800a056:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d05a      	beq.n	800a114 <__multiply+0x144>
 800a05e:	6106      	str	r6, [r0, #16]
 800a060:	b005      	add	sp, #20
 800a062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a066:	f843 2b04 	str.w	r2, [r3], #4
 800a06a:	e7d8      	b.n	800a01e <__multiply+0x4e>
 800a06c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a070:	f1ba 0f00 	cmp.w	sl, #0
 800a074:	d023      	beq.n	800a0be <__multiply+0xee>
 800a076:	46a9      	mov	r9, r5
 800a078:	f04f 0c00 	mov.w	ip, #0
 800a07c:	f104 0e14 	add.w	lr, r4, #20
 800a080:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a084:	f8d9 3000 	ldr.w	r3, [r9]
 800a088:	fa1f fb87 	uxth.w	fp, r7
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	fb0a 330b 	mla	r3, sl, fp, r3
 800a092:	4463      	add	r3, ip
 800a094:	f8d9 c000 	ldr.w	ip, [r9]
 800a098:	0c3f      	lsrs	r7, r7, #16
 800a09a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a09e:	fb0a c707 	mla	r7, sl, r7, ip
 800a0a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0ac:	4572      	cmp	r2, lr
 800a0ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0b2:	f849 3b04 	str.w	r3, [r9], #4
 800a0b6:	d8e3      	bhi.n	800a080 <__multiply+0xb0>
 800a0b8:	9b01      	ldr	r3, [sp, #4]
 800a0ba:	f845 c003 	str.w	ip, [r5, r3]
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	3104      	adds	r1, #4
 800a0c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0c6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ca:	d021      	beq.n	800a110 <__multiply+0x140>
 800a0cc:	46ae      	mov	lr, r5
 800a0ce:	f04f 0a00 	mov.w	sl, #0
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	f104 0c14 	add.w	ip, r4, #20
 800a0d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a0dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	fb09 770b 	mla	r7, r9, fp, r7
 800a0e6:	4457      	add	r7, sl
 800a0e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0ec:	f84e 3b04 	str.w	r3, [lr], #4
 800a0f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0f8:	f8be 3000 	ldrh.w	r3, [lr]
 800a0fc:	4562      	cmp	r2, ip
 800a0fe:	fb09 330a 	mla	r3, r9, sl, r3
 800a102:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a10a:	d8e5      	bhi.n	800a0d8 <__multiply+0x108>
 800a10c:	9f01      	ldr	r7, [sp, #4]
 800a10e:	51eb      	str	r3, [r5, r7]
 800a110:	3504      	adds	r5, #4
 800a112:	e79a      	b.n	800a04a <__multiply+0x7a>
 800a114:	3e01      	subs	r6, #1
 800a116:	e79c      	b.n	800a052 <__multiply+0x82>
 800a118:	0800aef7 	.word	0x0800aef7
 800a11c:	0800af08 	.word	0x0800af08

0800a120 <__pow5mult>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	4615      	mov	r5, r2
 800a126:	f012 0203 	ands.w	r2, r2, #3
 800a12a:	4607      	mov	r7, r0
 800a12c:	460e      	mov	r6, r1
 800a12e:	d007      	beq.n	800a140 <__pow5mult+0x20>
 800a130:	4c25      	ldr	r4, [pc, #148]	@ (800a1c8 <__pow5mult+0xa8>)
 800a132:	3a01      	subs	r2, #1
 800a134:	2300      	movs	r3, #0
 800a136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a13a:	f7ff fe9d 	bl	8009e78 <__multadd>
 800a13e:	4606      	mov	r6, r0
 800a140:	10ad      	asrs	r5, r5, #2
 800a142:	d03d      	beq.n	800a1c0 <__pow5mult+0xa0>
 800a144:	69fc      	ldr	r4, [r7, #28]
 800a146:	b97c      	cbnz	r4, 800a168 <__pow5mult+0x48>
 800a148:	2010      	movs	r0, #16
 800a14a:	f7fd ff39 	bl	8007fc0 <malloc>
 800a14e:	4602      	mov	r2, r0
 800a150:	61f8      	str	r0, [r7, #28]
 800a152:	b928      	cbnz	r0, 800a160 <__pow5mult+0x40>
 800a154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a158:	4b1c      	ldr	r3, [pc, #112]	@ (800a1cc <__pow5mult+0xac>)
 800a15a:	481d      	ldr	r0, [pc, #116]	@ (800a1d0 <__pow5mult+0xb0>)
 800a15c:	f000 fc26 	bl	800a9ac <__assert_func>
 800a160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a164:	6004      	str	r4, [r0, #0]
 800a166:	60c4      	str	r4, [r0, #12]
 800a168:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a16c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a170:	b94c      	cbnz	r4, 800a186 <__pow5mult+0x66>
 800a172:	f240 2171 	movw	r1, #625	@ 0x271
 800a176:	4638      	mov	r0, r7
 800a178:	f7ff ff14 	bl	8009fa4 <__i2b>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	f8c8 0008 	str.w	r0, [r8, #8]
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	f04f 0900 	mov.w	r9, #0
 800a18a:	07eb      	lsls	r3, r5, #31
 800a18c:	d50a      	bpl.n	800a1a4 <__pow5mult+0x84>
 800a18e:	4631      	mov	r1, r6
 800a190:	4622      	mov	r2, r4
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff ff1c 	bl	8009fd0 <__multiply>
 800a198:	4680      	mov	r8, r0
 800a19a:	4631      	mov	r1, r6
 800a19c:	4638      	mov	r0, r7
 800a19e:	f7ff fe49 	bl	8009e34 <_Bfree>
 800a1a2:	4646      	mov	r6, r8
 800a1a4:	106d      	asrs	r5, r5, #1
 800a1a6:	d00b      	beq.n	800a1c0 <__pow5mult+0xa0>
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	b938      	cbnz	r0, 800a1bc <__pow5mult+0x9c>
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff ff0d 	bl	8009fd0 <__multiply>
 800a1b6:	6020      	str	r0, [r4, #0]
 800a1b8:	f8c0 9000 	str.w	r9, [r0]
 800a1bc:	4604      	mov	r4, r0
 800a1be:	e7e4      	b.n	800a18a <__pow5mult+0x6a>
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c6:	bf00      	nop
 800a1c8:	0800af64 	.word	0x0800af64
 800a1cc:	0800ae87 	.word	0x0800ae87
 800a1d0:	0800af08 	.word	0x0800af08

0800a1d4 <__lshift>:
 800a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	460c      	mov	r4, r1
 800a1da:	4607      	mov	r7, r0
 800a1dc:	4691      	mov	r9, r2
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	6849      	ldr	r1, [r1, #4]
 800a1e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1ec:	f108 0601 	add.w	r6, r8, #1
 800a1f0:	42b3      	cmp	r3, r6
 800a1f2:	db0b      	blt.n	800a20c <__lshift+0x38>
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff fddd 	bl	8009db4 <_Balloc>
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	b948      	cbnz	r0, 800a212 <__lshift+0x3e>
 800a1fe:	4602      	mov	r2, r0
 800a200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a204:	4b27      	ldr	r3, [pc, #156]	@ (800a2a4 <__lshift+0xd0>)
 800a206:	4828      	ldr	r0, [pc, #160]	@ (800a2a8 <__lshift+0xd4>)
 800a208:	f000 fbd0 	bl	800a9ac <__assert_func>
 800a20c:	3101      	adds	r1, #1
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	e7ee      	b.n	800a1f0 <__lshift+0x1c>
 800a212:	2300      	movs	r3, #0
 800a214:	f100 0114 	add.w	r1, r0, #20
 800a218:	f100 0210 	add.w	r2, r0, #16
 800a21c:	4618      	mov	r0, r3
 800a21e:	4553      	cmp	r3, sl
 800a220:	db33      	blt.n	800a28a <__lshift+0xb6>
 800a222:	6920      	ldr	r0, [r4, #16]
 800a224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a228:	f104 0314 	add.w	r3, r4, #20
 800a22c:	f019 091f 	ands.w	r9, r9, #31
 800a230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a238:	d02b      	beq.n	800a292 <__lshift+0xbe>
 800a23a:	468a      	mov	sl, r1
 800a23c:	2200      	movs	r2, #0
 800a23e:	f1c9 0e20 	rsb	lr, r9, #32
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	fa00 f009 	lsl.w	r0, r0, r9
 800a248:	4310      	orrs	r0, r2
 800a24a:	f84a 0b04 	str.w	r0, [sl], #4
 800a24e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a252:	459c      	cmp	ip, r3
 800a254:	fa22 f20e 	lsr.w	r2, r2, lr
 800a258:	d8f3      	bhi.n	800a242 <__lshift+0x6e>
 800a25a:	ebac 0304 	sub.w	r3, ip, r4
 800a25e:	3b15      	subs	r3, #21
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	3304      	adds	r3, #4
 800a266:	f104 0015 	add.w	r0, r4, #21
 800a26a:	4584      	cmp	ip, r0
 800a26c:	bf38      	it	cc
 800a26e:	2304      	movcc	r3, #4
 800a270:	50ca      	str	r2, [r1, r3]
 800a272:	b10a      	cbz	r2, 800a278 <__lshift+0xa4>
 800a274:	f108 0602 	add.w	r6, r8, #2
 800a278:	3e01      	subs	r6, #1
 800a27a:	4638      	mov	r0, r7
 800a27c:	4621      	mov	r1, r4
 800a27e:	612e      	str	r6, [r5, #16]
 800a280:	f7ff fdd8 	bl	8009e34 <_Bfree>
 800a284:	4628      	mov	r0, r5
 800a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a28e:	3301      	adds	r3, #1
 800a290:	e7c5      	b.n	800a21e <__lshift+0x4a>
 800a292:	3904      	subs	r1, #4
 800a294:	f853 2b04 	ldr.w	r2, [r3], #4
 800a298:	459c      	cmp	ip, r3
 800a29a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a29e:	d8f9      	bhi.n	800a294 <__lshift+0xc0>
 800a2a0:	e7ea      	b.n	800a278 <__lshift+0xa4>
 800a2a2:	bf00      	nop
 800a2a4:	0800aef7 	.word	0x0800aef7
 800a2a8:	0800af08 	.word	0x0800af08

0800a2ac <__mcmp>:
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	690a      	ldr	r2, [r1, #16]
 800a2b0:	6900      	ldr	r0, [r0, #16]
 800a2b2:	b530      	push	{r4, r5, lr}
 800a2b4:	1a80      	subs	r0, r0, r2
 800a2b6:	d10e      	bne.n	800a2d6 <__mcmp+0x2a>
 800a2b8:	3314      	adds	r3, #20
 800a2ba:	3114      	adds	r1, #20
 800a2bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2cc:	4295      	cmp	r5, r2
 800a2ce:	d003      	beq.n	800a2d8 <__mcmp+0x2c>
 800a2d0:	d205      	bcs.n	800a2de <__mcmp+0x32>
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d6:	bd30      	pop	{r4, r5, pc}
 800a2d8:	42a3      	cmp	r3, r4
 800a2da:	d3f3      	bcc.n	800a2c4 <__mcmp+0x18>
 800a2dc:	e7fb      	b.n	800a2d6 <__mcmp+0x2a>
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7f9      	b.n	800a2d6 <__mcmp+0x2a>
	...

0800a2e4 <__mdiff>:
 800a2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4648      	mov	r0, r9
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	f7ff ffdb 	bl	800a2ac <__mcmp>
 800a2f6:	1e05      	subs	r5, r0, #0
 800a2f8:	d112      	bne.n	800a320 <__mdiff+0x3c>
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7ff fd59 	bl	8009db4 <_Balloc>
 800a302:	4602      	mov	r2, r0
 800a304:	b928      	cbnz	r0, 800a312 <__mdiff+0x2e>
 800a306:	f240 2137 	movw	r1, #567	@ 0x237
 800a30a:	4b3e      	ldr	r3, [pc, #248]	@ (800a404 <__mdiff+0x120>)
 800a30c:	483e      	ldr	r0, [pc, #248]	@ (800a408 <__mdiff+0x124>)
 800a30e:	f000 fb4d 	bl	800a9ac <__assert_func>
 800a312:	2301      	movs	r3, #1
 800a314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a318:	4610      	mov	r0, r2
 800a31a:	b003      	add	sp, #12
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	bfbc      	itt	lt
 800a322:	464b      	movlt	r3, r9
 800a324:	46a1      	movlt	r9, r4
 800a326:	4630      	mov	r0, r6
 800a328:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a32c:	bfba      	itte	lt
 800a32e:	461c      	movlt	r4, r3
 800a330:	2501      	movlt	r5, #1
 800a332:	2500      	movge	r5, #0
 800a334:	f7ff fd3e 	bl	8009db4 <_Balloc>
 800a338:	4602      	mov	r2, r0
 800a33a:	b918      	cbnz	r0, 800a344 <__mdiff+0x60>
 800a33c:	f240 2145 	movw	r1, #581	@ 0x245
 800a340:	4b30      	ldr	r3, [pc, #192]	@ (800a404 <__mdiff+0x120>)
 800a342:	e7e3      	b.n	800a30c <__mdiff+0x28>
 800a344:	f100 0b14 	add.w	fp, r0, #20
 800a348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a34c:	f109 0310 	add.w	r3, r9, #16
 800a350:	60c5      	str	r5, [r0, #12]
 800a352:	f04f 0c00 	mov.w	ip, #0
 800a356:	f109 0514 	add.w	r5, r9, #20
 800a35a:	46d9      	mov	r9, fp
 800a35c:	6926      	ldr	r6, [r4, #16]
 800a35e:	f104 0e14 	add.w	lr, r4, #20
 800a362:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a366:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a372:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a376:	b281      	uxth	r1, r0
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	fa1f f38a 	uxth.w	r3, sl
 800a37e:	1a5b      	subs	r3, r3, r1
 800a380:	0c00      	lsrs	r0, r0, #16
 800a382:	4463      	add	r3, ip
 800a384:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a388:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a392:	4576      	cmp	r6, lr
 800a394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a398:	f849 3b04 	str.w	r3, [r9], #4
 800a39c:	d8e6      	bhi.n	800a36c <__mdiff+0x88>
 800a39e:	1b33      	subs	r3, r6, r4
 800a3a0:	3b15      	subs	r3, #21
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	3415      	adds	r4, #21
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	bf38      	it	cc
 800a3ae:	2304      	movcc	r3, #4
 800a3b0:	441d      	add	r5, r3
 800a3b2:	445b      	add	r3, fp
 800a3b4:	461e      	mov	r6, r3
 800a3b6:	462c      	mov	r4, r5
 800a3b8:	4544      	cmp	r4, r8
 800a3ba:	d30e      	bcc.n	800a3da <__mdiff+0xf6>
 800a3bc:	f108 0103 	add.w	r1, r8, #3
 800a3c0:	1b49      	subs	r1, r1, r5
 800a3c2:	f021 0103 	bic.w	r1, r1, #3
 800a3c6:	3d03      	subs	r5, #3
 800a3c8:	45a8      	cmp	r8, r5
 800a3ca:	bf38      	it	cc
 800a3cc:	2100      	movcc	r1, #0
 800a3ce:	440b      	add	r3, r1
 800a3d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3d4:	b199      	cbz	r1, 800a3fe <__mdiff+0x11a>
 800a3d6:	6117      	str	r7, [r2, #16]
 800a3d8:	e79e      	b.n	800a318 <__mdiff+0x34>
 800a3da:	46e6      	mov	lr, ip
 800a3dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3e0:	fa1f fc81 	uxth.w	ip, r1
 800a3e4:	44f4      	add	ip, lr
 800a3e6:	0c08      	lsrs	r0, r1, #16
 800a3e8:	4471      	add	r1, lr
 800a3ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3ee:	b289      	uxth	r1, r1
 800a3f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3f8:	f846 1b04 	str.w	r1, [r6], #4
 800a3fc:	e7dc      	b.n	800a3b8 <__mdiff+0xd4>
 800a3fe:	3f01      	subs	r7, #1
 800a400:	e7e6      	b.n	800a3d0 <__mdiff+0xec>
 800a402:	bf00      	nop
 800a404:	0800aef7 	.word	0x0800aef7
 800a408:	0800af08 	.word	0x0800af08

0800a40c <__d2b>:
 800a40c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a410:	2101      	movs	r1, #1
 800a412:	4690      	mov	r8, r2
 800a414:	4699      	mov	r9, r3
 800a416:	9e08      	ldr	r6, [sp, #32]
 800a418:	f7ff fccc 	bl	8009db4 <_Balloc>
 800a41c:	4604      	mov	r4, r0
 800a41e:	b930      	cbnz	r0, 800a42e <__d2b+0x22>
 800a420:	4602      	mov	r2, r0
 800a422:	f240 310f 	movw	r1, #783	@ 0x30f
 800a426:	4b23      	ldr	r3, [pc, #140]	@ (800a4b4 <__d2b+0xa8>)
 800a428:	4823      	ldr	r0, [pc, #140]	@ (800a4b8 <__d2b+0xac>)
 800a42a:	f000 fabf 	bl	800a9ac <__assert_func>
 800a42e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a432:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a436:	b10d      	cbz	r5, 800a43c <__d2b+0x30>
 800a438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	f1b8 0300 	subs.w	r3, r8, #0
 800a442:	d024      	beq.n	800a48e <__d2b+0x82>
 800a444:	4668      	mov	r0, sp
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	f7ff fd7e 	bl	8009f48 <__lo0bits>
 800a44c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a450:	b1d8      	cbz	r0, 800a48a <__d2b+0x7e>
 800a452:	f1c0 0320 	rsb	r3, r0, #32
 800a456:	fa02 f303 	lsl.w	r3, r2, r3
 800a45a:	430b      	orrs	r3, r1
 800a45c:	40c2      	lsrs	r2, r0
 800a45e:	6163      	str	r3, [r4, #20]
 800a460:	9201      	str	r2, [sp, #4]
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	bf0c      	ite	eq
 800a468:	2201      	moveq	r2, #1
 800a46a:	2202      	movne	r2, #2
 800a46c:	61a3      	str	r3, [r4, #24]
 800a46e:	6122      	str	r2, [r4, #16]
 800a470:	b1ad      	cbz	r5, 800a49e <__d2b+0x92>
 800a472:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a476:	4405      	add	r5, r0
 800a478:	6035      	str	r5, [r6, #0]
 800a47a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a480:	6018      	str	r0, [r3, #0]
 800a482:	4620      	mov	r0, r4
 800a484:	b002      	add	sp, #8
 800a486:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a48a:	6161      	str	r1, [r4, #20]
 800a48c:	e7e9      	b.n	800a462 <__d2b+0x56>
 800a48e:	a801      	add	r0, sp, #4
 800a490:	f7ff fd5a 	bl	8009f48 <__lo0bits>
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	6163      	str	r3, [r4, #20]
 800a49a:	3020      	adds	r0, #32
 800a49c:	e7e7      	b.n	800a46e <__d2b+0x62>
 800a49e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4a6:	6030      	str	r0, [r6, #0]
 800a4a8:	6918      	ldr	r0, [r3, #16]
 800a4aa:	f7ff fd2b 	bl	8009f04 <__hi0bits>
 800a4ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4b2:	e7e4      	b.n	800a47e <__d2b+0x72>
 800a4b4:	0800aef7 	.word	0x0800aef7
 800a4b8:	0800af08 	.word	0x0800af08

0800a4bc <__ascii_wctomb>:
 800a4bc:	4603      	mov	r3, r0
 800a4be:	4608      	mov	r0, r1
 800a4c0:	b141      	cbz	r1, 800a4d4 <__ascii_wctomb+0x18>
 800a4c2:	2aff      	cmp	r2, #255	@ 0xff
 800a4c4:	d904      	bls.n	800a4d0 <__ascii_wctomb+0x14>
 800a4c6:	228a      	movs	r2, #138	@ 0x8a
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	4770      	bx	lr
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	700a      	strb	r2, [r1, #0]
 800a4d4:	4770      	bx	lr

0800a4d6 <__sfputc_r>:
 800a4d6:	6893      	ldr	r3, [r2, #8]
 800a4d8:	b410      	push	{r4}
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	6093      	str	r3, [r2, #8]
 800a4e0:	da07      	bge.n	800a4f2 <__sfputc_r+0x1c>
 800a4e2:	6994      	ldr	r4, [r2, #24]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	db01      	blt.n	800a4ec <__sfputc_r+0x16>
 800a4e8:	290a      	cmp	r1, #10
 800a4ea:	d102      	bne.n	800a4f2 <__sfputc_r+0x1c>
 800a4ec:	bc10      	pop	{r4}
 800a4ee:	f7fe bc10 	b.w	8008d12 <__swbuf_r>
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	1c58      	adds	r0, r3, #1
 800a4f6:	6010      	str	r0, [r2, #0]
 800a4f8:	7019      	strb	r1, [r3, #0]
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	bc10      	pop	{r4}
 800a4fe:	4770      	bx	lr

0800a500 <__sfputs_r>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	4614      	mov	r4, r2
 800a508:	18d5      	adds	r5, r2, r3
 800a50a:	42ac      	cmp	r4, r5
 800a50c:	d101      	bne.n	800a512 <__sfputs_r+0x12>
 800a50e:	2000      	movs	r0, #0
 800a510:	e007      	b.n	800a522 <__sfputs_r+0x22>
 800a512:	463a      	mov	r2, r7
 800a514:	4630      	mov	r0, r6
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	f7ff ffdc 	bl	800a4d6 <__sfputc_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d1f3      	bne.n	800a50a <__sfputs_r+0xa>
 800a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a524 <_vfiprintf_r>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	460d      	mov	r5, r1
 800a52a:	4614      	mov	r4, r2
 800a52c:	4698      	mov	r8, r3
 800a52e:	4606      	mov	r6, r0
 800a530:	b09d      	sub	sp, #116	@ 0x74
 800a532:	b118      	cbz	r0, 800a53c <_vfiprintf_r+0x18>
 800a534:	6a03      	ldr	r3, [r0, #32]
 800a536:	b90b      	cbnz	r3, 800a53c <_vfiprintf_r+0x18>
 800a538:	f7fe fb02 	bl	8008b40 <__sinit>
 800a53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	d405      	bmi.n	800a54e <_vfiprintf_r+0x2a>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	059a      	lsls	r2, r3, #22
 800a546:	d402      	bmi.n	800a54e <_vfiprintf_r+0x2a>
 800a548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a54a:	f7fe fd04 	bl	8008f56 <__retarget_lock_acquire_recursive>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	071b      	lsls	r3, r3, #28
 800a552:	d501      	bpl.n	800a558 <_vfiprintf_r+0x34>
 800a554:	692b      	ldr	r3, [r5, #16]
 800a556:	b99b      	cbnz	r3, 800a580 <_vfiprintf_r+0x5c>
 800a558:	4629      	mov	r1, r5
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7fe fc18 	bl	8008d90 <__swsetup_r>
 800a560:	b170      	cbz	r0, 800a580 <_vfiprintf_r+0x5c>
 800a562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a564:	07dc      	lsls	r4, r3, #31
 800a566:	d504      	bpl.n	800a572 <_vfiprintf_r+0x4e>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	b01d      	add	sp, #116	@ 0x74
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	0598      	lsls	r0, r3, #22
 800a576:	d4f7      	bmi.n	800a568 <_vfiprintf_r+0x44>
 800a578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57a:	f7fe fced 	bl	8008f58 <__retarget_lock_release_recursive>
 800a57e:	e7f3      	b.n	800a568 <_vfiprintf_r+0x44>
 800a580:	2300      	movs	r3, #0
 800a582:	9309      	str	r3, [sp, #36]	@ 0x24
 800a584:	2320      	movs	r3, #32
 800a586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58a:	2330      	movs	r3, #48	@ 0x30
 800a58c:	f04f 0901 	mov.w	r9, #1
 800a590:	f8cd 800c 	str.w	r8, [sp, #12]
 800a594:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a740 <_vfiprintf_r+0x21c>
 800a598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a59c:	4623      	mov	r3, r4
 800a59e:	469a      	mov	sl, r3
 800a5a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a4:	b10a      	cbz	r2, 800a5aa <_vfiprintf_r+0x86>
 800a5a6:	2a25      	cmp	r2, #37	@ 0x25
 800a5a8:	d1f9      	bne.n	800a59e <_vfiprintf_r+0x7a>
 800a5aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ae:	d00b      	beq.n	800a5c8 <_vfiprintf_r+0xa4>
 800a5b0:	465b      	mov	r3, fp
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff ffa2 	bl	800a500 <__sfputs_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f000 80a7 	beq.w	800a710 <_vfiprintf_r+0x1ec>
 800a5c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5c4:	445a      	add	r2, fp
 800a5c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 809f 	beq.w	800a710 <_vfiprintf_r+0x1ec>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5dc:	f10a 0a01 	add.w	sl, sl, #1
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ea:	4654      	mov	r4, sl
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f2:	4853      	ldr	r0, [pc, #332]	@ (800a740 <_vfiprintf_r+0x21c>)
 800a5f4:	f7fe fcb1 	bl	8008f5a <memchr>
 800a5f8:	9a04      	ldr	r2, [sp, #16]
 800a5fa:	b9d8      	cbnz	r0, 800a634 <_vfiprintf_r+0x110>
 800a5fc:	06d1      	lsls	r1, r2, #27
 800a5fe:	bf44      	itt	mi
 800a600:	2320      	movmi	r3, #32
 800a602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a606:	0713      	lsls	r3, r2, #28
 800a608:	bf44      	itt	mi
 800a60a:	232b      	movmi	r3, #43	@ 0x2b
 800a60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a610:	f89a 3000 	ldrb.w	r3, [sl]
 800a614:	2b2a      	cmp	r3, #42	@ 0x2a
 800a616:	d015      	beq.n	800a644 <_vfiprintf_r+0x120>
 800a618:	4654      	mov	r4, sl
 800a61a:	2000      	movs	r0, #0
 800a61c:	f04f 0c0a 	mov.w	ip, #10
 800a620:	9a07      	ldr	r2, [sp, #28]
 800a622:	4621      	mov	r1, r4
 800a624:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a628:	3b30      	subs	r3, #48	@ 0x30
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	d94b      	bls.n	800a6c6 <_vfiprintf_r+0x1a2>
 800a62e:	b1b0      	cbz	r0, 800a65e <_vfiprintf_r+0x13a>
 800a630:	9207      	str	r2, [sp, #28]
 800a632:	e014      	b.n	800a65e <_vfiprintf_r+0x13a>
 800a634:	eba0 0308 	sub.w	r3, r0, r8
 800a638:	fa09 f303 	lsl.w	r3, r9, r3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	46a2      	mov	sl, r4
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	e7d2      	b.n	800a5ea <_vfiprintf_r+0xc6>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	1d19      	adds	r1, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	9103      	str	r1, [sp, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	bfbb      	ittet	lt
 800a650:	425b      	neglt	r3, r3
 800a652:	f042 0202 	orrlt.w	r2, r2, #2
 800a656:	9307      	strge	r3, [sp, #28]
 800a658:	9307      	strlt	r3, [sp, #28]
 800a65a:	bfb8      	it	lt
 800a65c:	9204      	strlt	r2, [sp, #16]
 800a65e:	7823      	ldrb	r3, [r4, #0]
 800a660:	2b2e      	cmp	r3, #46	@ 0x2e
 800a662:	d10a      	bne.n	800a67a <_vfiprintf_r+0x156>
 800a664:	7863      	ldrb	r3, [r4, #1]
 800a666:	2b2a      	cmp	r3, #42	@ 0x2a
 800a668:	d132      	bne.n	800a6d0 <_vfiprintf_r+0x1ac>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	3402      	adds	r4, #2
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9203      	str	r2, [sp, #12]
 800a674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a744 <_vfiprintf_r+0x220>
 800a67e:	2203      	movs	r2, #3
 800a680:	4650      	mov	r0, sl
 800a682:	7821      	ldrb	r1, [r4, #0]
 800a684:	f7fe fc69 	bl	8008f5a <memchr>
 800a688:	b138      	cbz	r0, 800a69a <_vfiprintf_r+0x176>
 800a68a:	2240      	movs	r2, #64	@ 0x40
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	eba0 000a 	sub.w	r0, r0, sl
 800a692:	4082      	lsls	r2, r0
 800a694:	4313      	orrs	r3, r2
 800a696:	3401      	adds	r4, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	2206      	movs	r2, #6
 800a6a0:	4829      	ldr	r0, [pc, #164]	@ (800a748 <_vfiprintf_r+0x224>)
 800a6a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6a6:	f7fe fc58 	bl	8008f5a <memchr>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d03f      	beq.n	800a72e <_vfiprintf_r+0x20a>
 800a6ae:	4b27      	ldr	r3, [pc, #156]	@ (800a74c <_vfiprintf_r+0x228>)
 800a6b0:	bb1b      	cbnz	r3, 800a6fa <_vfiprintf_r+0x1d6>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	f023 0307 	bic.w	r3, r3, #7
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c0:	443b      	add	r3, r7
 800a6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c4:	e76a      	b.n	800a59c <_vfiprintf_r+0x78>
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ce:	e7a8      	b.n	800a622 <_vfiprintf_r+0xfe>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f04f 0c0a 	mov.w	ip, #10
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9305      	str	r3, [sp, #20]
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e2:	3a30      	subs	r2, #48	@ 0x30
 800a6e4:	2a09      	cmp	r2, #9
 800a6e6:	d903      	bls.n	800a6f0 <_vfiprintf_r+0x1cc>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0c6      	beq.n	800a67a <_vfiprintf_r+0x156>
 800a6ec:	9105      	str	r1, [sp, #20]
 800a6ee:	e7c4      	b.n	800a67a <_vfiprintf_r+0x156>
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f8:	e7f0      	b.n	800a6dc <_vfiprintf_r+0x1b8>
 800a6fa:	ab03      	add	r3, sp, #12
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	462a      	mov	r2, r5
 800a700:	4630      	mov	r0, r6
 800a702:	4b13      	ldr	r3, [pc, #76]	@ (800a750 <_vfiprintf_r+0x22c>)
 800a704:	a904      	add	r1, sp, #16
 800a706:	f7fd fdbb 	bl	8008280 <_printf_float>
 800a70a:	4607      	mov	r7, r0
 800a70c:	1c78      	adds	r0, r7, #1
 800a70e:	d1d6      	bne.n	800a6be <_vfiprintf_r+0x19a>
 800a710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a712:	07d9      	lsls	r1, r3, #31
 800a714:	d405      	bmi.n	800a722 <_vfiprintf_r+0x1fe>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	059a      	lsls	r2, r3, #22
 800a71a:	d402      	bmi.n	800a722 <_vfiprintf_r+0x1fe>
 800a71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a71e:	f7fe fc1b 	bl	8008f58 <__retarget_lock_release_recursive>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	065b      	lsls	r3, r3, #25
 800a726:	f53f af1f 	bmi.w	800a568 <_vfiprintf_r+0x44>
 800a72a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a72c:	e71e      	b.n	800a56c <_vfiprintf_r+0x48>
 800a72e:	ab03      	add	r3, sp, #12
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	462a      	mov	r2, r5
 800a734:	4630      	mov	r0, r6
 800a736:	4b06      	ldr	r3, [pc, #24]	@ (800a750 <_vfiprintf_r+0x22c>)
 800a738:	a904      	add	r1, sp, #16
 800a73a:	f7fe f849 	bl	80087d0 <_printf_i>
 800a73e:	e7e4      	b.n	800a70a <_vfiprintf_r+0x1e6>
 800a740:	0800b161 	.word	0x0800b161
 800a744:	0800b167 	.word	0x0800b167
 800a748:	0800b16b 	.word	0x0800b16b
 800a74c:	08008281 	.word	0x08008281
 800a750:	0800a501 	.word	0x0800a501

0800a754 <__sflush_r>:
 800a754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	0717      	lsls	r7, r2, #28
 800a75c:	4605      	mov	r5, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	d456      	bmi.n	800a810 <__sflush_r+0xbc>
 800a762:	684b      	ldr	r3, [r1, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	dc02      	bgt.n	800a76e <__sflush_r+0x1a>
 800a768:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd3d      	ble.n	800a7ea <__sflush_r+0x96>
 800a76e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a770:	2e00      	cmp	r6, #0
 800a772:	d03a      	beq.n	800a7ea <__sflush_r+0x96>
 800a774:	2300      	movs	r3, #0
 800a776:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a77a:	682f      	ldr	r7, [r5, #0]
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	d025      	beq.n	800a7ce <__sflush_r+0x7a>
 800a782:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	0758      	lsls	r0, r3, #29
 800a788:	d505      	bpl.n	800a796 <__sflush_r+0x42>
 800a78a:	6863      	ldr	r3, [r4, #4]
 800a78c:	1ad2      	subs	r2, r2, r3
 800a78e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a790:	b10b      	cbz	r3, 800a796 <__sflush_r+0x42>
 800a792:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a794:	1ad2      	subs	r2, r2, r3
 800a796:	6a21      	ldr	r1, [r4, #32]
 800a798:	2300      	movs	r3, #0
 800a79a:	4628      	mov	r0, r5
 800a79c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a79e:	47b0      	blx	r6
 800a7a0:	1c41      	adds	r1, r0, #1
 800a7a2:	d024      	beq.n	800a7ee <__sflush_r+0x9a>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6063      	str	r3, [r4, #4]
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	04da      	lsls	r2, r3, #19
 800a7b0:	d500      	bpl.n	800a7b4 <__sflush_r+0x60>
 800a7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7b6:	602f      	str	r7, [r5, #0]
 800a7b8:	b1b9      	cbz	r1, 800a7ea <__sflush_r+0x96>
 800a7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	d002      	beq.n	800a7c8 <__sflush_r+0x74>
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f7ff fa9c 	bl	8009d00 <_free_r>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7cc:	e00d      	b.n	800a7ea <__sflush_r+0x96>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b0      	blx	r6
 800a7d4:	1c46      	adds	r6, r0, #1
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	d1d4      	bne.n	800a784 <__sflush_r+0x30>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0d1      	beq.n	800a784 <__sflush_r+0x30>
 800a7e0:	2b1d      	cmp	r3, #29
 800a7e2:	d001      	beq.n	800a7e8 <__sflush_r+0x94>
 800a7e4:	2b16      	cmp	r3, #22
 800a7e6:	d12a      	bne.n	800a83e <__sflush_r+0xea>
 800a7e8:	602f      	str	r7, [r5, #0]
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e02e      	b.n	800a84c <__sflush_r+0xf8>
 800a7ee:	682a      	ldr	r2, [r5, #0]
 800a7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f4:	b142      	cbz	r2, 800a808 <__sflush_r+0xb4>
 800a7f6:	2a1d      	cmp	r2, #29
 800a7f8:	d001      	beq.n	800a7fe <__sflush_r+0xaa>
 800a7fa:	2a16      	cmp	r2, #22
 800a7fc:	d121      	bne.n	800a842 <__sflush_r+0xee>
 800a7fe:	2300      	movs	r3, #0
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	e7d5      	b.n	800a7b4 <__sflush_r+0x60>
 800a808:	6062      	str	r2, [r4, #4]
 800a80a:	6922      	ldr	r2, [r4, #16]
 800a80c:	6022      	str	r2, [r4, #0]
 800a80e:	e7ce      	b.n	800a7ae <__sflush_r+0x5a>
 800a810:	690f      	ldr	r7, [r1, #16]
 800a812:	2f00      	cmp	r7, #0
 800a814:	d0e9      	beq.n	800a7ea <__sflush_r+0x96>
 800a816:	0793      	lsls	r3, r2, #30
 800a818:	bf18      	it	ne
 800a81a:	2300      	movne	r3, #0
 800a81c:	680e      	ldr	r6, [r1, #0]
 800a81e:	bf08      	it	eq
 800a820:	694b      	ldreq	r3, [r1, #20]
 800a822:	1bf6      	subs	r6, r6, r7
 800a824:	600f      	str	r7, [r1, #0]
 800a826:	608b      	str	r3, [r1, #8]
 800a828:	2e00      	cmp	r6, #0
 800a82a:	ddde      	ble.n	800a7ea <__sflush_r+0x96>
 800a82c:	4633      	mov	r3, r6
 800a82e:	463a      	mov	r2, r7
 800a830:	4628      	mov	r0, r5
 800a832:	6a21      	ldr	r1, [r4, #32]
 800a834:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a838:	47e0      	blx	ip
 800a83a:	2800      	cmp	r0, #0
 800a83c:	dc07      	bgt.n	800a84e <__sflush_r+0xfa>
 800a83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a84e:	4407      	add	r7, r0
 800a850:	1a36      	subs	r6, r6, r0
 800a852:	e7e9      	b.n	800a828 <__sflush_r+0xd4>

0800a854 <_fflush_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b913      	cbnz	r3, 800a864 <_fflush_r+0x10>
 800a85e:	2500      	movs	r5, #0
 800a860:	4628      	mov	r0, r5
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	b118      	cbz	r0, 800a86e <_fflush_r+0x1a>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <_fflush_r+0x1a>
 800a86a:	f7fe f969 	bl	8008b40 <__sinit>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f3      	beq.n	800a85e <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x32>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x32>
 800a880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a882:	f7fe fb68 	bl	8008f56 <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff63 	bl	800a754 <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a890:	4605      	mov	r5, r0
 800a892:	07da      	lsls	r2, r3, #31
 800a894:	d4e4      	bmi.n	800a860 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4e1      	bmi.n	800a860 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a89e:	f7fe fb5b 	bl	8008f58 <__retarget_lock_release_recursive>
 800a8a2:	e7dd      	b.n	800a860 <_fflush_r+0xc>

0800a8a4 <__swhatbuf_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	b096      	sub	sp, #88	@ 0x58
 800a8b4:	da0c      	bge.n	800a8d0 <__swhatbuf_r+0x2c>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8be:	bf14      	ite	ne
 800a8c0:	2340      	movne	r3, #64	@ 0x40
 800a8c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	6031      	str	r1, [r6, #0]
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	b016      	add	sp, #88	@ 0x58
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	466a      	mov	r2, sp
 800a8d2:	f000 f849 	bl	800a968 <_fstat_r>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	dbed      	blt.n	800a8b6 <__swhatbuf_r+0x12>
 800a8da:	9901      	ldr	r1, [sp, #4]
 800a8dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8e4:	4259      	negs	r1, r3
 800a8e6:	4159      	adcs	r1, r3
 800a8e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8ec:	e7eb      	b.n	800a8c6 <__swhatbuf_r+0x22>

0800a8ee <__smakebuf_r>:
 800a8ee:	898b      	ldrh	r3, [r1, #12]
 800a8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f2:	079d      	lsls	r5, r3, #30
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	d507      	bpl.n	800a90a <__smakebuf_r+0x1c>
 800a8fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	2301      	movs	r3, #1
 800a904:	6163      	str	r3, [r4, #20]
 800a906:	b003      	add	sp, #12
 800a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90a:	466a      	mov	r2, sp
 800a90c:	ab01      	add	r3, sp, #4
 800a90e:	f7ff ffc9 	bl	800a8a4 <__swhatbuf_r>
 800a912:	9f00      	ldr	r7, [sp, #0]
 800a914:	4605      	mov	r5, r0
 800a916:	4639      	mov	r1, r7
 800a918:	4630      	mov	r0, r6
 800a91a:	f7fd fb83 	bl	8008024 <_malloc_r>
 800a91e:	b948      	cbnz	r0, 800a934 <__smakebuf_r+0x46>
 800a920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a924:	059a      	lsls	r2, r3, #22
 800a926:	d4ee      	bmi.n	800a906 <__smakebuf_r+0x18>
 800a928:	f023 0303 	bic.w	r3, r3, #3
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	e7e2      	b.n	800a8fa <__smakebuf_r+0xc>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	6020      	str	r0, [r4, #0]
 800a944:	b15b      	cbz	r3, 800a95e <__smakebuf_r+0x70>
 800a946:	4630      	mov	r0, r6
 800a948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94c:	f000 f81e 	bl	800a98c <_isatty_r>
 800a950:	b128      	cbz	r0, 800a95e <__smakebuf_r+0x70>
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f023 0303 	bic.w	r3, r3, #3
 800a958:	f043 0301 	orr.w	r3, r3, #1
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	431d      	orrs	r5, r3
 800a962:	81a5      	strh	r5, [r4, #12]
 800a964:	e7cf      	b.n	800a906 <__smakebuf_r+0x18>
	...

0800a968 <_fstat_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	2300      	movs	r3, #0
 800a96c:	4d06      	ldr	r5, [pc, #24]	@ (800a988 <_fstat_r+0x20>)
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	4611      	mov	r1, r2
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	f7f7 fe25 	bl	80025c4 <_fstat>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d102      	bne.n	800a984 <_fstat_r+0x1c>
 800a97e:	682b      	ldr	r3, [r5, #0]
 800a980:	b103      	cbz	r3, 800a984 <_fstat_r+0x1c>
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	bd38      	pop	{r3, r4, r5, pc}
 800a986:	bf00      	nop
 800a988:	20003cd4 	.word	0x20003cd4

0800a98c <_isatty_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	2300      	movs	r3, #0
 800a990:	4d05      	ldr	r5, [pc, #20]	@ (800a9a8 <_isatty_r+0x1c>)
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	602b      	str	r3, [r5, #0]
 800a998:	f7f7 fe1a 	bl	80025d0 <_isatty>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_isatty_r+0x1a>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_isatty_r+0x1a>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20003cd4 	.word	0x20003cd4

0800a9ac <__assert_func>:
 800a9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9ae:	4614      	mov	r4, r2
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <__assert_func+0x2c>)
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68d8      	ldr	r0, [r3, #12]
 800a9ba:	b954      	cbnz	r4, 800a9d2 <__assert_func+0x26>
 800a9bc:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <__assert_func+0x30>)
 800a9be:	461c      	mov	r4, r3
 800a9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c4:	9100      	str	r1, [sp, #0]
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	4905      	ldr	r1, [pc, #20]	@ (800a9e0 <__assert_func+0x34>)
 800a9ca:	f000 f821 	bl	800aa10 <fiprintf>
 800a9ce:	f000 f831 	bl	800aa34 <abort>
 800a9d2:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <__assert_func+0x38>)
 800a9d4:	e7f4      	b.n	800a9c0 <__assert_func+0x14>
 800a9d6:	bf00      	nop
 800a9d8:	20000188 	.word	0x20000188
 800a9dc:	0800b1ad 	.word	0x0800b1ad
 800a9e0:	0800b17f 	.word	0x0800b17f
 800a9e4:	0800b172 	.word	0x0800b172

0800a9e8 <_calloc_r>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	fba1 5402 	umull	r5, r4, r1, r2
 800a9ee:	b93c      	cbnz	r4, 800aa00 <_calloc_r+0x18>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f7fd fb17 	bl	8008024 <_malloc_r>
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	b928      	cbnz	r0, 800aa06 <_calloc_r+0x1e>
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	220c      	movs	r2, #12
 800aa02:	6002      	str	r2, [r0, #0]
 800aa04:	e7f9      	b.n	800a9fa <_calloc_r+0x12>
 800aa06:	462a      	mov	r2, r5
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f7fe fa17 	bl	8008e3c <memset>
 800aa0e:	e7f5      	b.n	800a9fc <_calloc_r+0x14>

0800aa10 <fiprintf>:
 800aa10:	b40e      	push	{r1, r2, r3}
 800aa12:	b503      	push	{r0, r1, lr}
 800aa14:	4601      	mov	r1, r0
 800aa16:	ab03      	add	r3, sp, #12
 800aa18:	4805      	ldr	r0, [pc, #20]	@ (800aa30 <fiprintf+0x20>)
 800aa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1e:	6800      	ldr	r0, [r0, #0]
 800aa20:	9301      	str	r3, [sp, #4]
 800aa22:	f7ff fd7f 	bl	800a524 <_vfiprintf_r>
 800aa26:	b002      	add	sp, #8
 800aa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa2c:	b003      	add	sp, #12
 800aa2e:	4770      	bx	lr
 800aa30:	20000188 	.word	0x20000188

0800aa34 <abort>:
 800aa34:	2006      	movs	r0, #6
 800aa36:	b508      	push	{r3, lr}
 800aa38:	f000 f82c 	bl	800aa94 <raise>
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	f7f7 fd9b 	bl	8002578 <_exit>

0800aa42 <_raise_r>:
 800aa42:	291f      	cmp	r1, #31
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4605      	mov	r5, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	d904      	bls.n	800aa56 <_raise_r+0x14>
 800aa4c:	2316      	movs	r3, #22
 800aa4e:	6003      	str	r3, [r0, #0]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	bd38      	pop	{r3, r4, r5, pc}
 800aa56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa58:	b112      	cbz	r2, 800aa60 <_raise_r+0x1e>
 800aa5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa5e:	b94b      	cbnz	r3, 800aa74 <_raise_r+0x32>
 800aa60:	4628      	mov	r0, r5
 800aa62:	f000 f831 	bl	800aac8 <_getpid_r>
 800aa66:	4622      	mov	r2, r4
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa70:	f000 b818 	b.w	800aaa4 <_kill_r>
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d00a      	beq.n	800aa8e <_raise_r+0x4c>
 800aa78:	1c59      	adds	r1, r3, #1
 800aa7a:	d103      	bne.n	800aa84 <_raise_r+0x42>
 800aa7c:	2316      	movs	r3, #22
 800aa7e:	6003      	str	r3, [r0, #0]
 800aa80:	2001      	movs	r0, #1
 800aa82:	e7e7      	b.n	800aa54 <_raise_r+0x12>
 800aa84:	2100      	movs	r1, #0
 800aa86:	4620      	mov	r0, r4
 800aa88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa8c:	4798      	blx	r3
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e7e0      	b.n	800aa54 <_raise_r+0x12>
	...

0800aa94 <raise>:
 800aa94:	4b02      	ldr	r3, [pc, #8]	@ (800aaa0 <raise+0xc>)
 800aa96:	4601      	mov	r1, r0
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	f7ff bfd2 	b.w	800aa42 <_raise_r>
 800aa9e:	bf00      	nop
 800aaa0:	20000188 	.word	0x20000188

0800aaa4 <_kill_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4d06      	ldr	r5, [pc, #24]	@ (800aac4 <_kill_r+0x20>)
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f7f7 fd57 	bl	8002564 <_kill>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d102      	bne.n	800aac0 <_kill_r+0x1c>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b103      	cbz	r3, 800aac0 <_kill_r+0x1c>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	20003cd4 	.word	0x20003cd4

0800aac8 <_getpid_r>:
 800aac8:	f7f7 bd4a 	b.w	8002560 <_getpid>

0800aacc <_init>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

0800aad8 <_fini>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr
